var __CPInfo__ = {
	"name" : "Atlas",
	"Version" : "0.0.1",
	"CPApplicationDelegateClass" : "AppController"
}
function CPStringFromSelector(aSelector)
{
    return sel_getName(aSelector);
}
function CPSelectorFromString(aSelectorName)
{
    return sel_registerName(aSelectorName);
}
function CPClassFromString(aClassName)
{
    return objj_getClass(aClassName);
}
function CPStringFromClass(aClass)
{
    return class_getName(aClass);
}
CPOrderedAscending = -1;
CPOrderedSame = 0;
CPOrderedDescending = 1;
CPNotFound = -1;
{var the_class = objj_allocateClassPair(Nil, "CPObject"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("isa")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPObject__init(self, _cmd)
{
    return self;
}

), new objj_method(sel_getUid("copy"), function $CPObject__copy(self, _cmd)
{
    return self;
}

), new objj_method(sel_getUid("mutableCopy"), function $CPObject__mutableCopy(self, _cmd)
{
    return objj_msgSend(self, "copy");
}

), new objj_method(sel_getUid("class"), function $CPObject__class(self, _cmd)
{
    return self.isa;
}

), new objj_method(sel_getUid("isKindOfClass:"), function $CPObject__isKindOfClass_(self, _cmd, aClass)
{
    return objj_msgSend(self.isa, "isSubclassOfClass:", aClass);
}

), new objj_method(sel_getUid("isMemberOfClass:"), function $CPObject__isMemberOfClass_(self, _cmd, aClass)
{
    return self.isa === aClass;
}

), new objj_method(sel_getUid("isProxy"), function $CPObject__isProxy(self, _cmd)
{
    return NO;
}

), new objj_method(sel_getUid("respondsToSelector:"), function $CPObject__respondsToSelector_(self, _cmd, aSelector)
{
    return !!class_getInstanceMethod(self.isa, aSelector);
}

), new objj_method(sel_getUid("implementsSelector:"), function $CPObject__implementsSelector_(self, _cmd, aSelector)
{
    var methods = class_copyMethodList(self.isa),
        count = methods.length;
    while (count--)
        if (method_getName(methods[count]) === aSelector)
            return YES;
    return NO;
}

), new objj_method(sel_getUid("methodForSelector:"), function $CPObject__methodForSelector_(self, _cmd, aSelector)
{
    return class_getMethodImplementation(self.isa, aSelector);
}

), new objj_method(sel_getUid("methodSignatureForSelector:"), function $CPObject__methodSignatureForSelector_(self, _cmd, aSelector)
{
    return nil;
}

), new objj_method(sel_getUid("description"), function $CPObject__description(self, _cmd)
{
    return "<" + self.isa.name + " 0x" + objj_msgSend(NSString, "stringWithHash:", objj_msgSend(self, "UID")) + ">";
}

), new objj_method(sel_getUid("performSelector:"), function $CPObject__performSelector_(self, _cmd, aSelector)
{
    return objj_msgSend(self, aSelector);
}

), new objj_method(sel_getUid("performSelector:withObject:"), function $CPObject__performSelector_withObject_(self, _cmd, aSelector, anObject)
{
    return objj_msgSend(self, aSelector, anObject);
}

), new objj_method(sel_getUid("performSelector:withObject:withObject:"), function $CPObject__performSelector_withObject_withObject_(self, _cmd, aSelector, anObject, anotherObject)
{
    return objj_msgSend(self, aSelector, anObject, anotherObject);
}

), new objj_method(sel_getUid("performSelector:withObjects:"), function $CPObject__performSelector_withObjects_(self, _cmd, aSelector, anObject)
{
    var params = [self, aSelector].concat(Array.prototype.slice.apply(arguments, [3]));
    return objj_msgSend.apply(this, params);
}

), new objj_method(sel_getUid("forwardingTargetForSelector:"), function $CPObject__forwardingTargetForSelector_(self, _cmd, aSelector)
{
    return nil;
}

), new objj_method(sel_getUid("forwardInvocation:"), function $CPObject__forwardInvocation_(self, _cmd, anInvocation)
{
    objj_msgSend(self, "doesNotRecognizeSelector:", objj_msgSend(anInvocation, "selector"));
}

), new objj_method(sel_getUid("doesNotRecognizeSelector:"), function $CPObject__doesNotRecognizeSelector_(self, _cmd, aSelector)
{
    CPLog.error(self.isa.name + "does not recognize selector " + aSelector);
}

), new objj_method(sel_getUid("className"), function $CPObject__className(self, _cmd)
{
    return self.isa.name;
}

), new objj_method(sel_getUid("hash"), function $CPObject__hash(self, _cmd)
{
    return objj_msgSend(self, "UID");
}

), new objj_method(sel_getUid("UID"), function $CPObject__UID(self, _cmd)
{
    return self._UID;
}

), new objj_method(sel_getUid("isEqual:"), function $CPObject__isEqual_(self, _cmd, anObject)
{
    return self === anObject || objj_msgSend(self, "UID") === objj_msgSend(anObject, "UID");
}

), new objj_method(sel_getUid("retain"), function $CPObject__retain(self, _cmd)
{
    return self;
}

), new objj_method(sel_getUid("self"), function $CPObject__self(self, _cmd)
{
    return self;
}

), new objj_method(sel_getUid("superclass"), function $CPObject__superclass(self, _cmd)
{
    return self.isa.super_class;
}

), new objj_method(sel_getUid("awakeAfterUsingCoder:"), function $CPObject__awakeAfterUsingCoder_(self, _cmd, aCoder)
{
    return self;
}

), new objj_method(sel_getUid("classForKeyedArchiver"), function $CPObject__classForKeyedArchiver(self, _cmd)
{
    return objj_msgSend(self, "classForCoder");
}

), new objj_method(sel_getUid("classForCoder"), function $CPObject__classForCoder(self, _cmd)
{
    return objj_msgSend(self, "class");
}

), new objj_method(sel_getUid("replacementObjectForArchiver:"), function $CPObject__replacementObjectForArchiver_(self, _cmd, anArchiver)
{
    return objj_msgSend(self, "replacementObjectForCoder:", anArchiver);
}

), new objj_method(sel_getUid("replacementObjectForKeyedArchiver:"), function $CPObject__replacementObjectForKeyedArchiver_(self, _cmd, anArchiver)
{
    return objj_msgSend(self, "replacementObjectForCoder:", anArchiver);
}

), new objj_method(sel_getUid("replacementObjectForCoder:"), function $CPObject__replacementObjectForCoder_(self, _cmd, aCoder)
{
    return self;
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("load"), function $CPObject__load(self, _cmd)
{
}

), new objj_method(sel_getUid("initialize"), function $CPObject__initialize(self, _cmd)
{
}

), new objj_method(sel_getUid("new"), function $CPObject__new(self, _cmd)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "init");
}

), new objj_method(sel_getUid("alloc"), function $CPObject__alloc(self, _cmd)
{
    return class_createInstance(self);
}

), new objj_method(sel_getUid("allocWithCoder:"), function $CPObject__allocWithCoder_(self, _cmd, aCoder)
{
    return objj_msgSend(self, "alloc");
}

), new objj_method(sel_getUid("class"), function $CPObject__class(self, _cmd)
{
    return self.isa;
}

), new objj_method(sel_getUid("superclass"), function $CPObject__superclass(self, _cmd)
{
    return self.super_class;
}

), new objj_method(sel_getUid("isSubclassOfClass:"), function $CPObject__isSubclassOfClass_(self, _cmd, aClass)
{
    var theClass = self.isa;
    for (; theClass; theClass = theClass.super_class)
        if (theClass === aClass)
            return YES;
    return NO;
}

), new objj_method(sel_getUid("isKindOfClass:"), function $CPObject__isKindOfClass_(self, _cmd, aClass)
{
    return objj_msgSend(self, "isSubclassOfClass:", aClass);
}

), new objj_method(sel_getUid("isMemberOfClass:"), function $CPObject__isMemberOfClass_(self, _cmd, aClass)
{
    return self === aClass;
}

), new objj_method(sel_getUid("instancesRespondToSelector:"), function $CPObject__instancesRespondToSelector_(self, _cmd, aSelector)
{
    return !!class_getInstanceMethod(self, aSelector);
}

), new objj_method(sel_getUid("instanceMethodForSelector:"), function $CPObject__instanceMethodForSelector_(self, _cmd, aSelector)
{
    return class_getMethodImplementation(self, aSelector);
}

), new objj_method(sel_getUid("description"), function $CPObject__description(self, _cmd)
{
    return self.isa.name;
}

)]);
}function CPDescriptionOfObject(anObject)
{
    if (anObject.isa)
    {
        if (objj_msgSend(anObject, "isKindOfClass:", objj_msgSend(CPString, "class")))
            return '@"' + objj_msgSend(anObject, "description") + '"';
        return objj_msgSend(anObject, "description");
    }
    if (typeof anObject !== "object")
        return String(anObject);
    var desc = "JavaScriptObject\n\n";
    for (var property in anObject)
    {
        if (anObject.hasOwnProperty(property))
            desc += "   " + property + ": " + CPDescriptionOfObject(anObject[property]) + "\n";
    }
    desc += "}";
    return (desc.split('\n')).join("\n\t");
}
{var the_class = objj_allocateClassPair(CPObject, "CPCoder"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("allowsKeyedCoding"), function $CPCoder__allowsKeyedCoding(self, _cmd)
{
    return NO;
}

), new objj_method(sel_getUid("encodeValueOfObjCType:at:"), function $CPCoder__encodeValueOfObjCType_at_(self, _cmd, aType, anObject)
{
}

), new objj_method(sel_getUid("encodeObject:"), function $CPCoder__encodeObject_(self, _cmd, anObject)
{
}

), new objj_method(sel_getUid("encodePoint:"), function $CPCoder__encodePoint_(self, _cmd, aPoint)
{
    objj_msgSend(self, "encodeNumber:", aPoint.x);
    objj_msgSend(self, "encodeNumber:", aPoint.y);
}

), new objj_method(sel_getUid("encodeRect:"), function $CPCoder__encodeRect_(self, _cmd, aRect)
{
    objj_msgSend(self, "encodePoint:", aRect.origin);
    objj_msgSend(self, "encodeSize:", aRect.size);
}

), new objj_method(sel_getUid("encodeSize:"), function $CPCoder__encodeSize_(self, _cmd, aSize)
{
    objj_msgSend(self, "encodeNumber:", aSize.width);
    objj_msgSend(self, "encodeNumber:", aSize.height);
}

), new objj_method(sel_getUid("encodePropertyList:"), function $CPCoder__encodePropertyList_(self, _cmd, aPropertyList)
{
}

), new objj_method(sel_getUid("encodeRootObject:"), function $CPCoder__encodeRootObject_(self, _cmd, anObject)
{
    objj_msgSend(self, "encodeObject:", anObject);
}

), new objj_method(sel_getUid("encodeBycopyObject:"), function $CPCoder__encodeBycopyObject_(self, _cmd, anObject)
{
    objj_msgSend(self, "encodeObject:", anObject);
}

), new objj_method(sel_getUid("encodeConditionalObject:"), function $CPCoder__encodeConditionalObject_(self, _cmd, anObject)
{
    objj_msgSend(self, "encodeObject:", anObject);
}

)]);
}{
var the_class = objj_getClass("CPObject")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPObject\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("awakeAfterUsingCoder:"), function $CPObject__awakeAfterUsingCoder_(self, _cmd, aDecoder)
{
    return self;
}

), new objj_method(sel_getUid("initWithCoder:"), function $CPObject__initWithCoder_(self, _cmd, aCoder)
{
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPObject__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSend(aCoder, "encodeObject:forKey:", objj_msgSend(self, "UID"), "UID");
}

)]);
}CPInvalidArgumentException = "CPInvalidArgumentException";
CPUnsupportedMethodException = "CPUnsupportedMethodException";
CPRangeException = "CPRangeException";
CPInternalInconsistencyException = "CPInternalInconsistencyException";
CPGenericException = "CPGenericException";
{var the_class = objj_allocateClassPair(CPObject, "CPException"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_userInfo"), new objj_ivar("name"), new objj_ivar("message")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithName:reason:userInfo:"), function $CPException__initWithName_reason_userInfo_(self, _cmd, aName, aReason, aUserInfo)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPException").super_class }, "init");
    if (self)
    {
        self.name = aName;
        self.message = aReason;
        self._userInfo = aUserInfo;
    }
    return self;
}

), new objj_method(sel_getUid("name"), function $CPException__name(self, _cmd)
{
    return self.name;
}

), new objj_method(sel_getUid("reason"), function $CPException__reason(self, _cmd)
{
    return self.message;
}

), new objj_method(sel_getUid("userInfo"), function $CPException__userInfo(self, _cmd)
{
    return self._userInfo;
}

), new objj_method(sel_getUid("description"), function $CPException__description(self, _cmd)
{
    return self.message;
}

), new objj_method(sel_getUid("raise"), function $CPException__raise(self, _cmd)
{
    throw self;
}

), new objj_method(sel_getUid("isEqual:"), function $CPException__isEqual_(self, _cmd, anObject)
{
    if (!anObject || !anObject.isa)
        return NO;
    return objj_msgSend(anObject, "isKindOfClass:", objj_msgSend(CPException, "class")) && self.name === objj_msgSend(anObject, "name") && self.message === objj_msgSend(anObject, "message") && (self._userInfo === objj_msgSend(anObject, "userInfo") || objj_msgSend(self._userInfo, "isEqual:", objj_msgSend(anObject, "userInfo")));
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPException__alloc(self, _cmd)
{
    var result = new Error();
    result.isa = objj_msgSend(self, "class");
    return result;
}

), new objj_method(sel_getUid("raise:reason:"), function $CPException__raise_reason_(self, _cmd, aName, aReason)
{
    objj_msgSend(objj_msgSend(self, "exceptionWithName:reason:userInfo:", aName, aReason, nil), "raise");
}

), new objj_method(sel_getUid("exceptionWithName:reason:userInfo:"), function $CPException__exceptionWithName_reason_userInfo_(self, _cmd, aName, aReason, aUserInfo)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithName:reason:userInfo:", aName, aReason, aUserInfo);
}

)]);
}{
var the_class = objj_getClass("CPException")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPException\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("copy"), function $CPException__copy(self, _cmd)
{
    return objj_msgSend(objj_msgSend(self, "class"), "exceptionWithName:reason:userInfo:", self.name, self.message, self._userInfo);
}

)]);
}var CPExceptionNameKey = "CPExceptionNameKey",
    CPExceptionReasonKey = "CPExceptionReasonKey",
    CPExceptionUserInfoKey = "CPExceptionUserInfoKey";
{
var the_class = objj_getClass("CPException")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPException\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPException__initWithCoder_(self, _cmd, aCoder)
{
    if (self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPException").super_class }, "init"))
    {
        self.name = objj_msgSend(aCoder, "decodeObjectForKey:", CPExceptionNameKey);
        self.message = objj_msgSend(aCoder, "decodeObjectForKey:", CPExceptionReasonKey);
        self._userInfo = objj_msgSend(aCoder, "decodeObjectForKey:", CPExceptionUserInfoKey);
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPException__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPException").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", self.name, CPExceptionNameKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self.message, CPExceptionReasonKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._userInfo, CPExceptionUserInfoKey);
}

)]);
}Error.prototype.isa = CPException;
Error.prototype._userInfo = null;
objj_msgSend(CPException, "initialize");
function _CPRaiseInvalidAbstractInvocation(anObject, aSelector)
{
    objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "*** -" + sel_getName(aSelector) + " cannot be sent to an abstract object of class " + objj_msgSend(anObject, "className") + ": Create a concrete instance!");
}
function _CPRaiseInvalidArgumentException(anObject, aSelector, aMessage)
{
}
function _CPRaiseRangeException(anObject, aSelector, anIndex, aCount)
{
}
function _CPReportLenientDeprecation(aClass, oldSelector, newSelector)
{
    CPLog.warn("[" + CPStringFromClass(aClass) + " " + CPStringFromSelector(oldSelector) + "] is deprecated, using " + CPStringFromSelector(newSelector) + " instead.");
}
function CPMakeRange(location, length)
{
    return {location: location, length: length};
}
function CPMakeRangeCopy(aRange)
{
    return {location: aRange.location, length: aRange.length};
}
function CPEmptyRange(aRange)
{
    return aRange.length === 0;
}
function CPMaxRange(aRange)
{
    return aRange.location + aRange.length;
}
function CPEqualRanges(lhsRange, rhsRange)
{
    return lhsRange.location === rhsRange.location && lhsRange.length === rhsRange.length;
}
function CPLocationInRange(aLocation, aRange)
{
    return aLocation >= aRange.location && aLocation < CPMaxRange(aRange);
}
function CPUnionRange(lhsRange, rhsRange)
{
    var location = MIN(lhsRange.location, rhsRange.location);
    return CPMakeRange(location, MAX(CPMaxRange(lhsRange), CPMaxRange(rhsRange)) - location);
}
function CPIntersectionRange(lhsRange, rhsRange)
{
    if (CPMaxRange(lhsRange) < rhsRange.location || CPMaxRange(rhsRange) < lhsRange.location)
        return CPMakeRange(0, 0);
    var location = MAX(lhsRange.location, rhsRange.location);
    return CPMakeRange(location, MIN(CPMaxRange(lhsRange), CPMaxRange(rhsRange)) - location);
}
function CPRangeInRange(lhsRange, rhsRange)
{
    return lhsRange.location <= rhsRange.location && CPMaxRange(lhsRange) >= CPMaxRange(rhsRange);
}
function CPStringFromRange(aRange)
{
    return "{" + aRange.location + ", " + aRange.length + "}";
}
function CPRangeFromString(aString)
{
    var comma = aString.indexOf(',');
    return {location: parseInt(aString.substr(1, comma - 1)), length: parseInt(aString.substring(comma + 1, aString.length))};
}
{var the_class = objj_allocateClassPair(CPObject, "CPSortDescriptor"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_key"), new objj_ivar("_selector"), new objj_ivar("_ascending")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithKey:ascending:"), function $CPSortDescriptor__initWithKey_ascending_(self, _cmd, aKey, isAscending)
{
    return objj_msgSend(self, "initWithKey:ascending:selector:", aKey, isAscending, sel_getUid("compare:"));
}

), new objj_method(sel_getUid("initWithKey:ascending:selector:"), function $CPSortDescriptor__initWithKey_ascending_selector_(self, _cmd, aKey, isAscending, aSelector)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSortDescriptor").super_class }, "init");
    if (self)
    {
        self._key = aKey;
        self._ascending = isAscending;
        self._selector = aSelector;
    }
    return self;
}

), new objj_method(sel_getUid("ascending"), function $CPSortDescriptor__ascending(self, _cmd)
{
    return self._ascending;
}

), new objj_method(sel_getUid("key"), function $CPSortDescriptor__key(self, _cmd)
{
    return self._key;
}

), new objj_method(sel_getUid("selector"), function $CPSortDescriptor__selector(self, _cmd)
{
    return self._selector;
}

), new objj_method(sel_getUid("compareObject:withObject:"), function $CPSortDescriptor__compareObject_withObject_(self, _cmd, lhsObject, rhsObject)
{
    return (self._ascending ? 1 : -1) * objj_msgSend(objj_msgSend(lhsObject, "valueForKeyPath:", self._key), "performSelector:withObject:", self._selector, objj_msgSend(rhsObject, "valueForKeyPath:", self._key));
}

), new objj_method(sel_getUid("reversedSortDescriptor"), function $CPSortDescriptor__reversedSortDescriptor(self, _cmd)
{
    return objj_msgSend(objj_msgSend(objj_msgSend(self, "class"), "alloc"), "initWithKey:ascending:selector:", self._key, !self._ascending, self._selector);
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("sortDescriptorWithKey:ascending:"), function $CPSortDescriptor__sortDescriptorWithKey_ascending_(self, _cmd, aKey, isAscending)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithKey:ascending:", aKey, isAscending);
}

), new objj_method(sel_getUid("sortDescriptorWithKey:ascending:selector:"), function $CPSortDescriptor__sortDescriptorWithKey_ascending_selector_(self, _cmd, aKey, isAscending, aSelector)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithKey:ascending:selector:", aKey, isAscending, aSelector);
}

)]);
}var CPSortDescriptorKeyKey = "CPSortDescriptorKeyKey",
    CPSortDescriptorAscendingKey = "CPSortDescriptorAscendingKey",
    CPSortDescriptorSelectorKey = "CPSortDescriptorSelectorKey";
{
var the_class = objj_getClass("CPSortDescriptor")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPSortDescriptor\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPSortDescriptor__initWithCoder_(self, _cmd, aCoder)
{
    if (self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSortDescriptor").super_class }, "init"))
    {
        self._key = objj_msgSend(aCoder, "decodeObjectForKey:", CPSortDescriptorKeyKey);
        self._ascending = objj_msgSend(aCoder, "decodeBoolForKey:", CPSortDescriptorAscendingKey);
        self._selector = CPSelectorFromString(objj_msgSend(aCoder, "decodeObjectForKey:", CPSortDescriptorSelectorKey));
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPSortDescriptor__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSortDescriptor").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._key, CPSortDescriptorKeyKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._ascending, CPSortDescriptorAscendingKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", CPStringFromSelector(self._selector), CPSortDescriptorSelectorKey);
}

)]);
}CPURLNameKey = "CPURLNameKey";
CPURLLocalizedNameKey = "CPURLLocalizedNameKey";
CPURLIsRegularFileKey = "CPURLIsRegularFileKey";
CPURLIsDirectoryKey = "CPURLIsDirectoryKey";
CPURLIsSymbolicLinkKey = "CPURLIsSymbolicLinkKey";
CPURLIsVolumeKey = "CPURLIsVolumeKey";
CPURLIsPackageKey = "CPURLIsPackageKey";
CPURLIsSystemImmutableKey = "CPURLIsSystemImmutableKey";
CPURLIsUserImmutableKey = "CPURLIsUserImmutableKey";
CPURLIsHiddenKey = "CPURLIsHiddenKey";
CPURLHasHiddenExtensionKey = "CPURLHasHiddenExtensionKey";
CPURLCreationDateKey = "CPURLCreationDateKey";
CPURLContentAccessDateKey = "CPURLContentAccessDateKey";
CPURLContentModificationDateKey = "CPURLContentModificationDateKey";
CPURLAttributeModificationDateKey = "CPURLAttributeModificationDateKey";
CPURLLinkCountKey = "CPURLLinkCountKey";
CPURLParentDirectoryURLKey = "CPURLParentDirectoryURLKey";
CPURLVolumeURLKey = "CPURLTypeIdentifierKey";
CPURLTypeIdentifierKey = "CPURLTypeIdentifierKey";
CPURLLocalizedTypeDescriptionKey = "CPURLLocalizedTypeDescriptionKey";
CPURLLabelNumberKey = "CPURLLabelNumberKey";
CPURLLabelColorKey = "CPURLLabelColorKey";
CPURLLocalizedLabelKey = "CPURLLocalizedLabelKey";
CPURLEffectiveIconKey = "CPURLEffectiveIconKey";
CPURLCustomIconKey = "CPURLCustomIconKey";
{var the_class = objj_allocateClassPair(CPObject, "CPURL"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPURL__init(self, _cmd)
{
    return nil;
}

), new objj_method(sel_getUid("initWithScheme:host:path:"), function $CPURL__initWithScheme_host_path_(self, _cmd, aScheme, aHost, aPath)
{
    var URLString = (aScheme ? aScheme + ":" : "") + (aHost ? aHost + "//" : "") + (aPath || "");
    return objj_msgSend(self, "initWithString:", URLString);
}

), new objj_method(sel_getUid("initWithString:"), function $CPURL__initWithString_(self, _cmd, URLString)
{
    return objj_msgSend(self, "initWithString:relativeToURL:", URLString, nil);
}

), new objj_method(sel_getUid("initWithString:relativeToURL:"), function $CPURL__initWithString_relativeToURL_(self, _cmd, URLString, aBaseURL)
{
    var result = new CFURL(URLString, aBaseURL);
    result.isa = objj_msgSend(self, "class");
    return result;
}

), new objj_method(sel_getUid("absoluteURL"), function $CPURL__absoluteURL(self, _cmd)
{
    return self.absoluteURL();
}

), new objj_method(sel_getUid("baseURL"), function $CPURL__baseURL(self, _cmd)
{
    return self.baseURL();
}

), new objj_method(sel_getUid("absoluteString"), function $CPURL__absoluteString(self, _cmd)
{
    return self.absoluteString();
}

), new objj_method(sel_getUid("relativeString"), function $CPURL__relativeString(self, _cmd)
{
    return self.string();
}

), new objj_method(sel_getUid("path"), function $CPURL__path(self, _cmd)
{
    return objj_msgSend(self, "absoluteURL").path();
}

), new objj_method(sel_getUid("pathComponents"), function $CPURL__pathComponents(self, _cmd)
{
    var components = self.pathComponents();
    return objj_msgSend(components, "copy");
}

), new objj_method(sel_getUid("relativePath"), function $CPURL__relativePath(self, _cmd)
{
    return self.path();
}

), new objj_method(sel_getUid("scheme"), function $CPURL__scheme(self, _cmd)
{
    return self.scheme();
}

), new objj_method(sel_getUid("user"), function $CPURL__user(self, _cmd)
{
    return objj_msgSend(self, "absoluteURL").user();
}

), new objj_method(sel_getUid("password"), function $CPURL__password(self, _cmd)
{
    return objj_msgSend(self, "absoluteURL").password();
}

), new objj_method(sel_getUid("host"), function $CPURL__host(self, _cmd)
{
    return objj_msgSend(self, "absoluteURL").domain();
}

), new objj_method(sel_getUid("port"), function $CPURL__port(self, _cmd)
{
    var portNumber = objj_msgSend(self, "absoluteURL").portNumber();
    if (portNumber === -1)
        return nil;
    return portNumber;
}

), new objj_method(sel_getUid("parameterString"), function $CPURL__parameterString(self, _cmd)
{
    return self.queryString();
}

), new objj_method(sel_getUid("fragment"), function $CPURL__fragment(self, _cmd)
{
    return self.fragment();
}

), new objj_method(sel_getUid("isEqual:"), function $CPURL__isEqual_(self, _cmd, anObject)
{
    if (self === anObject)
        return YES;
    if (!anObject || !objj_msgSend(anObject, "isKindOfClass:", objj_msgSend(CPURL, "class")))
        return NO;
    return objj_msgSend(self, "isEqualToURL:", anObject);
}

), new objj_method(sel_getUid("isEqualToURL:"), function $CPURL__isEqualToURL_(self, _cmd, aURL)
{
    if (self === aURL)
        return YES;
    return objj_msgSend(objj_msgSend(self, "absoluteString"), "isEqual:", objj_msgSend(aURL, "absoluteString"));
}

), new objj_method(sel_getUid("lastPathComponent"), function $CPURL__lastPathComponent(self, _cmd)
{
    return objj_msgSend(self, "absoluteURL").lastPathComponent();
}

), new objj_method(sel_getUid("pathExtension"), function $CPURL__pathExtension(self, _cmd)
{
    return self.pathExtension();
}

), new objj_method(sel_getUid("URLByDeletingLastPathComponent"), function $CPURL__URLByDeletingLastPathComponent(self, _cmd)
{
    var result = self.createCopyDeletingLastPathComponent();
    result.isa = objj_msgSend(self, "class");
    return result;
}

), new objj_method(sel_getUid("standardizedURL"), function $CPURL__standardizedURL(self, _cmd)
{
    return self.standardizedURL();
}

), new objj_method(sel_getUid("isFileURL"), function $CPURL__isFileURL(self, _cmd)
{
    return objj_msgSend(self, "scheme") === "file";
}

), new objj_method(sel_getUid("description"), function $CPURL__description(self, _cmd)
{
    return objj_msgSend(self, "absoluteString");
}

), new objj_method(sel_getUid("resourceValueForKey:"), function $CPURL__resourceValueForKey_(self, _cmd, aKey)
{
    return self.resourcePropertyForKey(aKey);
}

), new objj_method(sel_getUid("setResourceValue:forKey:"), function $CPURL__setResourceValue_forKey_(self, _cmd, anObject, aKey)
{
    return self.setResourcePropertyForKey(aKey, anObject);
}

), new objj_method(sel_getUid("staticResourceData"), function $CPURL__staticResourceData(self, _cmd)
{
    return self.staticResourceData();
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPURL__alloc(self, _cmd)
{
    var result = new CFURL();
    result.isa = objj_msgSend(self, "class");
    return result;
}

), new objj_method(sel_getUid("URLWithString:"), function $CPURL__URLWithString_(self, _cmd, URLString)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithString:", URLString);
}

), new objj_method(sel_getUid("URLWithString:relativeToURL:"), function $CPURL__URLWithString_relativeToURL_(self, _cmd, URLString, aBaseURL)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithString:relativeToURL:", URLString, aBaseURL);
}

)]);
}var CPURLURLStringKey = "CPURLURLStringKey",
    CPURLBaseURLKey = "CPURLBaseURLKey";
{
var the_class = objj_getClass("CPURL")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPURL\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPURL__initWithCoder_(self, _cmd, aCoder)
{
    return objj_msgSend(self, "initWithString:relativeToURL:", objj_msgSend(aCoder, "decodeObjectForKey:", CPURLURLStringKey), objj_msgSend(aCoder, "decodeObjectForKey:", CPURLBaseURLKey));
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPURL__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPURL").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", _baseURL, CPURLBaseURLKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", _string, CPURLURLStringKey);
}

)]);
}CFURL.prototype.isa = objj_msgSend(CPURL, "class");
{var the_class = objj_allocateClassPair(CPObject, "CPValue"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_JSObject")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithJSObject:"), function $CPValue__initWithJSObject_(self, _cmd, aJSObject)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPValue").super_class }, "init");
    if (self)
        self._JSObject = aJSObject;
    return self;
}

), new objj_method(sel_getUid("JSObject"), function $CPValue__JSObject(self, _cmd)
{
    return self._JSObject;
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("valueWithJSObject:"), function $CPValue__valueWithJSObject_(self, _cmd, aJSObject)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithJSObject:", aJSObject);
}

)]);
}var CPValueValueKey = "CPValueValueKey";
{
var the_class = objj_getClass("CPValue")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPValue\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPValue__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPValue").super_class }, "init");
    if (self)
        self._JSObject = JSON.parse(objj_msgSend(aCoder, "decodeObjectForKey:", CPValueValueKey));
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPValue__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPValue").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", JSON.stringify(self._JSObject), CPValueValueKey);
}

)]);
}function CPJSObjectCreateJSON(aJSObject)
{
    CPLog.warn("CPJSObjectCreateJSON deprecated, use JSON.stringify() or CPString's objectFromJSON");
    return JSON.stringify(aJSObject);
}
function CPJSObjectCreateWithJSON(aString)
{
    CPLog.warn("CPJSObjectCreateWithJSON deprecated, use JSON.parse() or CPString's JSONFromObject");
    return JSON.parse(aString);
}
var CPNullSharedNull = nil;
{var the_class = objj_allocateClassPair(CPObject, "CPNull"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("isEqual:"), function $CPNull__isEqual_(self, _cmd, anObject)
{
    if (self === anObject)
        return YES;
    return objj_msgSend(anObject, "isKindOfClass:", objj_msgSend(CPNull, "class"));
}

), new objj_method(sel_getUid("initWithCoder:"), function $CPNull__initWithCoder_(self, _cmd, aCoder)
{
    return objj_msgSend(CPNull, "null");
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPNull__encodeWithCoder_(self, _cmd, aCoder)
{
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("null"), function $CPNull__null(self, _cmd)
{
    if (!CPNullSharedNull)
        CPNullSharedNull = objj_msgSend(objj_msgSend(CPNull, "alloc"), "init");
    return CPNullSharedNull;
}

)]);
}CPCaseInsensitiveSearch = 1;
CPLiteralSearch = 2;
CPBackwardsSearch = 4;
CPAnchoredSearch = 8;
CPNumericSearch = 64;
CPDiacriticInsensitiveSearch = 128;
var CPStringUIDs = new CFMutableDictionary(),
    CPStringRegexSpecialCharacters = ['/', '.', '*', '+', '?', '|', '$', '^', '(', ')', '[', ']', '{', '}', '\\'],
    CPStringRegexEscapeExpression = new RegExp("(\\" + CPStringRegexSpecialCharacters.join("|\\") + ")", 'g'),
    CPStringRegexTrimWhitespace = new RegExp("(^\\s+|\\s+$)", 'g');
{var the_class = objj_allocateClassPair(CPObject, "CPString"),
meta_class = the_class.isa;var CPStringNull = objj_msgSend(CPNull, "null");
objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithString:"), function $CPString__initWithString_(self, _cmd, aString)
{
    if (objj_msgSend(self, "class") === CPString)
        return String(aString);
    var result = new String(aString);
    result.isa = objj_msgSend(self, "class");
    return result;
}

), new objj_method(sel_getUid("initWithFormat:"), function $CPString__initWithFormat_(self, _cmd, format)
{
    if (!format)
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "initWithFormat: the format can't be 'nil'");
    self = ObjectiveJ.sprintf.apply(this, Array.prototype.slice.call(arguments, 2));
    return self;
}

), new objj_method(sel_getUid("description"), function $CPString__description(self, _cmd)
{
    return self;
}

), new objj_method(sel_getUid("length"), function $CPString__length(self, _cmd)
{
    return self.length;
}

), new objj_method(sel_getUid("characterAtIndex:"), function $CPString__characterAtIndex_(self, _cmd, anIndex)
{
    return self.charAt(anIndex);
}

), new objj_method(sel_getUid("stringByAppendingFormat:"), function $CPString__stringByAppendingFormat_(self, _cmd, format)
{
    if (!format)
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "initWithFormat: the format can't be 'nil'");
    return self + ObjectiveJ.sprintf.apply(this, Array.prototype.slice.call(arguments, 2));
}

), new objj_method(sel_getUid("stringByAppendingString:"), function $CPString__stringByAppendingString_(self, _cmd, aString)
{
    return self + aString;
}

), new objj_method(sel_getUid("stringByPaddingToLength:withString:startingAtIndex:"), function $CPString__stringByPaddingToLength_withString_startingAtIndex_(self, _cmd, aLength, aString, anIndex)
{
    if (self.length == aLength)
        return self;
    if (aLength < self.length)
        return self.substr(0, aLength);
    var string = self,
        substring = aString.substring(anIndex),
        difference = aLength - self.length;
    while ((difference -= substring.length) >= 0)
        string += substring;
    if (-difference < substring.length)
        string += substring.substring(0, -difference);
    return string;
}

), new objj_method(sel_getUid("componentsSeparatedByString:"), function $CPString__componentsSeparatedByString_(self, _cmd, aString)
{
    return self.split(aString);
}

), new objj_method(sel_getUid("substringFromIndex:"), function $CPString__substringFromIndex_(self, _cmd, anIndex)
{
    return self.substr(anIndex);
}

), new objj_method(sel_getUid("substringWithRange:"), function $CPString__substringWithRange_(self, _cmd, aRange)
{
    if (aRange.location < 0 || CPMaxRange(aRange) > self.length)
        objj_msgSend(CPException, "raise:reason:", CPRangeException, "aRange out of bounds");
    return self.substr(aRange.location, aRange.length);
}

), new objj_method(sel_getUid("substringToIndex:"), function $CPString__substringToIndex_(self, _cmd, anIndex)
{
    if (anIndex > self.length)
        objj_msgSend(CPException, "raise:reason:", CPRangeException, "index out of bounds");
    return self.substring(0, anIndex);
}

), new objj_method(sel_getUid("rangeOfString:"), function $CPString__rangeOfString_(self, _cmd, aString)
{
    return objj_msgSend(self, "rangeOfString:options:", aString, 0);
}

), new objj_method(sel_getUid("rangeOfString:options:"), function $CPString__rangeOfString_options_(self, _cmd, aString, aMask)
{
    return objj_msgSend(self, "rangeOfString:options:range:", aString, aMask, nil);
}

), new objj_method(sel_getUid("rangeOfString:options:range:"), function $CPString__rangeOfString_options_range_(self, _cmd, aString, aMask, aRange)
{
    if (!aString)
        return CPMakeRange(CPNotFound, 0);
    var string = aRange == nil ? self : objj_msgSend(self, "substringWithRange:", aRange),
        location = CPNotFound;
    if (aMask & CPCaseInsensitiveSearch)
    {
        string = string.toLowerCase();
        aString = aString.toLowerCase();
    }
    if (aMask & CPBackwardsSearch)
    {
        location = string.lastIndexOf(aString);
        if (aMask & CPAnchoredSearch && location + aString.length != string.length)
            location = CPNotFound;
    }
    else if (aMask & CPAnchoredSearch)
        location = (string.substr(0, aString.length)).indexOf(aString) != CPNotFound ? 0 : CPNotFound;
    else
        location = string.indexOf(aString);
    if (location == CPNotFound)
        return CPMakeRange(CPNotFound, 0);
    return CPMakeRange(location + (aRange ? aRange.location : 0), aString.length);
}

), new objj_method(sel_getUid("stringByEscapingRegexControlCharacters"), function $CPString__stringByEscapingRegexControlCharacters(self, _cmd)
{
    return self.replace(CPStringRegexEscapeExpression, "\\$1");
}

), new objj_method(sel_getUid("stringByReplacingOccurrencesOfString:withString:"), function $CPString__stringByReplacingOccurrencesOfString_withString_(self, _cmd, target, replacement)
{
    return self.replace(new RegExp(objj_msgSend(target, "stringByEscapingRegexControlCharacters"), "g"), replacement);
}

), new objj_method(sel_getUid("stringByReplacingOccurrencesOfString:withString:options:range:"), function $CPString__stringByReplacingOccurrencesOfString_withString_options_range_(self, _cmd, target, replacement, options, searchRange)
{
    var start = self.substring(0, searchRange.location),
        stringSegmentToSearch = self.substr(searchRange.location, searchRange.length),
        end = self.substring(searchRange.location + searchRange.length, self.length),
        target = objj_msgSend(target, "stringByEscapingRegexControlCharacters"),
        regExp;
    if (options & CPCaseInsensitiveSearch)
        regExp = new RegExp(target, "gi");
    else
        regExp = new RegExp(target, "g");
    return start + '' + stringSegmentToSearch.replace(regExp, replacement) + '' + end;
}

), new objj_method(sel_getUid("stringByReplacingCharactersInRange:withString:"), function $CPString__stringByReplacingCharactersInRange_withString_(self, _cmd, range, replacement)
{
    return '' + self.substring(0, range.location) + replacement + self.substring(range.location + range.length, self.length);
}

), new objj_method(sel_getUid("stringByTrimmingWhitespace"), function $CPString__stringByTrimmingWhitespace(self, _cmd)
{
    return self.replace(CPStringRegexTrimWhitespace, "");
}

), new objj_method(sel_getUid("compare:"), function $CPString__compare_(self, _cmd, aString)
{
    return objj_msgSend(self, "compare:options:", aString, nil);
}

), new objj_method(sel_getUid("caseInsensitiveCompare:"), function $CPString__caseInsensitiveCompare_(self, _cmd, aString)
{
    return objj_msgSend(self, "compare:options:", aString, CPCaseInsensitiveSearch);
}

), new objj_method(sel_getUid("compare:options:"), function $CPString__compare_options_(self, _cmd, aString, aMask)
{
    if (aString === nil)
        return CPOrderedDescending;
    if (aString === CPStringNull)
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "compare: argument can't be 'CPNull'");
    var lhs = self,
        rhs = aString;
    if (aMask & CPCaseInsensitiveSearch)
    {
        lhs = lhs.toLowerCase();
        rhs = rhs.toLowerCase();
    }
    if (aMask & CPDiacriticInsensitiveSearch)
    {
        lhs = lhs.stripDiacritics();
        rhs = rhs.stripDiacritics();
    }
    if (lhs < rhs)
        return CPOrderedAscending;
    if (lhs > rhs)
        return CPOrderedDescending;
    return CPOrderedSame;
}

), new objj_method(sel_getUid("compare:options:range:"), function $CPString__compare_options_range_(self, _cmd, aString, aMask, range)
{
    var lhs = objj_msgSend(self, "substringWithRange:", range),
        rhs = aString;
    return objj_msgSend(lhs, "compare:options:", rhs, aMask);
}

), new objj_method(sel_getUid("hasPrefix:"), function $CPString__hasPrefix_(self, _cmd, aString)
{
    return aString && aString != "" && self.indexOf(aString) == 0;
}

), new objj_method(sel_getUid("hasSuffix:"), function $CPString__hasSuffix_(self, _cmd, aString)
{
    return aString && aString != "" && self.length >= aString.length && self.lastIndexOf(aString) == self.length - aString.length;
}

), new objj_method(sel_getUid("isEqual:"), function $CPString__isEqual_(self, _cmd, anObject)
{
    if (self === anObject)
        return YES;
    if (!anObject || !objj_msgSend(anObject, "isKindOfClass:", objj_msgSend(CPString, "class")))
        return NO;
    return objj_msgSend(self, "isEqualToString:", anObject);
}

), new objj_method(sel_getUid("isEqualToString:"), function $CPString__isEqualToString_(self, _cmd, aString)
{
    return self == String(aString);
}

), new objj_method(sel_getUid("UID"), function $CPString__UID(self, _cmd)
{
    var UID = CPStringUIDs.valueForKey(self);
    if (!UID)
    {
        UID = objj_generateObjectUID();
        CPStringUIDs.setValueForKey(self, UID);
    }
    return UID + "";
}

), new objj_method(sel_getUid("commonPrefixWithString:"), function $CPString__commonPrefixWithString_(self, _cmd, aString)
{
    return objj_msgSend(self, "commonPrefixWithString:options:", aString, 0);
}

), new objj_method(sel_getUid("commonPrefixWithString:options:"), function $CPString__commonPrefixWithString_options_(self, _cmd, aString, aMask)
{
    var len = 0,
        lhs = self,
        rhs = aString,
        min = MIN(objj_msgSend(lhs, "length"), objj_msgSend(rhs, "length"));
    if (aMask & CPCaseInsensitiveSearch)
    {
        lhs = objj_msgSend(lhs, "lowercaseString");
        rhs = objj_msgSend(rhs, "lowercaseString");
    }
    for (; len < min; len++)
    {
        if (objj_msgSend(lhs, "characterAtIndex:", len) !== objj_msgSend(rhs, "characterAtIndex:", len))
            break;
    }
    return objj_msgSend(self, "substringToIndex:", len);
}

), new objj_method(sel_getUid("capitalizedString"), function $CPString__capitalizedString(self, _cmd)
{
    var parts = self.split(/\b/g),
        i = 0,
        count = parts.length;
    for (; i < count; i++)
    {
        if (i == 0 || /\s$/.test(parts[i - 1]))
            parts[i] = (parts[i].substring(0, 1)).toUpperCase() + (parts[i].substring(1)).toLowerCase();
        else
            parts[i] = parts[i].toLowerCase();
    }
    return parts.join("");
}

), new objj_method(sel_getUid("lowercaseString"), function $CPString__lowercaseString(self, _cmd)
{
    return self.toLowerCase();
}

), new objj_method(sel_getUid("uppercaseString"), function $CPString__uppercaseString(self, _cmd)
{
    return self.toUpperCase();
}

), new objj_method(sel_getUid("doubleValue"), function $CPString__doubleValue(self, _cmd)
{
    return parseFloat(self, 10);
}

), new objj_method(sel_getUid("boolValue"), function $CPString__boolValue(self, _cmd)
{
    var replaceRegExp = new RegExp("^\\s*[\\+,\\-]?0*");
    return (RegExp("^[Y,y,t,T,1-9]")).test(self.replace(replaceRegExp, ''));
}

), new objj_method(sel_getUid("floatValue"), function $CPString__floatValue(self, _cmd)
{
    return parseFloat(self, 10);
}

), new objj_method(sel_getUid("intValue"), function $CPString__intValue(self, _cmd)
{
    return parseInt(self, 10);
}

), new objj_method(sel_getUid("pathComponents"), function $CPString__pathComponents(self, _cmd)
{
    if (self.length === 0)
        return [""];
    if (self === "/")
        return ["/"];
    var result = self.split('/');
    if (result[0] === "")
        result[0] = "/";
    var index = result.length - 1;
    if (index > 0)
    {
        if (result[index] === "")
            result[index] = "/";
        while (index--)
        {
            while (result[index] === "")
                result.splice(index--, 1);
        }
    }
    return result;
}

), new objj_method(sel_getUid("pathExtension"), function $CPString__pathExtension(self, _cmd)
{
    if (self.lastIndexOf('.') === CPNotFound)
        return "";
    return self.substr(self.lastIndexOf('.') + 1);
}

), new objj_method(sel_getUid("lastPathComponent"), function $CPString__lastPathComponent(self, _cmd)
{
    var components = objj_msgSend(self, "pathComponents"),
        lastIndex = components.length - 1,
        lastComponent = components[lastIndex];
    return lastIndex > 0 && lastComponent === "/" ? components[lastIndex - 1] : lastComponent;
}

), new objj_method(sel_getUid("stringByAppendingPathComponent:"), function $CPString__stringByAppendingPathComponent_(self, _cmd, aString)
{
    var components = objj_msgSend(self, "pathComponents"),
        addComponents = aString && aString !== "/" ? objj_msgSend(aString, "pathComponents") : [];
    return objj_msgSend(CPString, "pathWithComponents:", components.concat(addComponents));
}

), new objj_method(sel_getUid("stringByAppendingPathExtension:"), function $CPString__stringByAppendingPathExtension_(self, _cmd, ext)
{
    if (ext.indexOf('/') >= 0 || self.length === 0 || self === "/")
        return self;
    var components = objj_msgSend(self, "pathComponents"),
        last = components.length - 1;
    if (last > 0 && components[last] === "/")
        components.splice(last--, 1);
    components[last] = components[last] + "." + ext;
    return objj_msgSend(CPString, "pathWithComponents:", components);
}

), new objj_method(sel_getUid("stringByDeletingLastPathComponent"), function $CPString__stringByDeletingLastPathComponent(self, _cmd)
{
    if (self.length === 0)
        return "";
    else if (self === "/")
        return "/";
    var components = objj_msgSend(self, "pathComponents"),
        last = components.length - 1;
    if (components[last] === "/")
        last--;
    components.splice(last, components.length - last);
    return objj_msgSend(CPString, "pathWithComponents:", components);
}

), new objj_method(sel_getUid("stringByDeletingPathExtension"), function $CPString__stringByDeletingPathExtension(self, _cmd)
{
    var extension = objj_msgSend(self, "pathExtension");
    if (extension === "")
        return self;
    else if (self.lastIndexOf('.') < 1)
        return self;
    return self.substr(0, objj_msgSend(self, "length") - (extension.length + 1));
}

), new objj_method(sel_getUid("stringByStandardizingPath"), function $CPString__stringByStandardizingPath(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPURL, "URLWithString:", self), "absoluteString");
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPString__alloc(self, _cmd)
{
    if (objj_msgSend(self, "class") !== CPString)
        return objj_msgSendSuper({ receiver:self, super_class:objj_getMetaClass("CPString").super_class }, "alloc");
    return new String();
}

), new objj_method(sel_getUid("string"), function $CPString__string(self, _cmd)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "init");
}

), new objj_method(sel_getUid("stringWithHash:"), function $CPString__stringWithHash_(self, _cmd, aHash)
{
    var hashString = (parseInt(aHash, 10)).toString(16);
    return "000000".substring(0, MAX(6 - hashString.length, 0)) + hashString;
}

), new objj_method(sel_getUid("stringWithString:"), function $CPString__stringWithString_(self, _cmd, aString)
{
    if (!aString)
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "stringWithString: the string can't be 'nil'");
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithString:", aString);
}

), new objj_method(sel_getUid("stringWithFormat:"), function $CPString__stringWithFormat_(self, _cmd, format)
{
    if (!format)
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "initWithFormat: the format can't be 'nil'");
    return ObjectiveJ.sprintf.apply(this, Array.prototype.slice.call(arguments, 2));
}

), new objj_method(sel_getUid("pathWithComponents:"), function $CPString__pathWithComponents_(self, _cmd, components)
{
    var size = components.length,
        result = "",
        i = -1,
        firstRound = true,
        firstIsSlash = false;
    while (++i < size)
    {
        var component = components[i],
            lenMinusOne = component.length - 1;
        if (lenMinusOne >= 0 && (component !== "/" || firstRound))
        {
            if (lenMinusOne > 0 && component.indexOf("/", lenMinusOne) === lenMinusOne)
                component = component.substring(0, lenMinusOne);
            if (firstRound)
            {
                if (component === "/")
                    firstIsSlash = true;
                firstRound = false;
            }
            else if (!firstIsSlash)
                result += "/";
            else
                firstIsSlash = false;
            result += component;
        }
    }
    return result;
}

)]);
}{
var the_class = objj_getClass("CPString")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPString\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("objectFromJSON"), function $CPString__objectFromJSON(self, _cmd)
{
    return JSON.parse(self);
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("JSONFromObject:"), function $CPString__JSONFromObject_(self, _cmd, anObject)
{
    return JSON.stringify(anObject);
}

)]);
}{
var the_class = objj_getClass("CPString")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPString\"");
var meta_class = the_class.isa;class_addMethods(meta_class, [new objj_method(sel_getUid("UUID"), function $CPString__UUID(self, _cmd)
{
    var g = "",
        i = 0;
    for (; i < 32; i++)
        g += (FLOOR(RAND() * 0xF)).toString(0xF);
    return g;
}

)]);
}var diacritics = [[192, 198], [224, 230], [231, 231], [232, 235], [236, 239], [242, 246], [249, 252]],
    normalized = [65, 97, 99, 101, 105, 111, 117];
String.prototype.stripDiacritics = function()
{
    var output = "";
    for (var indexSource = 0; indexSource < this.length; indexSource++)
    {
        var code = this.charCodeAt(indexSource);
        for (var i = 0; i < diacritics.length; i++)
        {
            var drange = diacritics[i];
            if (code >= drange[0] && code <= drange[drange.length - 1])
            {
                code = normalized[i];
                break;
            }        }        output += String.fromCharCode(code);
    }    return output;
};
String.prototype.isa = CPString;
{var the_class = objj_allocateClassPair(CPObject, "CPEnumerator"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("nextObject"), function $CPEnumerator__nextObject(self, _cmd)
{
    return nil;
}

), new objj_method(sel_getUid("allObjects"), function $CPEnumerator__allObjects(self, _cmd)
{
    return [];
}

)]);
}var CPBinarySearchingFirstEqual = 0,
    CPBinarySearchingLastEqual = 1 << 1,
    CPBinarySearchingInsertionIndex = 1 << 2;
var concat = Array.prototype.concat,
    indexOf = Array.prototype.indexOf,
    join = Array.prototype.join,
    pop = Array.prototype.pop,
    push = Array.prototype.push,
    slice = Array.prototype.slice,
    splice = Array.prototype.splice;
{var the_class = objj_allocateClassPair(CPObject, "CPArray"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithArray:"), function $CPArray__initWithArray_(self, _cmd, anArray)
{
    return objj_msgSend(self, "initWithArray:copyItems:", anArray, NO);
}

), new objj_method(sel_getUid("initWithArray:copyItems:"), function $CPArray__initWithArray_copyItems_(self, _cmd, anArray, shouldCopyItems)
{
    if (!shouldCopyItems && objj_msgSend(anArray, "isKindOfClass:", objj_msgSend(CPArray, "class")))
        return slice.call(anArray, 0);
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPArray").super_class }, "init");
    var index = 0;
    if (objj_msgSend(anArray, "isKindOfClass:", objj_msgSend(CPArray, "class")))
    {
        var count = anArray.length;
        for (; index < count; ++index)
        {
            var object = anArray[index];
            self[index] = object && object.isa ? objj_msgSend(object, "copy") : object;
        }
        return self;
    }
    var count = objj_msgSend(anArray, "count");
    for (; index < count; ++index)
    {
        var object = objj_msgSend(anArray, "objectAtIndex:", index);
        self[index] = shouldCopyItems && object && object.isa ? objj_msgSend(object, "copy") : object;
    }
    return self;
}

), new objj_method(sel_getUid("initWithObjects:"), function $CPArray__initWithObjects_(self, _cmd, anObject)
{
    var index = 2,
        count = arguments.length;
    for (; index < count; ++index)
        if (arguments[index] === nil)
            break;
    return self.slice.call(arguments, 2, index);
}

), new objj_method(sel_getUid("initWithObjects:count:"), function $CPArray__initWithObjects_count_(self, _cmd, objects, aCount)
{
    if (objj_msgSend(objects, "isKindOfClass:", objj_msgSend(CPArray, "class")))
        return self.slice.call(objects, 0);
    var array = [],
        index = 0;
    for (; index < aCount; ++index)
        self.push.call(array, objj_msgSend(objects, "objectAtIndex:", index));
    return array;
}

), new objj_method(sel_getUid("initWithCapacity:"), function $CPArray__initWithCapacity_(self, _cmd, aCapacity)
{
    return self;
}

), new objj_method(sel_getUid("count"), function $CPArray__count(self, _cmd)
{
    return self.length;
}

), new objj_method(sel_getUid("objectAtIndex:"), function $CPArray__objectAtIndex_(self, _cmd, anIndex)
{
    if (anIndex >= self.length || anIndex < 0)
        _CPRaiseRangeException(self, _cmd, anIndex, self.length);
    return self[anIndex];
}

), new objj_method(sel_getUid("objectsAtIndexes:"), function $CPArray__objectsAtIndexes_(self, _cmd, indexes)
{
    if (objj_msgSend(indexes, "lastIndex") >= self.length)
        objj_msgSend(CPException, "raise:reason:", CPRangeException, _cmd + " indexes out of bounds");
    var ranges = indexes._ranges,
        count = ranges.length,
        result = [],
        i = 0;
    for (; i < count; i++)
    {
        var range = ranges[i],
            loc = range.location,
            len = range.length,
            subArray = self.slice(loc, loc + len);
        result.splice.apply(result, [result.length, 0].concat(subArray));
    }
    return result;
}

), new objj_method(sel_getUid("containsObject:"), function $CPArray__containsObject_(self, _cmd, anObject)
{
    return objj_msgSend(self, "indexOfObject:inRange:", anObject, nil) != CPNotFound;
}

), new objj_method(sel_getUid("indexOfObject:inRange:"), function $CPArray__indexOfObject_inRange_(self, _cmd, anObject, aRange)
{
    if (anObject && anObject.isa)
    {
        var index = aRange ? aRange.location : 0,
            count = aRange ? CPMaxRange(aRange) : self.length;
        for (; index < count; ++index)
            if (objj_msgSend(self[index], "isEqual:", anObject))
                return index;
        return CPNotFound;
    }
    return objj_msgSend(self, "indexOfObjectIdenticalTo:inRange:", anObject, aRange);
}

), new objj_method(sel_getUid("indexOfObjectIdenticalTo:"), function $CPArray__indexOfObjectIdenticalTo_(self, _cmd, anObject)
{
    return objj_msgSend(self, "indexOfObjectIdenticalTo:inRange:", anObject, nil);
}

), new objj_method(sel_getUid("indexOfObjectIdenticalTo:inRange:"), function $CPArray__indexOfObjectIdenticalTo_inRange_(self, _cmd, anObject, aRange)
{
    if (indexOf && !aRange)
        return indexOf.call(self, anObject);
    var index = aRange ? aRange.location : 0,
        count = aRange ? CPMaxRange(aRange) : self.length;
    for (; index < count; ++index)
        if (self[index] === anObject)
            return index;
    return CPNotFound;
}

), new objj_method(sel_getUid("makeObjectsPerformSelector:withObjects:"), function $CPArray__makeObjectsPerformSelector_withObjects_(self, _cmd, aSelector, objects)
{
    if (!aSelector)
        _CPRaiseInvalidArgumentException(self, _cmd, 'attempt to pass a nil selector');
    var index = 0,
        count = self.length;
    if (objj_msgSend(objects, "count"))
    {
        var argumentsArray = objj_msgSend([nil, aSelector], "arrayByAddingObjectsFromArray:", objects);
        for (; index < count; ++index)
        {
            argumentsArray[0] = self[index];
            objj_msgSend.apply(this, argumentsArray);
        }
    }
    else
        for (; index < count; ++index)
            objj_msgSend(self[index], aSelector);
}

), new objj_method(sel_getUid("arrayByAddingObject:"), function $CPArray__arrayByAddingObject_(self, _cmd, anObject)
{
    if (anObject && anObject.isa && objj_msgSend(anObject, "isKindOfClass:", objj_msgSend(CPArray, "class")))
        return self.concat.call(self, [anObject]);
    return self.concat.call(self, anObject);
}

), new objj_method(sel_getUid("arrayByAddingObjectsFromArray:"), function $CPArray__arrayByAddingObjectsFromArray_(self, _cmd, anArray)
{
    if (!anArray)
        return objj_msgSend(self, "copy");
    return self.concat.call(self, objj_msgSend(anArray, "isKindOfClass:", objj_msgSend(CPArray, "class")) ? anArray : objj_msgSend(anArray, "_javaScriptArrayCopy"));
}

), new objj_method(sel_getUid("subarrayWithRange:"), function $CPArray__subarrayWithRange_(self, _cmd, aRange)
{
    if (aRange.location < 0 || CPMaxRange(aRange) > self.length)
        objj_msgSend(CPException, "raise:reason:", CPRangeException, _cmd + " aRange out of bounds");
    return self.slice.call(self, aRange.location, CPMaxRange(aRange));
}

), new objj_method(sel_getUid("componentsJoinedByString:"), function $CPArray__componentsJoinedByString_(self, _cmd, aString)
{
    return join.call(self, aString);
}

), new objj_method(sel_getUid("insertObject:atIndex:"), function $CPArray__insertObject_atIndex_(self, _cmd, anObject, anIndex)
{
    if (anIndex > self.length || anIndex < 0)
        _CPRaiseRangeException(self, _cmd, anIndex, self.length);
    self.splice.call(self, anIndex, 0, anObject);
}

), new objj_method(sel_getUid("removeObjectAtIndex:"), function $CPArray__removeObjectAtIndex_(self, _cmd, anIndex)
{
    if (anIndex >= self.length || anIndex < 0)
        _CPRaiseRangeException(self, _cmd, anIndex, self.length);
    self.splice.call(self, anIndex, 1);
}

), new objj_method(sel_getUid("removeObjectIdenticalTo:"), function $CPArray__removeObjectIdenticalTo_(self, _cmd, anObject)
{
    if (indexOf)
    {
        var anIndex;
        while ((anIndex = indexOf.call(self, anObject)) !== -1)
            self.splice.call(self, anIndex, 1);
    }
    else
        objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPArray").super_class }, "removeObjectIdenticalTo:inRange:", anObject, CPMakeRange(0, self.length));
}

), new objj_method(sel_getUid("removeObjectIdenticalTo:inRange:"), function $CPArray__removeObjectIdenticalTo_inRange_(self, _cmd, anObject, aRange)
{
    if (indexOf && !aRange)
        objj_msgSend(self, "removeObjectIdenticalTo:", anObject);
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPArray").super_class }, "removeObjectIdenticalTo:inRange:", anObject, aRange);
}

), new objj_method(sel_getUid("addObject:"), function $CPArray__addObject_(self, _cmd, anObject)
{
    self.push.call(self, anObject);
}

), new objj_method(sel_getUid("removeAllObjects"), function $CPArray__removeAllObjects(self, _cmd)
{
    self.splice.call(self, 0, self.length);
}

), new objj_method(sel_getUid("removeLastObject"), function $CPArray__removeLastObject(self, _cmd)
{
    self.pop.call(self);
}

), new objj_method(sel_getUid("removeObjectsInRange:"), function $CPArray__removeObjectsInRange_(self, _cmd, aRange)
{
    if (aRange.location < 0 || CPMaxRange(aRange) > self.length)
        objj_msgSend(CPException, "raise:reason:", CPRangeException, _cmd + " aRange out of bounds");
    self.splice.call(self, aRange.location, aRange.length);
}

), new objj_method(sel_getUid("firstObject"), function $CPArray__firstObject(self, _cmd)
{
    var count = objj_msgSend(self, "count");
    if (count > 0)
        return objj_msgSend(self, "objectAtIndex:", 0);
    return nil;
}

), new objj_method(sel_getUid("lastObject"), function $CPArray__lastObject(self, _cmd)
{
    var count = objj_msgSend(self, "count");
    if (count <= 0)
        return nil;
    return objj_msgSend(self, "objectAtIndex:", count - 1);
}

), new objj_method(sel_getUid("replaceObjectAtIndex:withObject:"), function $CPArray__replaceObjectAtIndex_withObject_(self, _cmd, anIndex, anObject)
{
    if (anIndex >= self.length || anIndex < 0)
        _CPRaiseRangeException(self, _cmd, anIndex, self.length);
    self[anIndex] = anObject;
}

), new objj_method(sel_getUid("replaceObjectsInRange:withObjectsFromArray:range:"), function $CPArray__replaceObjectsInRange_withObjectsFromArray_range_(self, _cmd, aRange, anArray, otherRange)
{
    if (aRange.location < 0 || CPMaxRange(aRange) > self.length)
        objj_msgSend(CPException, "raise:reason:", CPRangeException, _cmd + " aRange out of bounds");
    if (otherRange && (otherRange.location < 0 || CPMaxRange(otherRange) > anArray.length))
        objj_msgSend(CPException, "raise:reason:", CPRangeException, _cmd + " otherRange out of bounds");
    if (otherRange && (otherRange.location !== 0 || otherRange.length !== objj_msgSend(anArray, "count")))
        anArray = objj_msgSend(anArray, "subarrayWithRange:", otherRange);
    if (anArray.isa !== objj_msgSend(CPArray, "class"))
        anArray = objj_msgSend(anArray, "_javaScriptArrayCopy");
    self.splice.apply(self, [aRange.location, aRange.length].concat(anArray));
}

), new objj_method(sel_getUid("setArray:"), function $CPArray__setArray_(self, _cmd, anArray)
{
    if (objj_msgSend(anArray, "isKindOfClass:", objj_msgSend(CPArray, "class")))
        self.splice.apply(self, [0, self.length].concat(anArray));
    else
        objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPArray").super_class }, "setArray:", anArray);
}

), new objj_method(sel_getUid("addObjectsFromArray:"), function $CPArray__addObjectsFromArray_(self, _cmd, anArray)
{
    if (objj_msgSend(anArray, "isKindOfClass:", objj_msgSend(CPArray, "class")))
        self.splice.apply(self, [self.length, 0].concat(anArray));
    else
        objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPArray").super_class }, "addObjectsFromArray:", anArray);
}

), new objj_method(sel_getUid("objectsAtIndexes:"), function $CPArray__objectsAtIndexes_(self, _cmd, indexes)
{
    var index = CPNotFound,
        objects = [];
    while ((index = objj_msgSend(indexes, "indexGreaterThanIndex:", index)) !== CPNotFound)
        objects.push(objj_msgSend(self, "objectAtIndex:", index));
    return objects;
}

), new objj_method(sel_getUid("objectEnumerator"), function $CPArray__objectEnumerator(self, _cmd)
{
    return objj_msgSend(objj_msgSend(_CPArrayEnumerator, "alloc"), "initWithArray:", self);
}

), new objj_method(sel_getUid("reverseObjectEnumerator"), function $CPArray__reverseObjectEnumerator(self, _cmd)
{
    return objj_msgSend(objj_msgSend(_CPReverseArrayEnumerator, "alloc"), "initWithArray:", self);
}

), new objj_method(sel_getUid("copy"), function $CPArray__copy(self, _cmd)
{
    return self.slice.call(self, 0);
}

), new objj_method(sel_getUid("classForCoder"), function $CPArray__classForCoder(self, _cmd)
{
    return CPArray;
}

), new objj_method(sel_getUid("makeObjectsPerformSelector:withObjects:"), function $CPArray__makeObjectsPerformSelector_withObjects_(self, _cmd, aSelector, objects)
{
    if (!aSelector)
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "makeObjectsPerformSelector:withObjects: 'aSelector' can't be nil");
    var index = 0,
        count = objj_msgSend(self, "count");
    if (objj_msgSend(objects, "count"))
    {
        var argumentsArray = objj_msgSend([nil, aSelector], "arrayByAddingObjectsFromArray:", objects);
        for (; index < count; ++index)
        {
            argumentsArray[0] = objj_msgSend(self, "objectAtIndex:", index);
            objj_msgSend.apply(this, argumentsArray);
        }
    }
    else
        for (; index < count; ++index)
            objj_msgSend(objj_msgSend(self, "objectAtIndex:", index), aSelector);
}

), new objj_method(sel_getUid("enumerateObjectsUsingBlock:"), function $CPArray__enumerateObjectsUsingBlock_(self, _cmd, aFunction)
{
    var index = 0,
        count = objj_msgSend(self, "count");
    for (; index < count; ++index)
    {
        var shouldStop = aFunction(objj_msgSend(self, "objectAtIndex:", index), index);
        if (shouldStop)
            return;
    }
}

), new objj_method(sel_getUid("firstObjectCommonWithArray:"), function $CPArray__firstObjectCommonWithArray_(self, _cmd, anArray)
{
    var count = objj_msgSend(self, "count");
    if (!objj_msgSend(anArray, "count") || !count)
        return nil;
    var index = 0;
    for (; index < count; ++index)
    {
        var object = objj_msgSend(self, "objectAtIndex:", index);
        if (objj_msgSend(anArray, "containsObject:", object))
            return object;
    }
    return nil;
}

), new objj_method(sel_getUid("isEqualToArray:"), function $CPArray__isEqualToArray_(self, _cmd, anArray)
{
    if (self === anArray)
        return YES;
    if (!objj_msgSend(anArray, "isKindOfClass:", CPArray))
        return NO;
    var count = objj_msgSend(self, "count"),
        otherCount = objj_msgSend(anArray, "count");
    if (anArray === nil || count !== otherCount)
        return NO;
    var index = 0;
    for (; index < count; ++index)
    {
        var lhs = objj_msgSend(self, "objectAtIndex:", index),
            rhs = objj_msgSend(anArray, "objectAtIndex:", index);
        if (lhs !== rhs && (lhs && !lhs.isa || rhs && !rhs.isa || !objj_msgSend(lhs, "isEqual:", rhs)))
            return NO;
    }
    return YES;
}

), new objj_method(sel_getUid("isEqual:"), function $CPArray__isEqual_(self, _cmd, anObject)
{
    return self === anObject || objj_msgSend(self, "isEqualToArray:", anObject);
}

), new objj_method(sel_getUid("_javaScriptArrayCopy"), function $CPArray___javaScriptArrayCopy(self, _cmd)
{
    var index = 0,
        count = objj_msgSend(self, "count"),
        copy = [];
    for (; index < count; ++index)
        push.call(copy, objj_msgSend(self, "objectAtIndex:", index));
    return copy;
}

), new objj_method(sel_getUid("arrayByAddingObject:"), function $CPArray__arrayByAddingObject_(self, _cmd, anObject)
{
    var argumentArray = objj_msgSend(self, "_javaScriptArrayCopy");
    self.push.call(argumentArray, anObject);
    return objj_msgSend(objj_msgSend(self, "class"), sel_getUid("arrayWithArray:"), argumentArray);
}

), new objj_method(sel_getUid("arrayByAddingObjectsFromArray:"), function $CPArray__arrayByAddingObjectsFromArray_(self, _cmd, anArray)
{
    if (!anArray)
        return objj_msgSend(self, "copy");
    var anArray = anArray.isa === objj_msgSend(CPArray, "class") ? anArray : objj_msgSend(anArray, "_javaScriptArrayCopy"),
        argumentArray = concat.call(objj_msgSend(self, "_javaScriptArrayCopy"), anArray);
    return objj_msgSend(objj_msgSend(self, "class"), sel_getUid("arrayWithArray:"), argumentArray);
}

), new objj_method(sel_getUid("addObjectsFromArray:"), function $CPArray__addObjectsFromArray_(self, _cmd, anArray)
{
    var index = 0,
        count = objj_msgSend(anArray, "count");
    for (; index < count; ++index)
        objj_msgSend(self, "addObject:", objj_msgSend(anArray, "objectAtIndex:", index));
}

), new objj_method(sel_getUid("indexOfObject:"), function $CPArray__indexOfObject_(self, _cmd, anObject)
{
    return objj_msgSend(self, "indexOfObject:inRange:", anObject, nil);
}

), new objj_method(sel_getUid("indexOfObject:inSortedRange:options:usingComparator:"), function $CPArray__indexOfObject_inSortedRange_options_usingComparator_(self, _cmd, anObject, aRange, options, aComparator)
{
    if (!aComparator)
        _CPRaiseInvalidArgumentException(self, _cmd, "comparator is nil");
    if (options & CPBinarySearchingFirstEqual && options & CPBinarySearchingLastEqual)
        _CPRaiseInvalidArgumentException(self, _cmd, "both CPBinarySearchingFirstEqual and CPBinarySearchingLastEqual options cannot be specified");
    var count = objj_msgSend(self, "count");
    if (count <= 0)
        return options & CPBinarySearchingInsertionIndex ? 0 : CPNotFound;
    var first = aRange ? aRange.location : 0,
        last = (aRange ? CPMaxRange(aRange) : objj_msgSend(self, "count")) - 1;
    if (first < 0)
        _CPRaiseRangeException(self, _cmd, first, count);
    if (last >= count)
        _CPRaiseRangeException(self, _cmd, last, count);
    while (first <= last)
    {
        var middle = FLOOR((first + last) / 2),
            result = aComparator(anObject, objj_msgSend(self, "objectAtIndex:", middle));
        if (result > 0)
            first = middle + 1;
        else if (result < 0)
            last = middle - 1;
        else
        {
            if (options & CPBinarySearchingFirstEqual)
                while (middle > first && aComparator(anObject, objj_msgSend(self, "objectAtIndex:", middle - 1)) === CPOrderedSame)
                    --middle;
            else if (options & CPBinarySearchingLastEqual)
            {
                while (middle < last && aComparator(anObject, objj_msgSend(self, "objectAtIndex:", middle + 1)) === CPOrderedSame)
                    ++middle;
                if (options & CPBinarySearchingInsertionIndex)
                    ++middle;
            }
            return middle;
        }
    }
    if (options & CPBinarySearchingInsertionIndex)
        return MAX(first, 0);
    return CPNotFound;
}

), new objj_method(sel_getUid("insertObjects:atIndexes:"), function $CPArray__insertObjects_atIndexes_(self, _cmd, objects, indexes)
{
    var indexesCount = objj_msgSend(indexes, "count"),
        objectsCount = objj_msgSend(objects, "count");
    if (indexesCount !== objectsCount)
        objj_msgSend(CPException, "raise:reason:", CPRangeException, "the counts of the passed-in array (" + objectsCount + ") and index set (" + indexesCount + ") must be identical.");
    var lastIndex = objj_msgSend(indexes, "lastIndex");
    if (lastIndex >= objj_msgSend(self, "count") + indexesCount)
        objj_msgSend(CPException, "raise:reason:", CPRangeException, "the last index (" + lastIndex + ") must be less than the sum of the original count (" + objj_msgSend(self, "count") + ") and the insertion count (" + indexesCount + ").");
    var index = 0,
        currentIndex = objj_msgSend(indexes, "firstIndex");
    for (; index < objectsCount; (++index, currentIndex = objj_msgSend(indexes, "indexGreaterThanIndex:", currentIndex)))
        objj_msgSend(self, "insertObject:atIndex:", objj_msgSend(objects, "objectAtIndex:", index), currentIndex);
}

), new objj_method(sel_getUid("insertObject:inArraySortedByDescriptors:"), function $CPArray__insertObject_inArraySortedByDescriptors_(self, _cmd, anObject, descriptors)
{
    var index,
        count = objj_msgSend(descriptors, "count");
    if (count)
        index = objj_msgSend(self, "indexOfObject:inSortedRange:options:usingComparator:", anObject, nil, CPBinarySearchingInsertionIndex,         function(lhs, rhs)
        {
            var index = 0,
                result = CPOrderedSame;
            while (index < count && (result = objj_msgSend(objj_msgSend(descriptors, "objectAtIndex:", index), "compareObject:withObject:", lhs, rhs)) === CPOrderedSame)
                ++index;
            return result;
        });
    else
        index = objj_msgSend(self, "count");
    objj_msgSend(self, "insertObject:atIndex:", anObject, index);
    return index;
}

), new objj_method(sel_getUid("replaceObjectsAtIndexes:withObjects:"), function $CPArray__replaceObjectsAtIndexes_withObjects_(self, _cmd, indexes, objects)
{
    var i = 0,
        index = objj_msgSend(indexes, "firstIndex");
    while (index !== CPNotFound)
    {
        objj_msgSend(self, "replaceObjectAtIndex:withObject:", index, objj_msgSend(objects, "objectAtIndex:", i++));
        index = objj_msgSend(indexes, "indexGreaterThanIndex:", index);
    }
}

), new objj_method(sel_getUid("replaceObjectsInRange:withObjectsFromArray:range:"), function $CPArray__replaceObjectsInRange_withObjectsFromArray_range_(self, _cmd, aRange, anArray, otherRange)
{
    objj_msgSend(self, "removeObjectsInRange:", aRange);
    if (otherRange && (otherRange.location !== 0 || otherRange.length !== objj_msgSend(anArray, "count")))
        anArray = objj_msgSend(anArray, "subarrayWithRange:", otherRange);
    var indexes = objj_msgSend(CPIndexSet, "indexSetWithIndexesInRange:", CPMakeRange(aRange.location, objj_msgSend(anArray, "count")));
    objj_msgSend(self, "insertObjects:atIndexes:", anArray, indexes);
}

), new objj_method(sel_getUid("replaceObjectsInRange:withObjectsFromArray:"), function $CPArray__replaceObjectsInRange_withObjectsFromArray_(self, _cmd, aRange, anArray)
{
    objj_msgSend(self, "replaceObjectsInRange:withObjectsFromArray:range:", aRange, anArray, nil);
}

), new objj_method(sel_getUid("setArray:"), function $CPArray__setArray_(self, _cmd, anArray)
{
    if (self === anArray)
        return;
    objj_msgSend(self, "removeAllObjects");
    objj_msgSend(self, "addObjectsFromArray:", anArray);
}

), new objj_method(sel_getUid("removeObject:"), function $CPArray__removeObject_(self, _cmd, anObject)
{
    objj_msgSend(self, "removeObject:inRange:", anObject, CPMakeRange(0, objj_msgSend(self, "count")));
}

), new objj_method(sel_getUid("removeObject:inRange:"), function $CPArray__removeObject_inRange_(self, _cmd, anObject, aRange)
{
    var index;
    while ((index = objj_msgSend(self, "indexOfObject:inRange:", anObject, aRange)) != CPNotFound)
    {
        objj_msgSend(self, "removeObjectAtIndex:", index);
        aRange = CPIntersectionRange(CPMakeRange(index, objj_msgSend(self, "count") - index), aRange);
    }
}

), new objj_method(sel_getUid("removeObjectsAtIndexes:"), function $CPArray__removeObjectsAtIndexes_(self, _cmd, anIndexSet)
{
    var index = objj_msgSend(anIndexSet, "lastIndex");
    while (index !== CPNotFound)
    {
        objj_msgSend(self, "removeObjectAtIndex:", index);
        index = objj_msgSend(anIndexSet, "indexLessThanIndex:", index);
    }
}

), new objj_method(sel_getUid("removeObjectIdenticalTo:"), function $CPArray__removeObjectIdenticalTo_(self, _cmd, anObject)
{
    objj_msgSend(self, "removeObjectIdenticalTo:inRange:", anObject, CPMakeRange(0, objj_msgSend(self, "count")));
}

), new objj_method(sel_getUid("removeObjectIdenticalTo:inRange:"), function $CPArray__removeObjectIdenticalTo_inRange_(self, _cmd, anObject, aRange)
{
    var index,
        count = objj_msgSend(self, "count");
    while ((index = objj_msgSend(self, "indexOfObjectIdenticalTo:inRange:", anObject, aRange)) !== CPNotFound)
    {
        objj_msgSend(self, "removeObjectAtIndex:", index);
        aRange = CPIntersectionRange(CPMakeRange(index, --count - index), aRange);
    }
}

), new objj_method(sel_getUid("removeObjectsInArray:"), function $CPArray__removeObjectsInArray_(self, _cmd, anArray)
{
    var index = 0,
        count = objj_msgSend(anArray, "count");
    for (; index < count; ++index)
        objj_msgSend(self, "removeObject:", objj_msgSend(anArray, "objectAtIndex:", index));
}

), new objj_method(sel_getUid("removeObjectsInRange:"), function $CPArray__removeObjectsInRange_(self, _cmd, aRange)
{
    var index = aRange.location,
        count = CPMaxRange(aRange);
    while (count-- > index)
        objj_msgSend(self, "removeObjectAtIndex:", index);
}

), new objj_method(sel_getUid("exchangeObjectAtIndex:withObjectAtIndex:"), function $CPArray__exchangeObjectAtIndex_withObjectAtIndex_(self, _cmd, anIndex, otherIndex)
{
    if (anIndex === otherIndex)
        return;
    var temporary = objj_msgSend(self, "objectAtIndex:", anIndex);
    objj_msgSend(self, "replaceObjectAtIndex:withObject:", anIndex, objj_msgSend(self, "objectAtIndex:", otherIndex));
    objj_msgSend(self, "replaceObjectAtIndex:withObject:", otherIndex, temporary);
}

), new objj_method(sel_getUid("sortUsingDescriptors:"), function $CPArray__sortUsingDescriptors_(self, _cmd, descriptors)
{
    var i = objj_msgSend(descriptors, "count"),
        jsDescriptors = [];
    while (i--)
    {
        var d = objj_msgSend(descriptors, "objectAtIndex:", i);
        objj_msgSend(jsDescriptors, "addObject:", {"k": objj_msgSend(d, "key"), "a": objj_msgSend(d, "ascending"), "s": objj_msgSend(d, "selector")});
    }
    sortArrayUsingJSDescriptors(self, jsDescriptors);
}

), new objj_method(sel_getUid("sortUsingFunction:context:"), function $CPArray__sortUsingFunction_context_(self, _cmd, aFunction, aContext)
{
    sortArrayUsingFunction(self, aFunction, aContext);
}

), new objj_method(sel_getUid("sortUsingSelector:"), function $CPArray__sortUsingSelector_(self, _cmd, aSelector)
{
    sortArrayUsingFunction(self, selectorCompare, aSelector);
}

), new objj_method(sel_getUid("sortedArrayUsingDescriptors:"), function $CPArray__sortedArrayUsingDescriptors_(self, _cmd, descriptors)
{
    var sorted = objj_msgSend(self, "copy");
    objj_msgSend(sorted, "sortUsingDescriptors:", descriptors);
    return sorted;
}

), new objj_method(sel_getUid("sortedArrayUsingFunction:"), function $CPArray__sortedArrayUsingFunction_(self, _cmd, aFunction)
{
    return objj_msgSend(self, "sortedArrayUsingFunction:context:", aFunction, nil);
}

), new objj_method(sel_getUid("sortedArrayUsingFunction:context:"), function $CPArray__sortedArrayUsingFunction_context_(self, _cmd, aFunction, aContext)
{
    var sorted = objj_msgSend(self, "copy");
    objj_msgSend(sorted, "sortUsingFunction:context:", aFunction, aContext);
    return sorted;
}

), new objj_method(sel_getUid("sortedArrayUsingSelector:"), function $CPArray__sortedArrayUsingSelector_(self, _cmd, aSelector)
{
    var sorted = objj_msgSend(self, "copy");
    objj_msgSend(sorted, "sortUsingSelector:", aSelector);
    return sorted;
}

), new objj_method(sel_getUid("subarrayWithRange:"), function $CPArray__subarrayWithRange_(self, _cmd, aRange)
{
    if (!aRange)
        return objj_msgSend(self, "copy");
    if (aRange.location < 0 || CPMaxRange(aRange) > self.length)
        objj_msgSend(CPException, "raise:reason:", CPRangeException, "subarrayWithRange: aRange out of bounds");
    var index = aRange.location,
        count = CPMaxRange(aRange),
        argumentArray = [];
    for (; index < count; ++index)
        push.call(argumentArray, objj_msgSend(self, "objectAtIndex:", index));
    return objj_msgSend(objj_msgSend(self, "class"), sel_getUid("arrayWithArray:"), argumentArray);
}

), new objj_method(sel_getUid("componentsJoinedByString:"), function $CPArray__componentsJoinedByString_(self, _cmd, aString)
{
    return self.join.call(objj_msgSend(self, "_javaScriptArrayCopy"), aString);
}

), new objj_method(sel_getUid("description"), function $CPArray__description(self, _cmd)
{
    return self;
}

), new objj_method(sel_getUid("UID"), function $CPArray__UID(self, _cmd)
{
    if (!self._UID)
        self._UID = objj_generateObjectUID();
    return self._UID;
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPArray__alloc(self, _cmd)
{
    return [];
}

), new objj_method(sel_getUid("array"), function $CPArray__array(self, _cmd)
{
    return [];
}

), new objj_method(sel_getUid("arrayWithArray:"), function $CPArray__arrayWithArray_(self, _cmd, anArray)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithArray:", anArray);
}

), new objj_method(sel_getUid("arrayWithObject:"), function $CPArray__arrayWithObject_(self, _cmd, anObject)
{
    return [anObject];
}

), new objj_method(sel_getUid("arrayWithObjects:"), function $CPArray__arrayWithObjects_(self, _cmd, anObject)
{
    var index = 2,
        count = arguments.length;
    for (; index < count; ++index)
        if (arguments[index] === nil)
            break;
    return self.slice.call(arguments, 2, index);
}

)]);
}{
var the_class = objj_getClass("CPArray")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPArray\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPArray__initWithCoder_(self, _cmd, aCoder)
{
    return objj_msgSend(aCoder, "decodeObjectForKey:", "CP.objects");
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPArray__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPArray").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "_encodeArrayOfObjects:forKey:", self, "CP.objects");
}

)]);
}{var the_class = objj_allocateClassPair(CPEnumerator, "_CPArrayEnumerator"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_array"), new objj_ivar("_index")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithArray:"), function $_CPArrayEnumerator__initWithArray_(self, _cmd, anArray)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPArrayEnumerator").super_class }, "init");
    if (self)
    {
        self._array = anArray;
        self._index = -1;
    }
    return self;
}

), new objj_method(sel_getUid("nextObject"), function $_CPArrayEnumerator__nextObject(self, _cmd)
{
    if (++self._index >= objj_msgSend(self._array, "count"))
        return nil;
    return objj_msgSend(self._array, "objectAtIndex:", self._index);
}

)]);
}{var the_class = objj_allocateClassPair(CPEnumerator, "_CPReverseArrayEnumerator"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_array"), new objj_ivar("_index")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithArray:"), function $_CPReverseArrayEnumerator__initWithArray_(self, _cmd, anArray)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPReverseArrayEnumerator").super_class }, "init");
    if (self)
    {
        self._array = anArray;
        self._index = objj_msgSend(self._array, "count");
    }
    return self;
}

), new objj_method(sel_getUid("nextObject"), function $_CPReverseArrayEnumerator__nextObject(self, _cmd)
{
    if (--self._index < 0)
        return nil;
    return objj_msgSend(self._array, "objectAtIndex:", self._index);
}

)]);
}var selectorCompare = function(object1, object2, selector)
{
    return objj_msgSend(object1, "performSelector:withObject:", selector, object2);
};
var sortArrayUsingFunction = function(array, aFunction, aContext)
{
    var h,
        i,
        j,
        k,
        l,
        m,
        n = array.length,
        o;
    var A,
        B = [];
    for (h = 1; h < n; h += h)
    {
        for (m = n - 1 - h; m >= 0; m -= h + h)
        {
            l = m - h + 1;
            if (l < 0)
                l = 0;
            for ((i = 0, j = l); j <= m; (i++, j++))
                B[i] = array[j];
            for ((i = 0, k = l); k < j && j <= m + h; k++)
            {
                A = array[j];
                o = aFunction(A, B[i], aContext);
                if (o >= 0)
                    array[k] = B[i++];
                else
                {
                    array[k] = A;
                    j++;
                }            }            while (k < j)
                array[k++] = B[i++];
        }    }};
var CPMutableArrayNull = objj_msgSend(CPNull, "null");
var sortArrayUsingJSDescriptors = function(a, d)
{
    var h,
        i,
        j,
        k,
        l,
        m,
        n = a.length,
        dl = d.length - 1,
        o,
        c = {};
    var A,
        B = [],
        C1,
        C2,
        cn,
        aUID,
        bUID,
        key,
        dd,
        value1,
        value2,
        cpNull = CPMutableArrayNull;
    if (dl < 0)
        return;
    for (h = 1; h < n; h += h)
    {
        for (m = n - 1 - h; m >= 0; m -= h + h)
        {
            l = m - h + 1;
            if (l < 0)
                l = 0;
            for ((i = 0, j = l); j <= m; (i++, j++))
                B[i] = a[j];
            for ((i = 0, k = l); k < j && j <= m + h; k++)
            {
                A = a[j];
                aUID = A._UID;
                if (!aUID)
                    aUID = objj_msgSend(A, "UID");
                C1 = c[aUID];
                if (!C1)
                {
                    C1 = {};
                    cn = dl;
                    do
                    {
                        key = d[cn].k;
                        C1[key] = objj_msgSend(A, "valueForKeyPath:", key);
                    }                    while (cn--);
                                        c[aUID] = C1;
                }                bUID = B[i]._UID;
                if (!bUID)
                    bUID = objj_msgSend(B[i], "UID");
                C2 = c[bUID];
                if (!C2)
                {
                    C2 = {};
                    cn = dl;
                    do
                    {
                        key = d[cn].k;
                        C2[key] = objj_msgSend(B[i], "valueForKeyPath:", key);
                    }                    while (cn--);
                                        c[bUID] = C2;
                }                cn = dl;
                do
                {
                    dd = d[cn];
                    key = dd.k;
                    value1 = C1[key];
                    value2 = C2[key];
                    if (value1 === nil || value1 === cpNull)
                        o = value2 === nil || value2 === cpNull ? CPOrderedSame : CPOrderedAscending;
                    else
                        o = value2 === nil || value2 === cpNull ? CPOrderedDescending : objj_msgSend(value1, dd.s, value2);
                    if (o && !dd.a)
                        o = -o;
                }                while (cn-- && o == CPOrderedSame);
                                if (o >= 0)
                    a[k] = B[i++];
                else
                {
                    a[k] = A;
                    j++;
                }            }            while (k < j)
                a[k++] = B[i++];
        }    }};
Array.prototype.isa = CPArray;
var CPDictionaryShowNilDeprecationMessage = YES,
    CPDictionaryMaxDescriptionRecursion = 10;
{var the_class = objj_allocateClassPair(CPEnumerator, "_CPDictionaryValueEnumerator"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_keyEnumerator"), new objj_ivar("_dictionary")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithDictionary:"), function $_CPDictionaryValueEnumerator__initWithDictionary_(self, _cmd, aDictionary)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPDictionaryValueEnumerator").super_class }, "init");
    if (self)
    {
        self._keyEnumerator = objj_msgSend(aDictionary, "keyEnumerator");
        self._dictionary = aDictionary;
    }
    return self;
}

), new objj_method(sel_getUid("nextObject"), function $_CPDictionaryValueEnumerator__nextObject(self, _cmd)
{
    var key = objj_msgSend(self._keyEnumerator, "nextObject");
    if (key === nil)
        return nil;
    return objj_msgSend(self._dictionary, "objectForKey:", key);
}

)]);
}{var the_class = objj_allocateClassPair(CPObject, "CPDictionary"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithDictionary:"), function $CPDictionary__initWithDictionary_(self, _cmd, aDictionary)
{
    var key = "",
        dictionary = objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "init");
    for (key in aDictionary._buckets)
        objj_msgSend(dictionary, "setObject:forKey:", objj_msgSend(aDictionary, "objectForKey:", key), key);
    return dictionary;
}

), new objj_method(sel_getUid("initWithObjects:forKeys:"), function $CPDictionary__initWithObjects_forKeys_(self, _cmd, objects, keyArray)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPDictionary").super_class }, "init");
    if (objj_msgSend(objects, "count") != objj_msgSend(keyArray, "count"))
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, objj_msgSend(CPString, "stringWithFormat:", "Counts are different.(%d != %d)", objj_msgSend(objects, "count"), objj_msgSend(keyArray, "count")));
    if (self)
    {
        var i = objj_msgSend(keyArray, "count");
        while (i--)
        {
            var value = objects[i],
                key = keyArray[i];
            if (value === nil)
            {
                CPDictionaryShowNilDeprecationMessage = NO;
                CPLog.warn(objj_msgSend(CPString, "stringWithFormat:", "[%s %s] DEPRECATED: Attempt to insert nil object from objects[%d]", objj_msgSend(self, "className"), _cmd, i));
                if (typeof objj_backtrace_print === "function")
                    objj_backtrace_print(CPLog.warn);
            }
            if (key === nil)
            {
                CPDictionaryShowNilDeprecationMessage = NO;
                CPLog.warn(objj_msgSend(CPString, "stringWithFormat:", "[%s %s] DEPRECATED: Attempt to insert nil key from keys[%d]", objj_msgSend(self, "className"), _cmd, i));
                if (typeof objj_backtrace_print === "function")
                    objj_backtrace_print(CPLog.warn);
            }
            objj_msgSend(self, "setObject:forKey:", value, key);
        }
    }
    return self;
}

), new objj_method(sel_getUid("initWithObjectsAndKeys:"), function $CPDictionary__initWithObjectsAndKeys_(self, _cmd, firstObject)
{
    var argCount = arguments.length;
    if (argCount % 2 !== 0)
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "Key-value count is mismatched. (" + argCount + " arguments passed)");
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPDictionary").super_class }, "init");
    if (self)
    {
        var index = 2;
        for (; index < argCount; index += 2)
        {
            var value = arguments[index],
                key = arguments[index + 1];
            if (value === nil)
            {
                CPDictionaryShowNilDeprecationMessage = NO;
                CPLog.warn(objj_msgSend(CPString, "stringWithFormat:", "[%s %s] DEPRECATED: Attempt to insert nil object from objects[%d]", objj_msgSend(self, "className"), _cmd, index / 2 - 1));
                if (typeof objj_backtrace_print === "function")
                    objj_backtrace_print(CPLog.warn);
            }
            if (key === nil)
            {
                CPDictionaryShowNilDeprecationMessage = NO;
                CPLog.warn(objj_msgSend(CPString, "stringWithFormat:", "[%s %s] DEPRECATED: Attempt to insert nil key from keys[%d]", objj_msgSend(self, "className"), _cmd, index / 2 - 1));
                if (typeof objj_backtrace_print === "function")
                    objj_backtrace_print(CPLog.warn);
            }
            objj_msgSend(self, "setObject:forKey:", value, key);
        }
    }
    return self;
}

), new objj_method(sel_getUid("copy"), function $CPDictionary__copy(self, _cmd)
{
    return objj_msgSend(CPDictionary, "dictionaryWithDictionary:", self);
}

), new objj_method(sel_getUid("count"), function $CPDictionary__count(self, _cmd)
{
    return self._count;
}

), new objj_method(sel_getUid("allKeys"), function $CPDictionary__allKeys(self, _cmd)
{
    return objj_msgSend(self._keys, "copy");
}

), new objj_method(sel_getUid("allValues"), function $CPDictionary__allValues(self, _cmd)
{
    var keys = self._keys,
        index = keys.length,
        values = [];
    while (index--)
        values.push(self.valueForKey(keys[index]));
    return values;
}

), new objj_method(sel_getUid("allKeysForObject:"), function $CPDictionary__allKeysForObject_(self, _cmd, anObject)
{
    var keys = self._keys,
        count = keys.length,
        index = 0,
        matchingKeys = [],
        key = nil,
        value = nil;
    for (; index < count; ++index)
    {
        key = keys[index];
        value = self._buckets[key];
        if (value.isa && anObject && anObject.isa && objj_msgSend(value, "respondsToSelector:", sel_getUid("isEqual:")) && objj_msgSend(value, "isEqual:", anObject))
            matchingKeys.push(key);
        else if (value === anObject)
            matchingKeys.push(key);
    }
    return matchingKeys;
}

), new objj_method(sel_getUid("keysOfEntriesPassingTest:"), function $CPDictionary__keysOfEntriesPassingTest_(self, _cmd, predicate)
{
    return objj_msgSend(self, "keysOfEntriesWithOptions:passingTest:", CPEnumerationNormal, predicate);
}

), new objj_method(sel_getUid("keysOfEntriesWithOptions:passingTest:"), function $CPDictionary__keysOfEntriesWithOptions_passingTest_(self, _cmd, options, predicate)
{
    var keys = self._keys;
    if (options & CPEnumerationReverse)
    {
        var index = objj_msgSend(keys, "count") - 1,
            stop = -1,
            increment = -1;
    }
    else
    {
        var index = 0,
            stop = objj_msgSend(keys, "count"),
            increment = 1;
    }
    var matchingKeys = [],
        key = nil,
        value = nil,
        shouldStop = NO,
        stopRef = function(__input) { if (arguments.length) return shouldStop = __input; return shouldStop; };
    for (; index !== stop; index += increment)
    {
        key = keys[index];
        value = self._buckets[key];
        if (predicate(key, value, stopRef))
            matchingKeys.push(key);
        if (shouldStop)
            break;
    }
    return matchingKeys;
}

), new objj_method(sel_getUid("keysSortedByValueUsingComparator:"), function $CPDictionary__keysSortedByValueUsingComparator_(self, _cmd, comparator)
{
    return objj_msgSend(objj_msgSend(self, "allKeys"), "sortedArrayUsingFunction:",     function(a, b)
    {
        a = objj_msgSend(self, "objectForKey:", a);
        b = objj_msgSend(self, "objectForKey:", b);
        return comparator(a, b);
    });
}

), new objj_method(sel_getUid("keysSortedByValueUsingSelector:"), function $CPDictionary__keysSortedByValueUsingSelector_(self, _cmd, theSelector)
{
    return objj_msgSend(objj_msgSend(self, "allKeys"), "sortedArrayUsingFunction:",     function(a, b)
    {
        a = objj_msgSend(self, "objectForKey:", a);
        b = objj_msgSend(self, "objectForKey:", b);
        return objj_msgSend(a, "performSelector:withObject:", theSelector, b);
    });
}

), new objj_method(sel_getUid("keyEnumerator"), function $CPDictionary__keyEnumerator(self, _cmd)
{
    return objj_msgSend(self._keys, "objectEnumerator");
}

), new objj_method(sel_getUid("objectEnumerator"), function $CPDictionary__objectEnumerator(self, _cmd)
{
    return objj_msgSend(objj_msgSend(_CPDictionaryValueEnumerator, "alloc"), "initWithDictionary:", self);
}

), new objj_method(sel_getUid("isEqualToDictionary:"), function $CPDictionary__isEqualToDictionary_(self, _cmd, aDictionary)
{
    if (self === aDictionary)
        return YES;
    var count = objj_msgSend(self, "count");
    if (count !== objj_msgSend(aDictionary, "count"))
        return NO;
    var index = count,
        keys = self._keys;
    while (index--)
    {
        var currentKey = keys[index],
            lhsObject = self._buckets[currentKey],
            rhsObject = aDictionary._buckets[currentKey];
        if (lhsObject === rhsObject)
            continue;
        if (lhsObject && lhsObject.isa && rhsObject && rhsObject.isa && objj_msgSend(lhsObject, "respondsToSelector:", sel_getUid("isEqual:")) && objj_msgSend(lhsObject, "isEqual:", rhsObject))
            continue;
        return NO;
    }
    return YES;
}

), new objj_method(sel_getUid("isEqual:"), function $CPDictionary__isEqual_(self, _cmd, anObject)
{
    if (self === anObject)
        return YES;
    if (!objj_msgSend(anObject, "isKindOfClass:", objj_msgSend(CPDictionary, "class")))
        return NO;
    return objj_msgSend(self, "isEqualToDictionary:", anObject);
}

), new objj_method(sel_getUid("objectForKey:"), function $CPDictionary__objectForKey_(self, _cmd, aKey)
{
    var object = self._buckets[aKey];
    return object === undefined ? nil : object;
}

), new objj_method(sel_getUid("removeAllObjects"), function $CPDictionary__removeAllObjects(self, _cmd)
{
    self.removeAllValues();
}

), new objj_method(sel_getUid("removeObjectForKey:"), function $CPDictionary__removeObjectForKey_(self, _cmd, aKey)
{
    self.removeValueForKey(aKey);
}

), new objj_method(sel_getUid("removeObjectsForKeys:"), function $CPDictionary__removeObjectsForKeys_(self, _cmd, keysForRemoval)
{
    var index = keysForRemoval.length;
    while (index--)
        objj_msgSend(self, "removeObjectForKey:", keysForRemoval[index]);
}

), new objj_method(sel_getUid("setObject:forKey:"), function $CPDictionary__setObject_forKey_(self, _cmd, anObject, aKey)
{
    if (CPDictionaryShowNilDeprecationMessage)
    {
        if (aKey === nil)
        {
            CPLog.warn(objj_msgSend(CPString, "stringWithFormat:", "[%s %s] DEPRECATED: key cannot be nil", objj_msgSend(self, "className"), _cmd));
            if (typeof objj_backtrace_print === "function")
                objj_backtrace_print(CPLog.warn);
        }
        if (anObject === nil)
        {
            CPLog.warn(objj_msgSend(CPString, "stringWithFormat:", "[%s %s] DEPRECATED: object cannot be nil (key: %s)", objj_msgSend(self, "className"), _cmd, aKey));
            if (typeof objj_backtrace_print === "function")
                objj_backtrace_print(CPLog.warn);
        }
    }
    else
        CPDictionaryShowNilDeprecationMessage = YES;
    self.setValueForKey(aKey, anObject);
}

), new objj_method(sel_getUid("addEntriesFromDictionary:"), function $CPDictionary__addEntriesFromDictionary_(self, _cmd, aDictionary)
{
    if (!aDictionary)
        return;
    var keys = objj_msgSend(aDictionary, "allKeys"),
        index = objj_msgSend(keys, "count");
    while (index--)
    {
        var key = keys[index];
        objj_msgSend(self, "setObject:forKey:", objj_msgSend(aDictionary, "objectForKey:", key), key);
    }
}

), new objj_method(sel_getUid("description"), function $CPDictionary__description(self, _cmd)
{
    var string = "@{",
        keys = self._keys,
        index = 0,
        count = self._count;
    for (; index < count; ++index)
    {
        if (index === 0)
            string += "\n";
        var key = keys[index],
            value = self.valueForKey(key);
        string += "    @\"" + key + "\": " + ((CPDescriptionOfObject(value, CPDictionaryMaxDescriptionRecursion)).split("\n")).join("\n    ") + (index + 1 < count ? "," : "") + "\n";
    }
    return string + "}";
}

), new objj_method(sel_getUid("containsKey:"), function $CPDictionary__containsKey_(self, _cmd, aKey)
{
    var value = objj_msgSend(self, "objectForKey:", aKey);
    return value !== nil && value !== undefined;
}

), new objj_method(sel_getUid("enumerateKeysAndObjectsUsingBlock:"), function $CPDictionary__enumerateKeysAndObjectsUsingBlock_(self, _cmd, aFunction)
{
    var shouldStop = NO,
        shouldStopRef = function(__input) { if (arguments.length) return shouldStop = __input; return shouldStop; },
        keys = self._keys,
        count = self._count;
    for (var index = 0; index < count; index++)
    {
        var key = keys[index],
            value = self.valueForKey(key);
        aFunction(key, value, shouldStopRef);
        if (shouldStop)
            return;
    }
}

), new objj_method(sel_getUid("enumerateKeysAndObjectsWithOptions:usingBlock:"), function $CPDictionary__enumerateKeysAndObjectsWithOptions_usingBlock_(self, _cmd, opts, aFunction)
{
    objj_msgSend(self, "enumerateKeysAndObjectsUsingBlock:", aFunction);
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPDictionary__alloc(self, _cmd)
{
    var result = new CFMutableDictionary();
    result.isa = objj_msgSend(self, "class");
    return result;
}

), new objj_method(sel_getUid("dictionary"), function $CPDictionary__dictionary(self, _cmd)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "init");
}

), new objj_method(sel_getUid("dictionaryWithDictionary:"), function $CPDictionary__dictionaryWithDictionary_(self, _cmd, aDictionary)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithDictionary:", aDictionary);
}

), new objj_method(sel_getUid("dictionaryWithObject:forKey:"), function $CPDictionary__dictionaryWithObject_forKey_(self, _cmd, anObject, aKey)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithObjects:forKeys:", [anObject], [aKey]);
}

), new objj_method(sel_getUid("dictionaryWithObjects:forKeys:"), function $CPDictionary__dictionaryWithObjects_forKeys_(self, _cmd, objects, keys)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithObjects:forKeys:", objects, keys);
}

), new objj_method(sel_getUid("dictionaryWithJSObject:"), function $CPDictionary__dictionaryWithJSObject_(self, _cmd, object)
{
    return objj_msgSend(self, "dictionaryWithJSObject:recursively:", object, NO);
}

), new objj_method(sel_getUid("dictionaryWithJSObject:recursively:"), function $CPDictionary__dictionaryWithJSObject_recursively_(self, _cmd, object, recursively)
{
    var key = "",
        dictionary = objj_msgSend(objj_msgSend(self, "alloc"), "init");
    for (key in object)
    {
        if (!object.hasOwnProperty(key))
            continue;
        var value = object[key];
        if (value === null)
        {
            objj_msgSend(dictionary, "setObject:forKey:", objj_msgSend(CPNull, "null"), key);
            continue;
        }
        if (recursively)
        {
            if (value.constructor === Object)
                value = objj_msgSend(CPDictionary, "dictionaryWithJSObject:recursively:", value, YES);
            else if (objj_msgSend(value, "isKindOfClass:", CPArray))
            {
                var newValue = [],
                    i = 0,
                    count = value.length;
                for (; i < count; i++)
                {
                    var thisValue = value[i];
                    if (thisValue === null)
                    {
                        newValue.push(objj_msgSend(CPNull, "null"));
                    }
                    else
                    {
                        if (thisValue.constructor === Object)
                            newValue.push(objj_msgSend(CPDictionary, "dictionaryWithJSObject:recursively:", thisValue, YES));
                        else
                            newValue.push(thisValue);
                    }
                }
                value = newValue;
            }
        }
        objj_msgSend(dictionary, "setObject:forKey:", value, key);
    }
    return dictionary;
}

), new objj_method(sel_getUid("dictionaryWithObjectsAndKeys:"), function $CPDictionary__dictionaryWithObjectsAndKeys_(self, _cmd, firstObject)
{
    arguments[0] = objj_msgSend(self, "alloc");
    arguments[1] = sel_getUid("initWithObjectsAndKeys:");
    return objj_msgSend.apply(this, arguments);
}

)]);
}{
var the_class = objj_getClass("CPDictionary")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPDictionary\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPDictionary__initWithCoder_(self, _cmd, aCoder)
{
    return objj_msgSend(aCoder, "_decodeDictionaryOfObjectsForKey:", "CP.objects");
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPDictionary__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPDictionary").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "_encodeDictionaryOfObjects:forKey:", self, "CP.objects");
}

)]);
}{var the_class = objj_allocateClassPair(CPDictionary, "CPMutableDictionary"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
}CFDictionary.prototype.isa = CPDictionary;
CFMutableDictionary.prototype.isa = CPMutableDictionary;
{var the_class = objj_allocateClassPair(CPObject, "CPNotification"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_name"), new objj_ivar("_object"), new objj_ivar("_userInfo")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPNotification__init(self, _cmd)
{
    CPLog.warn("CPNotification's init method should not be used");
}

), new objj_method(sel_getUid("initWithName:object:userInfo:"), function $CPNotification__initWithName_object_userInfo_(self, _cmd, aNotificationName, anObject, aUserInfo)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPNotification").super_class }, "init");
    if (self)
    {
        self._name = aNotificationName;
        self._object = anObject;
        self._userInfo = aUserInfo;
    }
    return self;
}

), new objj_method(sel_getUid("name"), function $CPNotification__name(self, _cmd)
{
    return self._name;
}

), new objj_method(sel_getUid("object"), function $CPNotification__object(self, _cmd)
{
    return self._object;
}

), new objj_method(sel_getUid("userInfo"), function $CPNotification__userInfo(self, _cmd)
{
    return self._userInfo;
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("notificationWithName:object:userInfo:"), function $CPNotification__notificationWithName_object_userInfo_(self, _cmd, aNotificationName, anObject, aUserInfo)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithName:object:userInfo:", aNotificationName, anObject, aUserInfo);
}

), new objj_method(sel_getUid("notificationWithName:object:"), function $CPNotification__notificationWithName_object_(self, _cmd, aNotificationName, anObject)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithName:object:userInfo:", aNotificationName, anObject, nil);
}

)]);
}var hasOwnProperty = Object.prototype.hasOwnProperty;
{var the_class = objj_allocateClassPair(CPObject, "CPSet"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_contents"), new objj_ivar("_count")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("setByAddingObject:"), function $CPSet__setByAddingObject_(self, _cmd, anObject)
{
    return objj_msgSend(objj_msgSend(self, "class"), "setWithArray:", objj_msgSend(objj_msgSend(self, "allObjects"), "arrayByAddingObject:", anObject));
}

), new objj_method(sel_getUid("setByAddingObjectsFromSet:"), function $CPSet__setByAddingObjectsFromSet_(self, _cmd, aSet)
{
    return objj_msgSend(self, "setByAddingObjectsFromArray:", objj_msgSend(aSet, "allObjects"));
}

), new objj_method(sel_getUid("setByAddingObjectsFromArray:"), function $CPSet__setByAddingObjectsFromArray_(self, _cmd, anArray)
{
    return objj_msgSend(objj_msgSend(self, "class"), "setWithArray:", objj_msgSend(objj_msgSend(self, "allObjects"), "arrayByAddingObjectsFromArray:", anArray));
}

), new objj_method(sel_getUid("init"), function $CPSet__init(self, _cmd)
{
    return objj_msgSend(self, "initWithObjects:count:", nil, 0);
}

), new objj_method(sel_getUid("initWithArray:"), function $CPSet__initWithArray_(self, _cmd, anArray)
{
    return objj_msgSend(self, "initWithObjects:count:", anArray, objj_msgSend(anArray, "count"));
}

), new objj_method(sel_getUid("initWithObjects:"), function $CPSet__initWithObjects_(self, _cmd, anObject)
{
    var index = 2,
        count = arguments.length;
    for (; index < count; ++index)
        if (arguments[index] === nil)
            break;
    return objj_msgSend(self, "initWithObjects:count:", Array.prototype.slice.call(arguments, 2, index), index - 2);
}

), new objj_method(sel_getUid("initWithSet:"), function $CPSet__initWithSet_(self, _cmd, aSet)
{
    return objj_msgSend(self, "initWithArray:", objj_msgSend(aSet, "allObjects"));
}

), new objj_method(sel_getUid("initWithSet:copyItems:"), function $CPSet__initWithSet_copyItems_(self, _cmd, aSet, shouldCopyItems)
{
    if (shouldCopyItems)
        return objj_msgSend(aSet, "valueForKey:", "copy");
    return objj_msgSend(self, "initWithSet:", aSet);
}

), new objj_method(sel_getUid("initWithObjects:count:"), function $CPSet__initWithObjects_count_(self, _cmd, objects, aCount)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSet").super_class }, "init");
    if (self)
    {
        self._count = 0;
        self._contents = {};
        var index = 0,
            count = MIN(objj_msgSend(objects, "count"), aCount);
        for (; index < count; ++index)
            objj_msgSend(self, "addObject:", objects[index]);
    }
    return self;
}

), new objj_method(sel_getUid("count"), function $CPSet__count(self, _cmd)
{
    return self._count;
}

), new objj_method(sel_getUid("member:"), function $CPSet__member_(self, _cmd, anObject)
{
    var UID = objj_msgSend(anObject, "UID");
    if (hasOwnProperty.call(self._contents, UID))
        return self._contents[UID];
    else
    {
        for (var objectUID in self._contents)
        {
            if (!hasOwnProperty.call(self._contents, objectUID))
                continue;
            var object = self._contents[objectUID];
            if (object === anObject || objj_msgSend(object, "isEqual:", anObject))
                return object;
        }
    }
    return nil;
}

), new objj_method(sel_getUid("allObjects"), function $CPSet__allObjects(self, _cmd)
{
    var array = [],
        property;
    for (property in self._contents)
    {
        if (hasOwnProperty.call(self._contents, property))
            array.push(self._contents[property]);
    }
    return array;
}

), new objj_method(sel_getUid("objectEnumerator"), function $CPSet__objectEnumerator(self, _cmd)
{
    return objj_msgSend(objj_msgSend(self, "allObjects"), "objectEnumerator");
}

), new objj_method(sel_getUid("addObject:"), function $CPSet__addObject_(self, _cmd, anObject)
{
    if (anObject === nil || anObject === undefined)
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "attempt to insert nil or undefined");
    if (objj_msgSend(self, "containsObject:", anObject))
        return;
    self._contents[objj_msgSend(anObject, "UID")] = anObject;
    self._count++;
}

), new objj_method(sel_getUid("removeObject:"), function $CPSet__removeObject_(self, _cmd, anObject)
{
    if (anObject === nil || anObject === undefined)
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "attempt to remove nil or undefined");
    var object = objj_msgSend(self, "member:", anObject);
    if (object !== nil)
    {
        delete self._contents[objj_msgSend(object, "UID")];
        self._count--;
    }
}

), new objj_method(sel_getUid("removeAllObjects"), function $CPSet__removeAllObjects(self, _cmd)
{
    self._contents = {};
    self._count = 0;
}

), new objj_method(sel_getUid("removeObjectsInArray:"), function $CPSet__removeObjectsInArray_(self, _cmd, anArray)
{
    var index = 0,
        count = objj_msgSend(anArray, "count");
    for (; index < count; ++index)
        objj_msgSend(self, "removeObject:", objj_msgSend(anArray, "objectAtIndex:", index));
}

), new objj_method(sel_getUid("addObjectsFromArray:"), function $CPSet__addObjectsFromArray_(self, _cmd, objects)
{
    var count = objj_msgSend(objects, "count");
    while (count--)
        objj_msgSend(self, "addObject:", objects[count]);
}

), new objj_method(sel_getUid("classForCoder"), function $CPSet__classForCoder(self, _cmd)
{
    return objj_msgSend(CPSet, "class");
}

), new objj_method(sel_getUid("anyObject"), function $CPSet__anyObject(self, _cmd)
{
    return objj_msgSend(objj_msgSend(self, "objectEnumerator"), "nextObject");
}

), new objj_method(sel_getUid("containsObject:"), function $CPSet__containsObject_(self, _cmd, anObject)
{
    return objj_msgSend(self, "member:", anObject) !== nil;
}

), new objj_method(sel_getUid("makeObjectsPerformSelector:"), function $CPSet__makeObjectsPerformSelector_(self, _cmd, aSelector)
{
    objj_msgSend(self, "makeObjectsPerformSelector:withObjects:", aSelector, nil);
}

), new objj_method(sel_getUid("makeObjectsPerformSelector:withObject:"), function $CPSet__makeObjectsPerformSelector_withObject_(self, _cmd, aSelector, anObject)
{
    objj_msgSend(self, "makeObjectsPerformSelector:withObjects:", aSelector, [anObject]);
}

), new objj_method(sel_getUid("makeObjectsPerformSelector:withObjects:"), function $CPSet__makeObjectsPerformSelector_withObjects_(self, _cmd, aSelector, objects)
{
    var object,
        objectEnumerator = objj_msgSend(self, "objectEnumerator"),
        argumentsArray = [nil, aSelector].concat(objects || []);
    while ((object = objj_msgSend(objectEnumerator, "nextObject")) !== nil)
    {
        argumentsArray[0] = object;
        objj_msgSend.apply(this, argumentsArray);
    }
}

), new objj_method(sel_getUid("enumerateObjectsUsingBlock:"), function $CPSet__enumerateObjectsUsingBlock_(self, _cmd, aFunction)
{
    var object,
        objectEnumerator = objj_msgSend(self, "objectEnumerator");
    while ((object = objj_msgSend(objectEnumerator, "nextObject")) !== nil)
        if (aFunction(object))
            break;
}

), new objj_method(sel_getUid("isSubsetOfSet:"), function $CPSet__isSubsetOfSet_(self, _cmd, aSet)
{
    var object = nil,
        objectEnumerator = objj_msgSend(self, "objectEnumerator");
    while ((object = objj_msgSend(objectEnumerator, "nextObject")) !== nil)
        if (!objj_msgSend(aSet, "containsObject:", object))
            return NO;
    return YES;
}

), new objj_method(sel_getUid("intersectsSet:"), function $CPSet__intersectsSet_(self, _cmd, aSet)
{
    if (self === aSet)
        return objj_msgSend(self, "count") > 0;
    var object = nil,
        objectEnumerator = objj_msgSend(self, "objectEnumerator");
    while ((object = objj_msgSend(objectEnumerator, "nextObject")) !== nil)
        if (objj_msgSend(aSet, "containsObject:", object))
            return YES;
    return NO;
}

), new objj_method(sel_getUid("sortedArrayUsingDescriptors:"), function $CPSet__sortedArrayUsingDescriptors_(self, _cmd, someSortDescriptors)
{
    return objj_msgSend(objj_msgSend(self, "allObjects"), "sortedArrayUsingDescriptors:", someSortDescriptors);
}

), new objj_method(sel_getUid("isEqualToSet:"), function $CPSet__isEqualToSet_(self, _cmd, aSet)
{
    return objj_msgSend(self, "isEqual:", aSet);
}

), new objj_method(sel_getUid("isEqual:"), function $CPSet__isEqual_(self, _cmd, aSet)
{
    return self === aSet || objj_msgSend(aSet, "isKindOfClass:", objj_msgSend(CPSet, "class")) && (objj_msgSend(self, "count") === objj_msgSend(aSet, "count") && objj_msgSend(aSet, "isSubsetOfSet:", self));
}

), new objj_method(sel_getUid("unionSet:"), function $CPSet__unionSet_(self, _cmd, aSet)
{
    var object,
        objectEnumerator = objj_msgSend(aSet, "objectEnumerator");
    while ((object = objj_msgSend(objectEnumerator, "nextObject")) !== nil)
        objj_msgSend(self, "addObject:", object);
}

), new objj_method(sel_getUid("minusSet:"), function $CPSet__minusSet_(self, _cmd, aSet)
{
    var object,
        objectEnumerator = objj_msgSend(aSet, "objectEnumerator");
    while ((object = objj_msgSend(objectEnumerator, "nextObject")) !== nil)
        objj_msgSend(self, "removeObject:", object);
}

), new objj_method(sel_getUid("intersectSet:"), function $CPSet__intersectSet_(self, _cmd, aSet)
{
    var object,
        objectEnumerator = objj_msgSend(self, "objectEnumerator"),
        objectsToRemove = [];
    while ((object = objj_msgSend(objectEnumerator, "nextObject")) !== nil)
        if (!objj_msgSend(aSet, "containsObject:", object))
            objectsToRemove.push(object);
    var count = objj_msgSend(objectsToRemove, "count");
    while (count--)
        objj_msgSend(self, "removeObject:", objectsToRemove[count]);
}

), new objj_method(sel_getUid("setSet:"), function $CPSet__setSet_(self, _cmd, aSet)
{
    objj_msgSend(self, "removeAllObjects");
    objj_msgSend(self, "unionSet:", aSet);
}

), new objj_method(sel_getUid("description"), function $CPSet__description(self, _cmd)
{
    var string = "CPSet : {(\n",
        objects = objj_msgSend(self, "allObjects"),
        index = 0,
        count = objj_msgSend(objects, "count");
    for (; index < count; ++index)
    {
        var object = objects[index];
        string += "\t" + ((String(object)).split('\n')).join("\n\t") + "\n";
    }
    return string + ")}";
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("set"), function $CPSet__set(self, _cmd)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "init");
}

), new objj_method(sel_getUid("setWithArray:"), function $CPSet__setWithArray_(self, _cmd, anArray)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithArray:", anArray);
}

), new objj_method(sel_getUid("setWithObject:"), function $CPSet__setWithObject_(self, _cmd, anObject)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithObjects:", anObject);
}

), new objj_method(sel_getUid("setWithObjects:count:"), function $CPSet__setWithObjects_count_(self, _cmd, objects, count)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithObjects:count:", objects, count);
}

), new objj_method(sel_getUid("setWithObjects:"), function $CPSet__setWithObjects_(self, _cmd, anObject)
{
    var argumentsArray = Array.prototype.slice.apply(arguments);
    argumentsArray[0] = objj_msgSend(self, "alloc");
    argumentsArray[1] = sel_getUid("initWithObjects:");
    return objj_msgSend.apply(this, argumentsArray);
}

), new objj_method(sel_getUid("setWithSet:"), function $CPSet__setWithSet_(self, _cmd, set)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithSet:", set);
}

)]);
}{
var the_class = objj_getClass("CPSet")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPSet\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("copy"), function $CPSet__copy(self, _cmd)
{
    return objj_msgSend(objj_msgSend(self, "class"), "setWithSet:", self);
}

)]);
}{
var the_class = objj_getClass("CPSet")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPSet\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPSet__initWithCoder_(self, _cmd, aCoder)
{
    return objj_msgSend(self, "initWithArray:", objj_msgSend(aCoder, "decodeObjectForKey:", "CP.objects"));
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPSet__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSet").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", objj_msgSend(self, "allObjects"), "CP.objects");
}

)]);
}{
var the_class = objj_getClass("CPSet")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPSet\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("valueForKey:"), function $CPSet__valueForKey_(self, _cmd, aKey)
{
    if (aKey === "@count")
        return objj_msgSend(self, "count");
    var valueSet = objj_msgSend(CPSet, "set"),
        object,
        objectEnumerator = objj_msgSend(self, "objectEnumerator");
    while ((object = objj_msgSend(objectEnumerator, "nextObject")) !== nil)
    {
        var value = objj_msgSend(object, "valueForKey:", aKey);
        objj_msgSend(valueSet, "addObject:", value);
    }
    return valueSet;
}

), new objj_method(sel_getUid("setValue:forKey:"), function $CPSet__setValue_forKey_(self, _cmd, aValue, aKey)
{
    var object,
        objectEnumerator = objj_msgSend(self, "objectEnumerator");
    while ((object = objj_msgSend(objectEnumerator, "nextObject")) !== nil)
        objj_msgSend(object, "setValue:forKey:", aValue, aKey);
}

)]);
}var CPNotificationDefaultCenter = nil;
{var the_class = objj_allocateClassPair(CPObject, "CPNotificationCenter"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_namedRegistries"), new objj_ivar("_unnamedRegistry")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPNotificationCenter__init(self, _cmd)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPNotificationCenter").super_class }, "init");
    if (self)
    {
        self._namedRegistries = objj_msgSend(CPDictionary, "dictionary");
        self._unnamedRegistry = objj_msgSend(objj_msgSend(_CPNotificationRegistry, "alloc"), "init");
    }
    return self;
}

), new objj_method(sel_getUid("addObserver:selector:name:object:"), function $CPNotificationCenter__addObserver_selector_name_object_(self, _cmd, anObserver, aSelector, aNotificationName, anObject)
{
    var registry,
        observer = objj_msgSend(objj_msgSend(_CPNotificationObserver, "alloc"), "initWithObserver:selector:", anObserver, aSelector);
    if (aNotificationName == nil)
        registry = self._unnamedRegistry;
    else if (!(registry = objj_msgSend(self._namedRegistries, "objectForKey:", aNotificationName)))
    {
        registry = objj_msgSend(objj_msgSend(_CPNotificationRegistry, "alloc"), "init");
        objj_msgSend(self._namedRegistries, "setObject:forKey:", registry, aNotificationName);
    }
    objj_msgSend(registry, "addObserver:object:", observer, anObject);
}

), new objj_method(sel_getUid("removeObserver:"), function $CPNotificationCenter__removeObserver_(self, _cmd, anObserver)
{
    var name = nil,
        names = objj_msgSend(self._namedRegistries, "allKeys"),
        count = names.length,
        index = 0;
    for (; index < count; index++)
    {
        name = names[index];
        objj_msgSend(objj_msgSend(self._namedRegistries, "objectForKey:", name), "removeObserver:object:", anObserver, nil);
    }
    objj_msgSend(self._unnamedRegistry, "removeObserver:object:", anObserver, nil);
}

), new objj_method(sel_getUid("removeObserver:name:object:"), function $CPNotificationCenter__removeObserver_name_object_(self, _cmd, anObserver, aNotificationName, anObject)
{
    if (aNotificationName == nil)
    {
        var name = nil,
            names = objj_msgSend(self._namedRegistries, "allKeys"),
            count = names.length,
            index = 0;
        for (; index < count; index++)
        {
            name = names[index];
            objj_msgSend(objj_msgSend(self._namedRegistries, "objectForKey:", name), "removeObserver:object:", anObserver, anObject);
        }
        objj_msgSend(self._unnamedRegistry, "removeObserver:object:", anObserver, anObject);
    }
    else
        objj_msgSend(objj_msgSend(self._namedRegistries, "objectForKey:", aNotificationName), "removeObserver:object:", anObserver, anObject);
}

), new objj_method(sel_getUid("postNotification:"), function $CPNotificationCenter__postNotification_(self, _cmd, aNotification)
{
    if (!aNotification)
        throw new Exception("postNotification: does not except 'nil' notifications");
    _CPNotificationCenterPostNotification(self, aNotification);
}

), new objj_method(sel_getUid("postNotificationName:object:userInfo:"), function $CPNotificationCenter__postNotificationName_object_userInfo_(self, _cmd, aNotificationName, anObject, aUserInfo)
{
    _CPNotificationCenterPostNotification(self, objj_msgSend(objj_msgSend(CPNotification, "alloc"), "initWithName:object:userInfo:", aNotificationName, anObject, aUserInfo));
}

), new objj_method(sel_getUid("postNotificationName:object:"), function $CPNotificationCenter__postNotificationName_object_(self, _cmd, aNotificationName, anObject)
{
    _CPNotificationCenterPostNotification(self, objj_msgSend(objj_msgSend(CPNotification, "alloc"), "initWithName:object:userInfo:", aNotificationName, anObject, nil));
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("defaultCenter"), function $CPNotificationCenter__defaultCenter(self, _cmd)
{
    if (!CPNotificationDefaultCenter)
        CPNotificationDefaultCenter = objj_msgSend(objj_msgSend(CPNotificationCenter, "alloc"), "init");
    return CPNotificationDefaultCenter;
}

)]);
}var _CPNotificationCenterPostNotification = function(self, aNotification)
{
    objj_msgSend(self._unnamedRegistry, "postNotification:", aNotification);
    objj_msgSend(objj_msgSend(self._namedRegistries, "objectForKey:", objj_msgSend(aNotification, "name")), "postNotification:", aNotification);
};
{var the_class = objj_allocateClassPair(CPObject, "_CPNotificationRegistry"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_objectObservers")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $_CPNotificationRegistry__init(self, _cmd)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPNotificationRegistry").super_class }, "init");
    if (self)
    {
        self._objectObservers = objj_msgSend(CPDictionary, "dictionary");
    }
    return self;
}

), new objj_method(sel_getUid("addObserver:object:"), function $_CPNotificationRegistry__addObserver_object_(self, _cmd, anObserver, anObject)
{
    if (!anObject)
        anObject = objj_msgSend(CPNull, "null");
    var observers = objj_msgSend(self._objectObservers, "objectForKey:", objj_msgSend(anObject, "UID"));
    if (!observers)
    {
        observers = objj_msgSend(CPSet, "set");
        objj_msgSend(self._objectObservers, "setObject:forKey:", observers, objj_msgSend(anObject, "UID"));
    }
    objj_msgSend(observers, "addObject:", anObserver);
}

), new objj_method(sel_getUid("removeObserver:object:"), function $_CPNotificationRegistry__removeObserver_object_(self, _cmd, anObserver, anObject)
{
    var removedKeys = [];
    if (anObject == nil)
    {
        var key = nil,
            keys = objj_msgSend(self._objectObservers, "allKeys"),
            count = keys.length,
            index = 0;
        for (; index < count; index++)
        {
            var key = keys[index],
                observers = objj_msgSend(objj_msgSend(self._objectObservers, "objectForKey:", key), "allObjects"),
                observer = nil,
                observerCount = objj_msgSend(observers, "count"),
                observerIndex = 0;
            for (; observerIndex < observerCount; observerIndex++)
            {
                observer = objj_msgSend(observers, "objectAtIndex:", observerIndex);
                if (objj_msgSend(observer, "observer") == anObserver)
                    objj_msgSend(observers, "removeObject:", observer);
            }
            if (!objj_msgSend(observers, "count"))
                removedKeys.push(key);
        }
    }
    else
    {
        var key = objj_msgSend(anObject, "UID"),
            observers = objj_msgSend(objj_msgSend(self._objectObservers, "objectForKey:", key), "allObjects"),
            observer = nil,
            observerCount = objj_msgSend(observers, "count"),
            observerIndex = 0;
        for (; observerIndex < observerCount; observerIndex++)
        {
            observer = objj_msgSend(observers, "objectAtIndex:", observerIndex);
            if (objj_msgSend(observer, "observer") == anObserver)
                objj_msgSend(observers, "removeObject:", observer);
        }
        if (!objj_msgSend(observers, "count"))
            removedKeys.push(key);
    }
    var count = removedKeys.length;
    while (count--)
        objj_msgSend(self._objectObservers, "removeObjectForKey:", removedKeys[count]);
}

), new objj_method(sel_getUid("postNotification:"), function $_CPNotificationRegistry__postNotification_(self, _cmd, aNotification)
{
    var object = objj_msgSend(aNotification, "object"),
        currentObservers = nil;
    if (object != nil && (currentObservers = objj_msgSend(self._objectObservers, "objectForKey:", objj_msgSend(object, "UID"))))
    {
        var observers = objj_msgSend(objj_msgSend(currentObservers, "copy"), "allObjects"),
            observer = nil,
            observerCount = objj_msgSend(observers, "count"),
            observerIndex = 0;
        for (; observerIndex < observerCount; observerIndex++)
        {
            observer = objj_msgSend(observers, "objectAtIndex:", observerIndex);
            objj_msgSend(observer, "postNotification:", aNotification);
        }
    }
    currentObservers = objj_msgSend(self._objectObservers, "objectForKey:", objj_msgSend(objj_msgSend(CPNull, "null"), "UID"));
    if (!currentObservers)
        return;
    var observers = objj_msgSend(objj_msgSend(currentObservers, "copy"), "allObjects"),
        observerCount = objj_msgSend(observers, "count"),
        observerIndex = 0;
    for (; observerIndex < observerCount; observerIndex++)
    {
        observer = objj_msgSend(observers, "objectAtIndex:", observerIndex);
        if (objj_msgSend(currentObservers, "containsObject:", observer))
            objj_msgSend(observer, "postNotification:", aNotification);
    }
}

), new objj_method(sel_getUid("count"), function $_CPNotificationRegistry__count(self, _cmd)
{
    return objj_msgSend(self._objectObservers, "count");
}

)]);
}{var the_class = objj_allocateClassPair(CPObject, "_CPNotificationObserver"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_observer"), new objj_ivar("_selector")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithObserver:selector:"), function $_CPNotificationObserver__initWithObserver_selector_(self, _cmd, anObserver, aSelector)
{
    if (self)
    {
        self._observer = anObserver;
        self._selector = aSelector;
    }
    return self;
}

), new objj_method(sel_getUid("observer"), function $_CPNotificationObserver__observer(self, _cmd)
{
    return self._observer;
}

), new objj_method(sel_getUid("postNotification:"), function $_CPNotificationObserver__postNotification_(self, _cmd, aNotification)
{
    objj_msgSend(self._observer, "performSelector:withObject:", self._selector, aNotification);
    objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
}

)]);
}var CPDateReferenceDate = new Date(Date.UTC(2001, 0, 1, 0, 0, 0, 0));
{var the_class = objj_allocateClassPair(CPObject, "CPDate"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithTimeIntervalSinceNow:"), function $CPDate__initWithTimeIntervalSinceNow_(self, _cmd, seconds)
{
    self = new Date((new Date()).getTime() + seconds * 1000);
    return self;
}

), new objj_method(sel_getUid("initWithTimeIntervalSince1970:"), function $CPDate__initWithTimeIntervalSince1970_(self, _cmd, seconds)
{
    self = new Date(seconds * 1000);
    return self;
}

), new objj_method(sel_getUid("initWithTimeIntervalSinceReferenceDate:"), function $CPDate__initWithTimeIntervalSinceReferenceDate_(self, _cmd, seconds)
{
    self = objj_msgSend(self, "initWithTimeInterval:sinceDate:", seconds, CPDateReferenceDate);
    return self;
}

), new objj_method(sel_getUid("initWithTimeInterval:sinceDate:"), function $CPDate__initWithTimeInterval_sinceDate_(self, _cmd, seconds, refDate)
{
    self = new Date(refDate.getTime() + seconds * 1000);
    return self;
}

), new objj_method(sel_getUid("initWithString:"), function $CPDate__initWithString_(self, _cmd, description)
{
    var format = /(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2}) ([-+])(\d{2})(\d{2})/,
        d = description.match(new RegExp(format));
    if (!d || d.length != 10)
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "initWithString: the string must be in YYYY-MM-DD HH:MM:SS ±HHMM format");
    var date = new Date(d[1], d[2] - 1, d[3]),
        timeZoneOffset = (Number(d[8]) * 60 + Number(d[9])) * (d[7] === '-' ? 1 : -1);
    date.setHours(d[4]);
    date.setMinutes(d[5]);
    date.setSeconds(d[6]);
    self = new Date(date.getTime() + (timeZoneOffset - date.getTimezoneOffset()) * 60 * 1000);
    return self;
}

), new objj_method(sel_getUid("timeIntervalSinceDate:"), function $CPDate__timeIntervalSinceDate_(self, _cmd, anotherDate)
{
    return (self.getTime() - anotherDate.getTime()) / 1000.0;
}

), new objj_method(sel_getUid("timeIntervalSinceNow"), function $CPDate__timeIntervalSinceNow(self, _cmd)
{
    return objj_msgSend(self, "timeIntervalSinceDate:", objj_msgSend(CPDate, "date"));
}

), new objj_method(sel_getUid("timeIntervalSince1970"), function $CPDate__timeIntervalSince1970(self, _cmd)
{
    return self.getTime() / 1000.0;
}

), new objj_method(sel_getUid("timeIntervalSinceReferenceDate"), function $CPDate__timeIntervalSinceReferenceDate(self, _cmd)
{
    return (self.getTime() - CPDateReferenceDate.getTime()) / 1000.0;
}

), new objj_method(sel_getUid("isEqual:"), function $CPDate__isEqual_(self, _cmd, aDate)
{
    if (self === aDate)
        return YES;
    if (!aDate || !objj_msgSend(aDate, "isKindOfClass:", objj_msgSend(CPDate, "class")))
        return NO;
    return objj_msgSend(self, "isEqualToDate:", aDate);
}

), new objj_method(sel_getUid("isEqualToDate:"), function $CPDate__isEqualToDate_(self, _cmd, aDate)
{
    if (!aDate)
        return NO;
    return !(self < aDate || self > aDate);
}

), new objj_method(sel_getUid("compare:"), function $CPDate__compare_(self, _cmd, anotherDate)
{
    return self > anotherDate ? CPOrderedDescending : self < anotherDate ? CPOrderedAscending : CPOrderedSame;
}

), new objj_method(sel_getUid("earlierDate:"), function $CPDate__earlierDate_(self, _cmd, anotherDate)
{
    return self < anotherDate ? self : anotherDate;
}

), new objj_method(sel_getUid("laterDate:"), function $CPDate__laterDate_(self, _cmd, anotherDate)
{
    return self > anotherDate ? self : anotherDate;
}

), new objj_method(sel_getUid("description"), function $CPDate__description(self, _cmd)
{
    return objj_msgSend(CPString, "stringWithFormat:", "%04d-%02d-%02d %02d:%02d:%02d %s", self.getFullYear(), self.getMonth() + 1, self.getDate(), self.getHours(), self.getMinutes(), self.getSeconds(), objj_msgSend(CPDate, "timezoneOffsetString:", self.getTimezoneOffset()));
}

), new objj_method(sel_getUid("copy"), function $CPDate__copy(self, _cmd)
{
    return new Date(self.getTime());
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPDate__alloc(self, _cmd)
{
    var result = new Date();
    result._UID = objj_generateObjectUID();
    result.isa = objj_msgSend(self, "class");
    return result;
}

), new objj_method(sel_getUid("date"), function $CPDate__date(self, _cmd)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "init");
}

), new objj_method(sel_getUid("dateWithTimeIntervalSinceNow:"), function $CPDate__dateWithTimeIntervalSinceNow_(self, _cmd, seconds)
{
    return objj_msgSend(objj_msgSend(CPDate, "alloc"), "initWithTimeIntervalSinceNow:", seconds);
}

), new objj_method(sel_getUid("dateWithTimeIntervalSince1970:"), function $CPDate__dateWithTimeIntervalSince1970_(self, _cmd, seconds)
{
    return objj_msgSend(objj_msgSend(CPDate, "alloc"), "initWithTimeIntervalSince1970:", seconds);
}

), new objj_method(sel_getUid("dateWithTimeIntervalSinceReferenceDate:"), function $CPDate__dateWithTimeIntervalSinceReferenceDate_(self, _cmd, seconds)
{
    return objj_msgSend(objj_msgSend(CPDate, "alloc"), "initWithTimeIntervalSinceReferenceDate:", seconds);
}

), new objj_method(sel_getUid("distantPast"), function $CPDate__distantPast(self, _cmd)
{
    return objj_msgSend(CPDate, "dateWithTimeIntervalSinceReferenceDate:", -63113817600.0);
}

), new objj_method(sel_getUid("distantFuture"), function $CPDate__distantFuture(self, _cmd)
{
    return objj_msgSend(CPDate, "dateWithTimeIntervalSinceReferenceDate:", 63113990400.0);
}

), new objj_method(sel_getUid("timeIntervalSinceReferenceDate"), function $CPDate__timeIntervalSinceReferenceDate(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDate, "date"), "timeIntervalSinceReferenceDate");
}

), new objj_method(sel_getUid("timezoneOffsetString:"), function $CPDate__timezoneOffsetString_(self, _cmd, timezoneOffset)
{
    var offset = -timezoneOffset,
        positive = offset >= 0,
        hours = positive ? FLOOR(offset / 60) : CEIL(offset / 60),
        minutes = offset - hours * 60;
    return objj_msgSend(CPString, "stringWithFormat:", "%s%02d%02d", positive ? "+" : "-", ABS(hours), ABS(minutes));
}

)]);
}var CPDateTimeKey = "CPDateTimeKey";
{
var the_class = objj_getClass("CPDate")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPDate\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPDate__initWithCoder_(self, _cmd, aCoder)
{
    if (self)
    {
        self.setTime(objj_msgSend(aCoder, "decodeIntForKey:", CPDateTimeKey));
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPDate__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPDate").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeNumber:forKey:", self.getTime(), CPDateTimeKey);
}

)]);
}var numericKeys = [1, 4, 5, 6, 7, 10, 11];
Date.parseISO8601 = function(date)
{
    var timestamp,
        struct,
        minutesOffset = 0;
    timestamp = Date.parse(date);
    if (isNaN(timestamp) && (struct = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/.exec(date)))
    {
        for (var i = 0, k; k = numericKeys[i]; ++i)
            struct[k] = +struct[k] || 0;
        struct[2] = (+struct[2] || 1) - 1;
        struct[3] = +struct[3] || 1;
        if (struct[8] !== 'Z' && struct[9] !== undefined)
        {
            minutesOffset = struct[10] * 60 + struct[11];
            if (struct[9] === '+')
                minutesOffset = 0 - minutesOffset;
        }        return Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
    }    return timestamp;
};
Date.prototype.isa = CPDate;
{var the_class = objj_allocateClassPair(CPObject, "CPIndexSet"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_count"), new objj_ivar("_ranges")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPIndexSet__init(self, _cmd)
{
    return objj_msgSend(self, "initWithIndexesInRange:", CPMakeRange(0, 0));
}

), new objj_method(sel_getUid("initWithIndex:"), function $CPIndexSet__initWithIndex_(self, _cmd, anIndex)
{
    if (isNaN(anIndex))
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "Invalid index");
    return objj_msgSend(self, "initWithIndexesInRange:", CPMakeRange(anIndex, 1));
}

), new objj_method(sel_getUid("initWithIndexesInRange:"), function $CPIndexSet__initWithIndexesInRange_(self, _cmd, aRange)
{
    if (aRange.location < 0)
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "Range " + CPStringFromRange(aRange) + " is out of bounds.");
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPIndexSet").super_class }, "init");
    if (self)
    {
        self._count = MAX(0, aRange.length);
        if (self._count > 0)
            self._ranges = [aRange];
        else
            self._ranges = [];
    }
    return self;
}

), new objj_method(sel_getUid("initWithIndexSet:"), function $CPIndexSet__initWithIndexSet_(self, _cmd, anIndexSet)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPIndexSet").super_class }, "init");
    if (self)
    {
        self._count = objj_msgSend(anIndexSet, "count");
        self._ranges = [];
        var otherRanges = anIndexSet._ranges,
            otherRangesCount = otherRanges.length;
        while (otherRangesCount--)
            self._ranges[otherRangesCount] = CPMakeRangeCopy(otherRanges[otherRangesCount]);
    }
    return self;
}

), new objj_method(sel_getUid("isEqual:"), function $CPIndexSet__isEqual_(self, _cmd, anObject)
{
    if (self === anObject)
        return YES;
    if (!anObject || !objj_msgSend(anObject, "isKindOfClass:", objj_msgSend(CPIndexSet, "class")))
        return NO;
    return objj_msgSend(self, "isEqualToIndexSet:", anObject);
}

), new objj_method(sel_getUid("isEqualToIndexSet:"), function $CPIndexSet__isEqualToIndexSet_(self, _cmd, anIndexSet)
{
    if (!anIndexSet)
        return NO;
    if (self === anIndexSet)
        return YES;
    var rangesCount = self._ranges.length,
        otherRanges = anIndexSet._ranges;
    if (rangesCount !== otherRanges.length || self._count !== anIndexSet._count)
        return NO;
    while (rangesCount--)
        if (!CPEqualRanges(self._ranges[rangesCount], otherRanges[rangesCount]))
            return NO;
    return YES;
}

), new objj_method(sel_getUid("isEqual:"), function $CPIndexSet__isEqual_(self, _cmd, anObject)
{
    return self === anObject || objj_msgSend(anObject, "isKindOfClass:", objj_msgSend(self, "class")) && objj_msgSend(self, "isEqualToIndexSet:", anObject);
}

), new objj_method(sel_getUid("containsIndex:"), function $CPIndexSet__containsIndex_(self, _cmd, anIndex)
{
    return positionOfIndex(self._ranges, anIndex) !== CPNotFound;
}

), new objj_method(sel_getUid("containsIndexesInRange:"), function $CPIndexSet__containsIndexesInRange_(self, _cmd, aRange)
{
    if (aRange.length <= 0)
        return NO;
    if (self._count < aRange.length)
        return NO;
    var rangeIndex = positionOfIndex(self._ranges, aRange.location);
    if (rangeIndex === CPNotFound)
        return NO;
    var range = self._ranges[rangeIndex];
    return (CPIntersectionRange(range, aRange)).length === aRange.length;
}

), new objj_method(sel_getUid("containsIndexes:"), function $CPIndexSet__containsIndexes_(self, _cmd, anIndexSet)
{
    var otherCount = anIndexSet._count;
    if (otherCount <= 0)
        return YES;
    if (self._count < otherCount)
        return NO;
    var otherRanges = anIndexSet._ranges,
        otherRangesCount = otherRanges.length;
    while (otherRangesCount--)
        if (!objj_msgSend(self, "containsIndexesInRange:", otherRanges[otherRangesCount]))
            return NO;
    return YES;
}

), new objj_method(sel_getUid("intersectsIndexesInRange:"), function $CPIndexSet__intersectsIndexesInRange_(self, _cmd, aRange)
{
    if (self._count <= 0)
        return NO;
    var lhsRangeIndex = assumedPositionOfIndex(self._ranges, aRange.location);
    if (FLOOR(lhsRangeIndex) === lhsRangeIndex)
        return YES;
    var rhsRangeIndex = assumedPositionOfIndex(self._ranges, CPMaxRange(aRange) - 1);
    if (FLOOR(rhsRangeIndex) === rhsRangeIndex)
        return YES;
    return lhsRangeIndex !== rhsRangeIndex;
}

), new objj_method(sel_getUid("count"), function $CPIndexSet__count(self, _cmd)
{
    return self._count;
}

), new objj_method(sel_getUid("firstIndex"), function $CPIndexSet__firstIndex(self, _cmd)
{
    if (self._count > 0)
        return self._ranges[0].location;
    return CPNotFound;
}

), new objj_method(sel_getUid("lastIndex"), function $CPIndexSet__lastIndex(self, _cmd)
{
    if (self._count > 0)
        return CPMaxRange(self._ranges[self._ranges.length - 1]) - 1;
    return CPNotFound;
}

), new objj_method(sel_getUid("indexGreaterThanIndex:"), function $CPIndexSet__indexGreaterThanIndex_(self, _cmd, anIndex)
{
    ++anIndex;
    var rangeIndex = assumedPositionOfIndex(self._ranges, anIndex);
    if (rangeIndex === CPNotFound)
        return CPNotFound;
    rangeIndex = CEIL(rangeIndex);
    if (rangeIndex >= self._ranges.length)
        return CPNotFound;
    var range = self._ranges[rangeIndex];
    if (CPLocationInRange(anIndex, range))
        return anIndex;
    return range.location;
}

), new objj_method(sel_getUid("indexLessThanIndex:"), function $CPIndexSet__indexLessThanIndex_(self, _cmd, anIndex)
{
    --anIndex;
    var rangeIndex = assumedPositionOfIndex(self._ranges, anIndex);
    if (rangeIndex === CPNotFound)
        return CPNotFound;
    rangeIndex = FLOOR(rangeIndex);
    if (rangeIndex < 0)
        return CPNotFound;
    var range = self._ranges[rangeIndex];
    if (CPLocationInRange(anIndex, range))
        return anIndex;
    return CPMaxRange(range) - 1;
}

), new objj_method(sel_getUid("indexGreaterThanOrEqualToIndex:"), function $CPIndexSet__indexGreaterThanOrEqualToIndex_(self, _cmd, anIndex)
{
    return objj_msgSend(self, "indexGreaterThanIndex:", anIndex - 1);
}

), new objj_method(sel_getUid("indexLessThanOrEqualToIndex:"), function $CPIndexSet__indexLessThanOrEqualToIndex_(self, _cmd, anIndex)
{
    return objj_msgSend(self, "indexLessThanIndex:", anIndex + 1);
}

), new objj_method(sel_getUid("getIndexes:maxCount:inIndexRange:"), function $CPIndexSet__getIndexes_maxCount_inIndexRange_(self, _cmd, anArray, aMaxCount, aRange)
{
    if (!self._count || aMaxCount === 0 || aRange && !aRange.length)
    {
        if (aRange)
            aRange.length = 0;
        return 0;
    }
    var total = 0;
    if (aRange)
    {
        var firstIndex = aRange.location,
            lastIndex = CPMaxRange(aRange) - 1,
            rangeIndex = CEIL(assumedPositionOfIndex(self._ranges, firstIndex)),
            lastRangeIndex = FLOOR(assumedPositionOfIndex(self._ranges, lastIndex));
    }
    else
    {
        var firstIndex = objj_msgSend(self, "firstIndex"),
            lastIndex = objj_msgSend(self, "lastIndex"),
            rangeIndex = 0,
            lastRangeIndex = self._ranges.length - 1;
    }
    while (rangeIndex <= lastRangeIndex)
    {
        var range = self._ranges[rangeIndex],
            index = MAX(firstIndex, range.location),
            maxRange = MIN(lastIndex + 1, CPMaxRange(range));
        for (; index < maxRange; ++index)
        {
            anArray[total++] = index;
            if (total === aMaxCount)
            {
                if (aRange)
                {
                    aRange.location = index + 1;
                    aRange.length = lastIndex + 1 - index - 1;
                }
                return aMaxCount;
            }
        }
        ++rangeIndex;
    }
    if (aRange)
    {
        aRange.location = CPNotFound;
        aRange.length = 0;
    }
    return total;
}

), new objj_method(sel_getUid("description"), function $CPIndexSet__description(self, _cmd)
{
    var description = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPIndexSet").super_class }, "description");
    if (self._count)
    {
        var index = 0,
            count = self._ranges.length;
        description += "[number of indexes: " + self._count + " (in " + count;
        if (count === 1)
            description += " range), indexes: (";
        else
            description += " ranges), indexes: (";
        for (; index < count; ++index)
        {
            var range = self._ranges[index];
            description += range.location;
            if (range.length > 1)
                description += "-" + (CPMaxRange(range) - 1);
            if (index + 1 < count)
                description += " ";
        }
        description += ")]";
    }
    else
        description += "(no indexes)";
    return description;
}

), new objj_method(sel_getUid("enumerateIndexesUsingBlock:"), function $CPIndexSet__enumerateIndexesUsingBlock_(self, _cmd, aFunction)
{
    objj_msgSend(self, "enumerateIndexesWithOptions:usingBlock:", CPEnumerationNormal, aFunction);
}

), new objj_method(sel_getUid("enumerateIndexesWithOptions:usingBlock:"), function $CPIndexSet__enumerateIndexesWithOptions_usingBlock_(self, _cmd, options, aFunction)
{
    if (!self._count)
        return;
    objj_msgSend(self, "enumerateIndexesInRange:options:usingBlock:", CPMakeRange(0, CPMaxRange(self._ranges[self._ranges.length - 1])), options, aFunction);
}

), new objj_method(sel_getUid("enumerateIndexesInRange:options:usingBlock:"), function $CPIndexSet__enumerateIndexesInRange_options_usingBlock_(self, _cmd, enumerationRange, options, aFunction)
{
    if (!self._count || CPEmptyRange(enumerationRange))
        return;
    var shouldStop = NO,
        index,
        stop,
        increment;
    if (options & CPEnumerationReverse)
    {
        (index = self._ranges.length - 1, stop = -1, increment = -1);
    }
    else
    {
        index = 0;
        stop = self._ranges.length;
        increment = 1;
    }
    for (; index !== stop; index += increment)
    {
        var range = self._ranges[index],
            rangeIndex,
            rangeStop,
            rangeIncrement;
        if (options & CPEnumerationReverse)
        {
            rangeIndex = CPMaxRange(range) - 1;
            rangeStop = range.location - 1;
            rangeIncrement = -1;
        }
        else
        {
            rangeIndex = range.location;
            rangeStop = CPMaxRange(range);
            rangeIncrement = 1;
        }
        for (; rangeIndex !== rangeStop; rangeIndex += rangeIncrement)
        {
            if (CPLocationInRange(rangeIndex, enumerationRange))
            {
                aFunction(rangeIndex, function(__input) { if (arguments.length) return shouldStop = __input; return shouldStop; });
                if (shouldStop)
                    return;
            }
        }
    }
}

), new objj_method(sel_getUid("indexPassingTest:"), function $CPIndexSet__indexPassingTest_(self, _cmd, aPredicate)
{
    return objj_msgSend(self, "indexWithOptions:passingTest:", CPEnumerationNormal, aPredicate);
}

), new objj_method(sel_getUid("indexesPassingTest:"), function $CPIndexSet__indexesPassingTest_(self, _cmd, aPredicate)
{
    return objj_msgSend(self, "indexesWithOptions:passingTest:", CPEnumerationNormal, aPredicate);
}

), new objj_method(sel_getUid("indexWithOptions:passingTest:"), function $CPIndexSet__indexWithOptions_passingTest_(self, _cmd, anOptions, aPredicate)
{
    if (!self._count)
        return CPNotFound;
    return objj_msgSend(self, "indexInRange:options:passingTest:", CPMakeRange(0, CPMaxRange(self._ranges[self._ranges.length - 1])), anOptions, aPredicate);
}

), new objj_method(sel_getUid("indexesWithOptions:passingTest:"), function $CPIndexSet__indexesWithOptions_passingTest_(self, _cmd, anOptions, aPredicate)
{
    if (!self._count)
        return objj_msgSend(CPIndexSet, "indexSet");
    return objj_msgSend(self, "indexesInRange:options:passingTest:", CPMakeRange(0, CPMaxRange(self._ranges[self._ranges.length - 1])), anOptions, aPredicate);
}

), new objj_method(sel_getUid("indexInRange:options:passingTest:"), function $CPIndexSet__indexInRange_options_passingTest_(self, _cmd, aRange, anOptions, aPredicate)
{
    if (!self._count || CPEmptyRange(aRange))
        return CPNotFound;
    var shouldStop = NO,
        index,
        stop,
        increment;
    if (anOptions & CPEnumerationReverse)
    {
        (index = self._ranges.length - 1, stop = -1, increment = -1);
    }
    else
    {
        index = 0;
        stop = self._ranges.length;
        increment = 1;
    }
    for (; index !== stop; index += increment)
    {
        var range = self._ranges[index],
            rangeIndex,
            rangeStop,
            rangeIncrement;
        if (anOptions & CPEnumerationReverse)
        {
            rangeIndex = CPMaxRange(range) - 1;
            rangeStop = range.location - 1;
            rangeIncrement = -1;
        }
        else
        {
            rangeIndex = range.location;
            rangeStop = CPMaxRange(range);
            rangeIncrement = 1;
        }
        for (; rangeIndex !== rangeStop; rangeIndex += rangeIncrement)
        {
            if (CPLocationInRange(rangeIndex, aRange))
            {
                if (aPredicate(rangeIndex, function(__input) { if (arguments.length) return shouldStop = __input; return shouldStop; }))
                    return rangeIndex;
                if (shouldStop)
                    return CPNotFound;
            }
        }
    }
    return CPNotFound;
}

), new objj_method(sel_getUid("indexesInRange:options:passingTest:"), function $CPIndexSet__indexesInRange_options_passingTest_(self, _cmd, aRange, anOptions, aPredicate)
{
    if (!self._count || CPEmptyRange(aRange))
        return objj_msgSend(CPIndexSet, "indexSet");
    var shouldStop = NO,
        index,
        stop,
        increment;
    if (anOptions & CPEnumerationReverse)
    {
        (index = self._ranges.length - 1, stop = -1, increment = -1);
    }
    else
    {
        index = 0;
        stop = self._ranges.length;
        increment = 1;
    }
    var indexesPassingTest = objj_msgSend(CPMutableIndexSet, "indexSet");
    for (; index !== stop; index += increment)
    {
        var range = self._ranges[index],
            rangeIndex,
            rangeStop,
            rangeIncrement;
        if (anOptions & CPEnumerationReverse)
        {
            rangeIndex = CPMaxRange(range) - 1;
            rangeStop = range.location - 1;
            rangeIncrement = -1;
        }
        else
        {
            rangeIndex = range.location;
            rangeStop = CPMaxRange(range);
            rangeIncrement = 1;
        }
        for (; rangeIndex !== rangeStop; rangeIndex += rangeIncrement)
        {
            if (CPLocationInRange(rangeIndex, aRange))
            {
                if (aPredicate(rangeIndex, function(__input) { if (arguments.length) return shouldStop = __input; return shouldStop; }))
                    objj_msgSend(indexesPassingTest, "addIndex:", rangeIndex);
                if (shouldStop)
                    return indexesPassingTest;
            }
        }
    }
    return indexesPassingTest;
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("indexSet"), function $CPIndexSet__indexSet(self, _cmd)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "init");
}

), new objj_method(sel_getUid("indexSetWithIndex:"), function $CPIndexSet__indexSetWithIndex_(self, _cmd, anIndex)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithIndex:", anIndex);
}

), new objj_method(sel_getUid("indexSetWithArray:"), function $CPIndexSet__indexSetWithArray_(self, _cmd, anArray)
{
    var idxSet = objj_msgSend(CPIndexSet, "indexSet"),
        count = anArray.length,
        i = 0;
    for (; i < count; i++)
    {
        objj_msgSend(idxSet, "addIndex:", anArray[i]);
    }
    return idxSet;
}

), new objj_method(sel_getUid("indexSetWithIndexesInRange:"), function $CPIndexSet__indexSetWithIndexesInRange_(self, _cmd, aRange)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithIndexesInRange:", aRange);
}

)]);
}{
var the_class = objj_getClass("CPIndexSet")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPIndexSet\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("addIndex:"), function $CPIndexSet__addIndex_(self, _cmd, anIndex)
{
    objj_msgSend(self, "addIndexesInRange:", CPMakeRange(anIndex, 1));
}

), new objj_method(sel_getUid("addIndexes:"), function $CPIndexSet__addIndexes_(self, _cmd, anIndexSet)
{
    var otherRanges = anIndexSet._ranges,
        otherRangesCount = otherRanges.length;
    while (otherRangesCount--)
        objj_msgSend(self, "addIndexesInRange:", otherRanges[otherRangesCount]);
}

), new objj_method(sel_getUid("addIndexesInRange:"), function $CPIndexSet__addIndexesInRange_(self, _cmd, aRange)
{
    if (aRange.location < 0)
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "Range " + CPStringFromRange(aRange) + " is out of bounds.");
    if (aRange.length <= 0)
        return;
    if (self._count <= 0)
    {
        self._count = aRange.length;
        self._ranges = [aRange];
        return;
    }
    var rangeCount = self._ranges.length,
        lhsRangeIndex = assumedPositionOfIndex(self._ranges, aRange.location - 1),
        lhsRangeIndexCEIL = CEIL(lhsRangeIndex);
    if (lhsRangeIndexCEIL === lhsRangeIndex && lhsRangeIndexCEIL < rangeCount)
        aRange = CPUnionRange(aRange, self._ranges[lhsRangeIndexCEIL]);
    var rhsRangeIndex = assumedPositionOfIndex(self._ranges, CPMaxRange(aRange)),
        rhsRangeIndexFLOOR = FLOOR(rhsRangeIndex);
    if (rhsRangeIndexFLOOR === rhsRangeIndex && rhsRangeIndexFLOOR >= 0)
        aRange = CPUnionRange(aRange, self._ranges[rhsRangeIndexFLOOR]);
    var removalCount = rhsRangeIndexFLOOR - lhsRangeIndexCEIL + 1;
    if (removalCount === self._ranges.length)
    {
        self._ranges = [aRange];
        self._count = aRange.length;
    }
    else if (removalCount === 1)
    {
        if (lhsRangeIndexCEIL < self._ranges.length)
            self._count -= self._ranges[lhsRangeIndexCEIL].length;
        self._count += aRange.length;
        self._ranges[lhsRangeIndexCEIL] = aRange;
    }
    else
    {
        if (removalCount > 0)
        {
            var removal = lhsRangeIndexCEIL,
                lastRemoval = lhsRangeIndexCEIL + removalCount - 1;
            for (; removal <= lastRemoval; ++removal)
                self._count -= self._ranges[removal].length;
            objj_msgSend(self._ranges, "removeObjectsInRange:", CPMakeRange(lhsRangeIndexCEIL, removalCount));
        }
        objj_msgSend(self._ranges, "insertObject:atIndex:", aRange, lhsRangeIndexCEIL);
        self._count += aRange.length;
    }
}

), new objj_method(sel_getUid("removeIndex:"), function $CPIndexSet__removeIndex_(self, _cmd, anIndex)
{
    objj_msgSend(self, "removeIndexesInRange:", CPMakeRange(anIndex, 1));
}

), new objj_method(sel_getUid("removeIndexes:"), function $CPIndexSet__removeIndexes_(self, _cmd, anIndexSet)
{
    var otherRanges = anIndexSet._ranges,
        otherRangesCount = otherRanges.length;
    while (otherRangesCount--)
        objj_msgSend(self, "removeIndexesInRange:", otherRanges[otherRangesCount]);
}

), new objj_method(sel_getUid("removeAllIndexes"), function $CPIndexSet__removeAllIndexes(self, _cmd)
{
    self._ranges = [];
    self._count = 0;
}

), new objj_method(sel_getUid("removeIndexesInRange:"), function $CPIndexSet__removeIndexesInRange_(self, _cmd, aRange)
{
    if (aRange.length <= 0)
        return;
    if (self._count <= 0)
        return;
    var rangeCount = self._ranges.length,
        lhsRangeIndex = assumedPositionOfIndex(self._ranges, aRange.location),
        lhsRangeIndexCEIL = CEIL(lhsRangeIndex);
    if (lhsRangeIndex === lhsRangeIndexCEIL && lhsRangeIndexCEIL < rangeCount)
    {
        var existingRange = self._ranges[lhsRangeIndexCEIL];
        if (aRange.location !== existingRange.location)
        {
            var maxRange = CPMaxRange(aRange),
                existingMaxRange = CPMaxRange(existingRange);
            existingRange.length = aRange.location - existingRange.location;
            if (maxRange < existingMaxRange)
            {
                self._count -= aRange.length;
                objj_msgSend(self._ranges, "insertObject:atIndex:", CPMakeRange(maxRange, existingMaxRange - maxRange), lhsRangeIndexCEIL + 1);
                return;
            }
            else
            {
                self._count -= existingMaxRange - aRange.location;
                lhsRangeIndexCEIL += 1;
            }
        }
    }
    var rhsRangeIndex = assumedPositionOfIndex(self._ranges, CPMaxRange(aRange) - 1),
        rhsRangeIndexFLOOR = FLOOR(rhsRangeIndex);
    if (rhsRangeIndex === rhsRangeIndexFLOOR && rhsRangeIndexFLOOR >= 0)
    {
        var maxRange = CPMaxRange(aRange),
            existingRange = self._ranges[rhsRangeIndexFLOOR],
            existingMaxRange = CPMaxRange(existingRange);
        if (maxRange !== existingMaxRange)
        {
            self._count -= maxRange - existingRange.location;
            rhsRangeIndexFLOOR -= 1;
            existingRange.location = maxRange;
            existingRange.length = existingMaxRange - maxRange;
        }
    }
    var removalCount = rhsRangeIndexFLOOR - lhsRangeIndexCEIL + 1;
    if (removalCount > 0)
    {
        var removal = lhsRangeIndexCEIL,
            lastRemoval = lhsRangeIndexCEIL + removalCount - 1;
        for (; removal <= lastRemoval; ++removal)
            self._count -= self._ranges[removal].length;
        objj_msgSend(self._ranges, "removeObjectsInRange:", CPMakeRange(lhsRangeIndexCEIL, removalCount));
    }
}

), new objj_method(sel_getUid("shiftIndexesStartingAtIndex:by:"), function $CPIndexSet__shiftIndexesStartingAtIndex_by_(self, _cmd, anIndex, aDelta)
{
    if (!self._count || aDelta == 0)
        return;
    var i = self._ranges.length - 1,
        shifted = CPMakeRange(CPNotFound, 0);
    for (; i >= 0; --i)
    {
        var range = self._ranges[i],
            maximum = CPMaxRange(range);
        if (anIndex >= maximum)
            break;
        if (anIndex > range.location)
        {
            shifted = CPMakeRange(anIndex + aDelta, maximum - anIndex);
            range.length = anIndex - range.location;
            if (aDelta > 0)
                objj_msgSend(self._ranges, "insertObject:atIndex:", shifted, i + 1);
            else if (shifted.location < 0)
            {
                shifted.length = CPMaxRange(shifted);
                shifted.location = 0;
            }
            break;
        }
        if ((range.location += aDelta) < 0)
        {
            self._count -= range.length - CPMaxRange(range);
            range.length = CPMaxRange(range);
            range.location = 0;
        }
    }
    if (aDelta < 0)
    {
        var j = i + 1,
            count = self._ranges.length,
            shifts = [];
        for (; j < count; ++j)
        {
            objj_msgSend(shifts, "addObject:", self._ranges[j]);
            self._count -= self._ranges[j].length;
        }
        if ((j = i + 1) < count)
        {
            objj_msgSend(self._ranges, "removeObjectsInRange:", CPMakeRange(j, count - j));
            for ((j = 0, count = shifts.length); j < count; ++j)
                objj_msgSend(self, "addIndexesInRange:", shifts[j]);
        }
        if (shifted.location != CPNotFound)
            objj_msgSend(self, "addIndexesInRange:", shifted);
    }
}

)]);
}var CPIndexSetCountKey = "CPIndexSetCountKey",
    CPIndexSetRangeStringsKey = "CPIndexSetRangeStringsKey";
{
var the_class = objj_getClass("CPIndexSet")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPIndexSet\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPIndexSet__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPIndexSet").super_class }, "init");
    if (self)
    {
        self._count = objj_msgSend(aCoder, "decodeIntForKey:", CPIndexSetCountKey);
        self._ranges = [];
        var rangeStrings = objj_msgSend(aCoder, "decodeObjectForKey:", CPIndexSetRangeStringsKey),
            index = 0,
            count = rangeStrings.length;
        for (; index < count; ++index)
            self._ranges.push(CPRangeFromString(rangeStrings[index]));
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPIndexSet__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPIndexSet").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._count, CPIndexSetCountKey);
    var index = 0,
        count = self._ranges.length,
        rangeStrings = [];
    for (; index < count; ++index)
        rangeStrings[index] = CPStringFromRange(self._ranges[index]);
    objj_msgSend(aCoder, "encodeObject:forKey:", rangeStrings, CPIndexSetRangeStringsKey);
}

)]);
}{
var the_class = objj_getClass("CPIndexSet")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPIndexSet\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("copy"), function $CPIndexSet__copy(self, _cmd)
{
    return objj_msgSend(objj_msgSend(objj_msgSend(self, "class"), "alloc"), "initWithIndexSet:", self);
}

), new objj_method(sel_getUid("mutableCopy"), function $CPIndexSet__mutableCopy(self, _cmd)
{
    return objj_msgSend(objj_msgSend(objj_msgSend(self, "class"), "alloc"), "initWithIndexSet:", self);
}

)]);
}{var the_class = objj_allocateClassPair(CPIndexSet, "CPMutableIndexSet"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
}var positionOfIndex = function(ranges, anIndex)
{
    var low = 0,
        high = ranges.length - 1;
    while (low <= high)
    {
        var middle = FLOOR(low + (high - low) / 2),
            range = ranges[middle];
        if (anIndex < range.location)
            high = middle - 1;
        else if (anIndex >= CPMaxRange(range))
            low = middle + 1;
        else
            return middle;
    }    return CPNotFound;
};
var assumedPositionOfIndex = function(ranges, anIndex)
{
    var count = ranges.length;
    if (count <= 0)
        return CPNotFound;
    var low = 0,
        high = count * 2;
    while (low <= high)
    {
        var middle = FLOOR(low + (high - low) / 2),
            position = middle / 2,
            positionFLOOR = FLOOR(position);
        if (position === positionFLOOR)
        {
            if (positionFLOOR - 1 >= 0 && anIndex < CPMaxRange(ranges[positionFLOOR - 1]))
                high = middle - 1;
            else if (positionFLOOR < count && anIndex >= ranges[positionFLOOR].location)
                low = middle + 1;
            else
                return positionFLOOR - 0.5;
        }        else
        {
            var range = ranges[positionFLOOR];
            if (anIndex < range.location)
                high = middle - 1;
            else if (anIndex >= CPMaxRange(range))
                low = middle + 1;
            else
                return positionFLOOR;
        }    }    return CPNotFound;
};
CPUndefinedKeyException = "CPUndefinedKeyException";
CPTargetObjectUserInfoKey = "CPTargetObjectUserInfoKey";
CPUnknownUserInfoKey = "CPUnknownUserInfoKey";
var CPObjectAccessorsForClassKey = "$CPObjectAccessorsForClassKey",
    CPObjectModifiersForClassKey = "$CPObjectModifiersForClassKey";
{
var the_class = objj_getClass("CPObject")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPObject\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("valueForKey:"), function $CPObject__valueForKey_(self, _cmd, aKey)
{
    var theClass = objj_msgSend(self, "class"),
        accessor = nil,
        accessors = theClass[CPObjectAccessorsForClassKey];
    if (!accessors)
        accessors = theClass[CPObjectAccessorsForClassKey] = {};
    if (accessors.hasOwnProperty(aKey))
        accessor = accessors[aKey];
    else
    {
        var string = nil,
            capitalizedKey = (aKey.charAt(0)).toUpperCase() + aKey.substr(1),
            underscoreKey = nil,
            isKey = nil;
        if (objj_msgSend(theClass, "instancesRespondToSelector:", string = sel_getUid("get" + capitalizedKey)) || objj_msgSend(theClass, "instancesRespondToSelector:", string = sel_getUid(aKey)) || objj_msgSend(theClass, "instancesRespondToSelector:", string = sel_getUid(isKey = "is" + capitalizedKey)) || objj_msgSend(theClass, "instancesRespondToSelector:", string = sel_getUid("_get" + capitalizedKey)) || objj_msgSend(theClass, "instancesRespondToSelector:", string = sel_getUid(underscoreKey = "_" + aKey)) || objj_msgSend(theClass, "instancesRespondToSelector:", string = sel_getUid("_" + isKey)))
            accessor = accessors[aKey] = [0, string];
        else if (objj_msgSend(theClass, "instancesRespondToSelector:", sel_getUid("countOf" + capitalizedKey)))
        {
            if (objj_msgSend(theClass, "instancesRespondToSelector:", sel_getUid("objectIn" + capitalizedKey + "AtIndex:")) || objj_msgSend(theClass, "instancesRespondToSelector:", sel_getUid(aKey + "AtIndexes:")))
                accessor = accessors[aKey] = [1];
            else if (objj_msgSend(theClass, "instancesRespondToSelector:", sel_getUid("enumeratorOf" + capitalizedKey)) && objj_msgSend(theClass, "instancesRespondToSelector:", sel_getUid("memberOf" + capitalizedKey + ":")))
                accessor = accessors[aKey] = [2];
        }
        if (!accessor)
        {
            if (class_getInstanceVariable(theClass, string = underscoreKey) || class_getInstanceVariable(theClass, string = "_" + isKey) || class_getInstanceVariable(theClass, string = aKey) || class_getInstanceVariable(theClass, string = isKey))
                accessor = accessors[aKey] = [3, string];
            else
                accessor = accessors[aKey] = [];
        }
    }
    switch(accessor[0]) {
        case 0:
            return objj_msgSend(self, accessor[1]);
        case 1:
            return objj_msgSend(objj_msgSend(_CPKeyValueCodingArray, "alloc"), "initWithTarget:key:", self, aKey);
        case 2:
            return objj_msgSend(objj_msgSend(_CPKeyValueCodingSet, "alloc"), "initWithTarget:key:", self, aKey);
        case 3:
            if (objj_msgSend(theClass, "accessInstanceVariablesDirectly"))
                return self[accessor[1]];
    }
    return objj_msgSend(self, "valueForUndefinedKey:", aKey);
}

), new objj_method(sel_getUid("valueForKeyPath:"), function $CPObject__valueForKeyPath_(self, _cmd, aKeyPath)
{
    var firstDotIndex = aKeyPath.indexOf(".");
    if (firstDotIndex === CPNotFound)
        return objj_msgSend(self, "valueForKey:", aKeyPath);
    var firstKeyComponent = aKeyPath.substring(0, firstDotIndex),
        remainingKeyPath = aKeyPath.substring(firstDotIndex + 1),
        value = objj_msgSend(self, "valueForKey:", firstKeyComponent);
    return objj_msgSend(value, "valueForKeyPath:", remainingKeyPath);
}

), new objj_method(sel_getUid("dictionaryWithValuesForKeys:"), function $CPObject__dictionaryWithValuesForKeys_(self, _cmd, keys)
{
    var index = 0,
        count = keys.length,
        dictionary = objj_msgSend(CPDictionary, "dictionary");
    for (; index < count; ++index)
    {
        var key = keys[index],
            value = objj_msgSend(self, "valueForKey:", key);
        if (value === nil)
            objj_msgSend(dictionary, "setObject:forKey:", objj_msgSend(CPNull, "null"), key);
        else
            objj_msgSend(dictionary, "setObject:forKey:", value, key);
    }
    return dictionary;
}

), new objj_method(sel_getUid("valueForUndefinedKey:"), function $CPObject__valueForUndefinedKey_(self, _cmd, aKey)
{
    throw new Error(objj_msgSend(self, "_objectDescription") + " is not key value coding-compliant for the key " + aKey);
}

), new objj_method(sel_getUid("setValue:forKeyPath:"), function $CPObject__setValue_forKeyPath_(self, _cmd, aValue, aKeyPath)
{
    if (!aKeyPath)
        aKeyPath = "self";
    var firstDotIndex = aKeyPath.indexOf(".");
    if (firstDotIndex === CPNotFound)
        return objj_msgSend(self, "setValue:forKey:", aValue, aKeyPath);
    var firstKeyComponent = aKeyPath.substring(0, firstDotIndex),
        remainingKeyPath = aKeyPath.substring(firstDotIndex + 1),
        value = objj_msgSend(self, "valueForKey:", firstKeyComponent);
    return objj_msgSend(value, "setValue:forKeyPath:", aValue, remainingKeyPath);
}

), new objj_method(sel_getUid("setValue:forKey:"), function $CPObject__setValue_forKey_(self, _cmd, aValue, aKey)
{
    var theClass = self.isa,
        modifier = nil,
        modifiers = theClass[CPObjectModifiersForClassKey];
    if (!modifiers)
        modifiers = theClass[CPObjectModifiersForClassKey] = {};
    if (modifiers.hasOwnProperty(aKey))
        modifier = modifiers[aKey];
    else
    {
        var string = nil,
            capitalizedKey = (aKey.charAt(0)).toUpperCase() + aKey.substr(1),
            isKey = nil;
        if (objj_msgSend(theClass, "instancesRespondToSelector:", string = sel_getUid("set" + capitalizedKey + ":")) || objj_msgSend(theClass, "instancesRespondToSelector:", string = sel_getUid("_set" + capitalizedKey + ":")))
            modifier = modifiers[aKey] = [0, string];
        else if (class_getInstanceVariable(theClass, string = "_" + aKey) || class_getInstanceVariable(theClass, string = "_" + (isKey = "is" + capitalizedKey)) || class_getInstanceVariable(theClass, string = aKey) || class_getInstanceVariable(theClass, string = isKey))
            modifier = modifiers[aKey] = [1, string];
        else
            modifier = modifiers[aKey] = [];
    }
    switch(modifier[0]) {
        case 0:
            return objj_msgSend(self, modifier[1], aValue);
        case 1:
            if (objj_msgSend(theClass, "accessInstanceVariablesDirectly"))
            {
                objj_msgSend(self, "willChangeValueForKey:", aKey);
                self[modifier[1]] = aValue;
                return objj_msgSend(self, "didChangeValueForKey:", aKey);
            }
    }
    return objj_msgSend(self, "setValue:forUndefinedKey:", aValue, aKey);
}

), new objj_method(sel_getUid("setValuesForKeysWithDictionary:"), function $CPObject__setValuesForKeysWithDictionary_(self, _cmd, keyedValues)
{
    var value,
        key,
        keyEnumerator = objj_msgSend(keyedValues, "keyEnumerator");
    while ((key = objj_msgSend(keyEnumerator, "nextObject")) !== nil)
    {
        value = objj_msgSend(keyedValues, "objectForKey:", key);
        if (value === objj_msgSend(CPNull, "null"))
            objj_msgSend(self, "setValue:forKey:", nil, key);
        else
            objj_msgSend(self, "setValue:forKey:", value, key);
    }
}

), new objj_method(sel_getUid("setValue:forUndefinedKey:"), function $CPObject__setValue_forUndefinedKey_(self, _cmd, aValue, aKey)
{
    throw new Error(objj_msgSend(self, "_objectDescription") + " is not key value coding-compliant for the key " + aKey);
}

), new objj_method(sel_getUid("_objectDescription"), function $CPObject___objectDescription(self, _cmd)
{
    return "<" + objj_msgSend(self, "className") + " 0x" + objj_msgSend(self, "UID") + ">";
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("accessInstanceVariablesDirectly"), function $CPObject__accessInstanceVariablesDirectly(self, _cmd)
{
    return YES;
}

)]);
}{
var the_class = objj_getClass("CPDictionary")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPDictionary\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("valueForKey:"), function $CPDictionary__valueForKey_(self, _cmd, aKey)
{
    if (objj_msgSend(aKey, "hasPrefix:", "@"))
        return objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPDictionary").super_class }, "valueForKey:", aKey.substr(1));
    return objj_msgSend(self, "objectForKey:", aKey);
}

), new objj_method(sel_getUid("setValue:forKey:"), function $CPDictionary__setValue_forKey_(self, _cmd, aValue, aKey)
{
    if (aValue !== nil)
        objj_msgSend(self, "setObject:forKey:", aValue, aKey);
    else
        objj_msgSend(self, "removeObjectForKey:", aKey);
}

)]);
}{
var the_class = objj_getClass("CPNull")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPNull\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("valueForKey:"), function $CPNull__valueForKey_(self, _cmd, aKey)
{
    return self;
}

)]);
}{
var the_class = objj_getClass("CPString")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPString\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("valueForKey:"), function $CPString__valueForKey_(self, _cmd, aKey)
{
    if (aKey.indexOf("@") === 0)
    {
        if (aKey.indexOf(".") !== -1)
            throw new Error("called valueForKey: on an array with a complex key (" + aKey + "). use valueForKeyPath:");
        if (aKey === "@length")
            return self.length;
        if (aKey === "@value")
            return self;
        return nil;
    }
    return nil;
}

)]);
}{var the_class = objj_allocateClassPair(CPArray, "_CPKeyValueCodingArray"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_target"), new objj_ivar("_countOfSelector"), new objj_ivar("_objectInAtIndexSelector"), new objj_ivar("_atIndexesSelector")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithTarget:key:"), function $_CPKeyValueCodingArray__initWithTarget_key_(self, _cmd, aTarget, aKey)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPKeyValueCodingArray").super_class }, "init");
    if (self)
    {
        var capitalizedKey = (aKey.charAt(0)).toUpperCase() + aKey.substr(1);
        self._target = aTarget;
        self._countOfSelector = CPSelectorFromString("countOf" + capitalizedKey);
        self._objectInAtIndexSelector = CPSelectorFromString("objectIn" + capitalizedKey + "AtIndex:");
        if (!objj_msgSend(self._target, "respondsToSelector:", self._objectInAtIndexSelector))
            self._objectInAtIndexSelector = nil;
        self._atIndexesSelector = CPSelectorFromString(aKey + "AtIndexes:");
        if (!objj_msgSend(self._target, "respondsToSelector:", self._atIndexesSelector))
            self._atIndexesSelector = nil;
    }
    return self;
}

), new objj_method(sel_getUid("count"), function $_CPKeyValueCodingArray__count(self, _cmd)
{
    return objj_msgSend(self._target, self._countOfSelector);
}

), new objj_method(sel_getUid("objectAtIndex:"), function $_CPKeyValueCodingArray__objectAtIndex_(self, _cmd, anIndex)
{
    if (self._objectInAtIndexSelector)
        return objj_msgSend(self._target, self._objectInAtIndexSelector, anIndex);
    return (objj_msgSend(self._target, self._atIndexesSelector, objj_msgSend(CPIndexSet, "indexSetWithIndex:", anIndex)))[0];
}

), new objj_method(sel_getUid("objectsAtIndexes:"), function $_CPKeyValueCodingArray__objectsAtIndexes_(self, _cmd, indexes)
{
    if (self._atIndexesSelector)
        return objj_msgSend(self._target, self._atIndexesSelector, indexes);
    return objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPKeyValueCodingArray").super_class }, "objectsAtIndexes:", indexes);
}

), new objj_method(sel_getUid("classForCoder"), function $_CPKeyValueCodingArray__classForCoder(self, _cmd)
{
    return objj_msgSend(CPArray, "class");
}

), new objj_method(sel_getUid("copy"), function $_CPKeyValueCodingArray__copy(self, _cmd)
{
    return objj_msgSend(CPArray, "arrayWithArray:", self);
}

)]);
}{var the_class = objj_allocateClassPair(CPSet, "_CPKeyValueCodingSet"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_target"), new objj_ivar("_countOfSelector"), new objj_ivar("_enumeratorOfSelector"), new objj_ivar("_memberOfSelector")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithObjects:count:"), function $_CPKeyValueCodingSet__initWithObjects_count_(self, _cmd, objects, aCount)
{
    return objj_msgSend(objj_msgSend(CPSet, "alloc"), "initWithObjects:count:", objects, aCount);
}

), new objj_method(sel_getUid("initWithTarget:key:"), function $_CPKeyValueCodingSet__initWithTarget_key_(self, _cmd, aTarget, aKey)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPKeyValueCodingSet").super_class }, "initWithObjects:count:", nil, 0);
    if (self)
    {
        var capitalizedKey = (aKey.charAt(0)).toUpperCase() + aKey.substr(1);
        self._target = aTarget;
        self._countOfSelector = CPSelectorFromString("countOf" + capitalizedKey);
        self._enumeratorOfSelector = CPSelectorFromString("enumeratorOf" + capitalizedKey);
        self._memberOfSelector = CPSelectorFromString("memberOf" + capitalizedKey + ":");
    }
    return self;
}

), new objj_method(sel_getUid("count"), function $_CPKeyValueCodingSet__count(self, _cmd)
{
    return objj_msgSend(self._target, self._countOfSelector);
}

), new objj_method(sel_getUid("objectEnumerator"), function $_CPKeyValueCodingSet__objectEnumerator(self, _cmd)
{
    return objj_msgSend(self._target, self._enumeratorOfSelector);
}

), new objj_method(sel_getUid("member:"), function $_CPKeyValueCodingSet__member_(self, _cmd, anObject)
{
    return objj_msgSend(self._target, self._memberOfSelector, anObject);
}

), new objj_method(sel_getUid("classForCoder"), function $_CPKeyValueCodingSet__classForCoder(self, _cmd)
{
    return objj_msgSend(CPSet, "class");
}

), new objj_method(sel_getUid("copy"), function $_CPKeyValueCodingSet__copy(self, _cmd)
{
    return objj_msgSend(CPSet, "setWithSet:", self);
}

)]);
}{
var the_class = objj_getClass("CPObject")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPObject\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("willChangeValueForKey:"), function $CPObject__willChangeValueForKey_(self, _cmd, aKey)
{
    if (!aKey)
        return;
    if (!self[KVOProxyKey])
    {
        if (!self._willChangeMessageCounter)
            self._willChangeMessageCounter = new Object();
        if (!self._willChangeMessageCounter[aKey])
            self._willChangeMessageCounter[aKey] = 1;
        else
            self._willChangeMessageCounter[aKey] += 1;
    }
}

), new objj_method(sel_getUid("didChangeValueForKey:"), function $CPObject__didChangeValueForKey_(self, _cmd, aKey)
{
    if (!aKey)
        return;
    if (!self[KVOProxyKey])
    {
        if (self._willChangeMessageCounter && self._willChangeMessageCounter[aKey])
        {
            self._willChangeMessageCounter[aKey] -= 1;
            if (!self._willChangeMessageCounter[aKey])
                delete self._willChangeMessageCounter[aKey];
        }
        else
            objj_msgSend(CPException, "raise:reason:", "CPKeyValueObservingException", "'didChange...' message called without prior call of 'willChange...'");
    }
}

), new objj_method(sel_getUid("willChange:valuesAtIndexes:forKey:"), function $CPObject__willChange_valuesAtIndexes_forKey_(self, _cmd, aChange, indexes, aKey)
{
    if (!aKey)
        return;
    if (!self[KVOProxyKey])
    {
        if (!self._willChangeMessageCounter)
            self._willChangeMessageCounter = new Object();
        if (!self._willChangeMessageCounter[aKey])
            self._willChangeMessageCounter[aKey] = 1;
        else
            self._willChangeMessageCounter[aKey] += 1;
    }
}

), new objj_method(sel_getUid("didChange:valuesAtIndexes:forKey:"), function $CPObject__didChange_valuesAtIndexes_forKey_(self, _cmd, aChange, indexes, aKey)
{
    if (!aKey)
        return;
    if (!self[KVOProxyKey])
    {
        if (self._willChangeMessageCounter && self._willChangeMessageCounter[aKey])
        {
            self._willChangeMessageCounter[aKey] -= 1;
            if (!self._willChangeMessageCounter[aKey])
                delete self._willChangeMessageCounter[aKey];
        }
        else
            objj_msgSend(CPException, "raise:reason:", "CPKeyValueObservingException", "'didChange...' message called without prior call of 'willChange...'");
    }
}

), new objj_method(sel_getUid("willChangeValueForKey:withSetMutation:usingObjects:"), function $CPObject__willChangeValueForKey_withSetMutation_usingObjects_(self, _cmd, aKey, aMutationKind, objects)
{
    if (!aKey)
        return;
    if (!self[KVOProxyKey])
    {
        if (!self._willChangeMessageCounter)
            self._willChangeMessageCounter = new Object();
        if (!self._willChangeMessageCounter[aKey])
            self._willChangeMessageCounter[aKey] = 1;
        else
            self._willChangeMessageCounter[aKey] += 1;
    }
}

), new objj_method(sel_getUid("didChangeValueForKey:withSetMutation:usingObjects:"), function $CPObject__didChangeValueForKey_withSetMutation_usingObjects_(self, _cmd, aKey, aMutationKind, objects)
{
    if (!self[KVOProxyKey])
    {
        if (self._willChangeMessageCounter && self._willChangeMessageCounter[aKey])
        {
            self._willChangeMessageCounter[aKey] -= 1;
            if (!self._willChangeMessageCounter[aKey])
                delete self._willChangeMessageCounter[aKey];
        }
        else
            objj_msgSend(CPException, "raise:reason:", "CPKeyValueObservingException", "'didChange...' message called without prior call of 'willChange...'");
    }
}

), new objj_method(sel_getUid("addObserver:forKeyPath:options:context:"), function $CPObject__addObserver_forKeyPath_options_context_(self, _cmd, anObserver, aPath, options, aContext)
{
    if (!anObserver || !aPath)
        return;
    objj_msgSend(objj_msgSend(_CPKVOProxy, "proxyForObject:", self), "_addObserver:forKeyPath:options:context:", anObserver, aPath, options, aContext);
}

), new objj_method(sel_getUid("removeObserver:forKeyPath:"), function $CPObject__removeObserver_forKeyPath_(self, _cmd, anObserver, aPath)
{
    if (!anObserver || !aPath)
        return;
    objj_msgSend(self[KVOProxyKey], "_removeObserver:forKeyPath:", anObserver, aPath);
}

), new objj_method(sel_getUid("applyChange:toKeyPath:"), function $CPObject__applyChange_toKeyPath_(self, _cmd, aChange, aKeyPath)
{
    var changeKind = objj_msgSend(aChange, "objectForKey:", CPKeyValueChangeKindKey),
        oldValue = objj_msgSend(aChange, "objectForKey:", CPKeyValueChangeOldKey),
        newValue = objj_msgSend(aChange, "objectForKey:", CPKeyValueChangeNewKey);
    if (newValue === objj_msgSend(CPNull, "null"))
        newValue = nil;
    if (changeKind === CPKeyValueChangeSetting)
        return objj_msgSend(self, "setValue:forKeyPath:", newValue, aKeyPath);
    var indexes = objj_msgSend(aChange, "objectForKey:", CPKeyValueChangeIndexesKey);
    if (indexes)
    {
        if (changeKind === CPKeyValueChangeInsertion)
            objj_msgSend(objj_msgSend(self, "mutableArrayValueForKeyPath:", aKeyPath), "insertObjects:atIndexes:", newValue, indexes);
        else if (changeKind === CPKeyValueChangeRemoval)
            objj_msgSend(objj_msgSend(self, "mutableArrayValueForKeyPath:", aKeyPath), "removeObjectsAtIndexes:", indexes);
        else if (changeKind === CPKeyValueChangeReplacement)
            objj_msgSend(objj_msgSend(self, "mutableArrayValueForKeyPath:", aKeyPath), "replaceObjectAtIndexes:withObjects:", indexes, newValue);
    }
    else
    {
        if (changeKind === CPKeyValueChangeInsertion)
            objj_msgSend(objj_msgSend(self, "mutableSetValueForKeyPath:", aKeyPath), "unionSet:", newValue);
        else if (changeKind === CPKeyValueChangeRemoval)
            objj_msgSend(objj_msgSend(self, "mutableSetValueForKeyPath:", aKeyPath), "minusSet:", oldValue);
        else if (changeKind === CPKeyValueChangeReplacement)
            objj_msgSend(objj_msgSend(self, "mutableSetValueForKeyPath:", aKeyPath), "setSet:", newValue);
    }
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("automaticallyNotifiesObserversForKey:"), function $CPObject__automaticallyNotifiesObserversForKey_(self, _cmd, aKey)
{
    var capitalizedKey = (aKey.charAt(0)).toUpperCase() + aKey.substring(1),
        selector = "automaticallyNotifiesObserversOf" + capitalizedKey;
    if (objj_msgSend(objj_msgSend(self, "class"), "respondsToSelector:", selector))
        return objj_msgSend(objj_msgSend(self, "class"), selector);
    return YES;
}

), new objj_method(sel_getUid("keyPathsForValuesAffectingValueForKey:"), function $CPObject__keyPathsForValuesAffectingValueForKey_(self, _cmd, aKey)
{
    var capitalizedKey = (aKey.charAt(0)).toUpperCase() + aKey.substring(1),
        selector = "keyPathsForValuesAffecting" + capitalizedKey;
    if (objj_msgSend(objj_msgSend(self, "class"), "respondsToSelector:", selector))
        return objj_msgSend(objj_msgSend(self, "class"), selector);
    return objj_msgSend(CPSet, "set");
}

)]);
}{
var the_class = objj_getClass("CPDictionary")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPDictionary\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("inverseChangeDictionary"), function $CPDictionary__inverseChangeDictionary(self, _cmd)
{
    var inverseChangeDictionary = objj_msgSend(self, "mutableCopy"),
        changeKind = objj_msgSend(self, "objectForKey:", CPKeyValueChangeKindKey);
    if (changeKind === CPKeyValueChangeSetting || changeKind === CPKeyValueChangeReplacement)
    {
        objj_msgSend(inverseChangeDictionary, "setObject:forKey:", objj_msgSend(self, "objectForKey:", CPKeyValueChangeOldKey), CPKeyValueChangeNewKey);
        objj_msgSend(inverseChangeDictionary, "setObject:forKey:", objj_msgSend(self, "objectForKey:", CPKeyValueChangeNewKey), CPKeyValueChangeOldKey);
    }
    else if (changeKind === CPKeyValueChangeInsertion)
    {
        objj_msgSend(inverseChangeDictionary, "setObject:forKey:", CPKeyValueChangeRemoval, CPKeyValueChangeKindKey);
        objj_msgSend(inverseChangeDictionary, "setObject:forKey:", objj_msgSend(self, "objectForKey:", CPKeyValueChangeNewKey), CPKeyValueChangeOldKey);
        objj_msgSend(inverseChangeDictionary, "removeObjectForKey:", CPKeyValueChangeNewKey);
    }
    else if (changeKind === CPKeyValueChangeRemoval)
    {
        objj_msgSend(inverseChangeDictionary, "setObject:forKey:", CPKeyValueChangeInsertion, CPKeyValueChangeKindKey);
        objj_msgSend(inverseChangeDictionary, "setObject:forKey:", objj_msgSend(self, "objectForKey:", CPKeyValueChangeOldKey), CPKeyValueChangeNewKey);
        objj_msgSend(inverseChangeDictionary, "removeObjectForKey:", CPKeyValueChangeOldKey);
    }
    return inverseChangeDictionary;
}

)]);
}CPKeyValueObservingOptionNew = 1 << 0;
CPKeyValueObservingOptionOld = 1 << 1;
CPKeyValueObservingOptionInitial = 1 << 2;
CPKeyValueObservingOptionPrior = 1 << 3;
CPKeyValueChangeKindKey = "CPKeyValueChangeKindKey";
CPKeyValueChangeNewKey = "CPKeyValueChangeNewKey";
CPKeyValueChangeOldKey = "CPKeyValueChangeOldKey";
CPKeyValueChangeIndexesKey = "CPKeyValueChangeIndexesKey";
CPKeyValueChangeNotificationIsPriorKey = "CPKeyValueChangeNotificationIsPriorKey";
CPKeyValueChangeSetting = 1;
CPKeyValueChangeInsertion = 2;
CPKeyValueChangeRemoval = 3;
CPKeyValueChangeReplacement = 4;
CPKeyValueUnionSetMutation = 1;
CPKeyValueMinusSetMutation = 2;
CPKeyValueIntersectSetMutation = 3;
CPKeyValueSetSetMutation = 4;
_CPKeyValueChangeSetMutationObjectsKey = "_CPKeyValueChangeSetMutationObjectsKey";
_CPKeyValueChangeSetMutationKindKey = "_CPKeyValueChangeSetMutationKindKey";
_CPKeyValueChangeSetMutationNewValueKey = "_CPKeyValueChangeSetMutationNewValueKey";
var _changeKindForSetMutationKind = function(mutationKind)
{
    switch(mutationKind) {
        case CPKeyValueUnionSetMutation:
            return CPKeyValueChangeInsertion;
        case CPKeyValueMinusSetMutation:
            return CPKeyValueChangeRemoval;
        case CPKeyValueIntersectSetMutation:
            return CPKeyValueChangeRemoval;
        case CPKeyValueSetSetMutation:
            return CPKeyValueChangeReplacement;
    }
};
var kvoNewAndOld = CPKeyValueObservingOptionNew | CPKeyValueObservingOptionOld,
    DependentKeysKey = "$KVODEPENDENT",
    KVOProxyKey = "$KVOPROXY";
{var the_class = objj_allocateClassPair(CPObject, "_CPKVOProxy"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_targetObject"), new objj_ivar("_nativeClass"), new objj_ivar("_changesForKey"), new objj_ivar("_nestingForKey"), new objj_ivar("_observersForKey"), new objj_ivar("_observersForKeyLength"), new objj_ivar("_replacedKeys"), new objj_ivar("_adding")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("adding"), function $_CPKVOProxy__adding(self, _cmd)
{
    return self._adding;
}

), new objj_method(sel_getUid("setAdding:"), function $_CPKVOProxy__setAdding_(self, _cmd, newValue)
{
    self._adding = newValue;
}

), new objj_method(sel_getUid("initWithTarget:"), function $_CPKVOProxy__initWithTarget_(self, _cmd, aTarget)
{
    if (self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPKVOProxy").super_class }, "init"))
    {
        self._targetObject = aTarget;
        self._nativeClass = objj_msgSend(aTarget, "class");
        self._observersForKey = {};
        self._changesForKey = {};
        self._nestingForKey = {};
        self._observersForKeyLength = 0;
        objj_msgSend(self, "_replaceClass");
        aTarget[KVOProxyKey] = self;
    }
    return self;
}

), new objj_method(sel_getUid("_replaceClass"), function $_CPKVOProxy___replaceClass(self, _cmd)
{
    var currentClass = self._nativeClass,
        kvoClassName = "$KVO_" + class_getName(self._nativeClass),
        existingKVOClass = objj_lookUpClass(kvoClassName);
    if (existingKVOClass)
    {
        self._targetObject.isa = existingKVOClass;
        self._replacedKeys = existingKVOClass._replacedKeys;
        return;
    }
    var kvoClass = objj_allocateClassPair(currentClass, kvoClassName);
    objj_registerClassPair(kvoClass);
    self._replacedKeys = objj_msgSend(CPSet, "set");
    kvoClass._replacedKeys = self._replacedKeys;
    var methods = class_copyMethodList(_CPKVOModelSubclass);
    if (objj_msgSend(self._targetObject, "isKindOfClass:", objj_msgSend(CPDictionary, "class")))
        methods = methods.concat(class_copyMethodList(_CPKVOModelDictionarySubclass));
    class_addMethods(kvoClass, methods);
    self._targetObject.isa = kvoClass;
}

), new objj_method(sel_getUid("_replaceModifiersForKey:"), function $_CPKVOProxy___replaceModifiersForKey_(self, _cmd, aKey)
{
    if (objj_msgSend(self._replacedKeys, "containsObject:", aKey) || !objj_msgSend(self._nativeClass, "automaticallyNotifiesObserversForKey:", aKey))
        return;
    objj_msgSend(self._replacedKeys, "addObject:", aKey);
    var theClass = self._nativeClass,
        KVOClass = self._targetObject.isa,
        capitalizedKey = (aKey.charAt(0)).toUpperCase() + aKey.substring(1);
    var setKey_selector = sel_getUid("set" + capitalizedKey + ":"),
        setKey_method = class_getInstanceMethod(theClass, setKey_selector);
    if (setKey_method)
    {
        var setKey_method_imp = setKey_method.method_imp;
        class_addMethod(KVOClass, setKey_selector,         function(self, _cmd, anObject)
        {
            objj_msgSend(self, "willChangeValueForKey:", aKey);
            setKey_method_imp(self, _cmd, anObject);
            objj_msgSend(self, "didChangeValueForKey:", aKey);
        }, "");
    }
    var _setKey_selector = sel_getUid("_set" + capitalizedKey + ":"),
        _setKey_method = class_getInstanceMethod(theClass, _setKey_selector);
    if (_setKey_method)
    {
        var _setKey_method_imp = _setKey_method.method_imp;
        class_addMethod(KVOClass, _setKey_selector,         function(self, _cmd, anObject)
        {
            objj_msgSend(self, "willChangeValueForKey:", aKey);
            _setKey_method_imp(self, _cmd, anObject);
            objj_msgSend(self, "didChangeValueForKey:", aKey);
        }, "");
    }
    var insertObject_inKeyAtIndex_selector = sel_getUid("insertObject:in" + capitalizedKey + "AtIndex:"),
        insertObject_inKeyAtIndex_method = class_getInstanceMethod(theClass, insertObject_inKeyAtIndex_selector),
        insertKey_atIndexes_selector = sel_getUid("insert" + capitalizedKey + ":atIndexes:"),
        insertKey_atIndexes_method = class_getInstanceMethod(theClass, insertKey_atIndexes_selector),
        removeObjectFromKeyAtIndex_selector = sel_getUid("removeObjectFrom" + capitalizedKey + "AtIndex:"),
        removeObjectFromKeyAtIndex_method = class_getInstanceMethod(theClass, removeObjectFromKeyAtIndex_selector),
        removeKeyAtIndexes_selector = sel_getUid("remove" + capitalizedKey + "AtIndexes:"),
        removeKeyAtIndexes_method = class_getInstanceMethod(theClass, removeKeyAtIndexes_selector);
    if ((insertObject_inKeyAtIndex_method || insertKey_atIndexes_method) && (removeObjectFromKeyAtIndex_method || removeKeyAtIndexes_method))
    {
        if (insertObject_inKeyAtIndex_method)
        {
            var insertObject_inKeyAtIndex_method_imp = insertObject_inKeyAtIndex_method.method_imp;
            class_addMethod(KVOClass, insertObject_inKeyAtIndex_selector,             function(self, _cmd, anObject, anIndex)
            {
                objj_msgSend(self, "willChange:valuesAtIndexes:forKey:", CPKeyValueChangeInsertion, objj_msgSend(CPIndexSet, "indexSetWithIndex:", anIndex), aKey);
                insertObject_inKeyAtIndex_method_imp(self, _cmd, anObject, anIndex);
                objj_msgSend(self, "didChange:valuesAtIndexes:forKey:", CPKeyValueChangeInsertion, objj_msgSend(CPIndexSet, "indexSetWithIndex:", anIndex), aKey);
            }, "");
        }
        if (insertKey_atIndexes_method)
        {
            var insertKey_atIndexes_method_imp = insertKey_atIndexes_method.method_imp;
            class_addMethod(KVOClass, insertKey_atIndexes_selector,             function(self, _cmd, objects, indexes)
            {
                objj_msgSend(self, "willChange:valuesAtIndexes:forKey:", CPKeyValueChangeInsertion, objj_msgSend(indexes, "copy"), aKey);
                insertKey_atIndexes_method_imp(self, _cmd, objects, indexes);
                objj_msgSend(self, "didChange:valuesAtIndexes:forKey:", CPKeyValueChangeInsertion, objj_msgSend(indexes, "copy"), aKey);
            }, "");
        }
        if (removeObjectFromKeyAtIndex_method)
        {
            var removeObjectFromKeyAtIndex_method_imp = removeObjectFromKeyAtIndex_method.method_imp;
            class_addMethod(KVOClass, removeObjectFromKeyAtIndex_selector,             function(self, _cmd, anIndex)
            {
                objj_msgSend(self, "willChange:valuesAtIndexes:forKey:", CPKeyValueChangeRemoval, objj_msgSend(CPIndexSet, "indexSetWithIndex:", anIndex), aKey);
                removeObjectFromKeyAtIndex_method_imp(self, _cmd, anIndex);
                objj_msgSend(self, "didChange:valuesAtIndexes:forKey:", CPKeyValueChangeRemoval, objj_msgSend(CPIndexSet, "indexSetWithIndex:", anIndex), aKey);
            }, "");
        }
        if (removeKeyAtIndexes_method)
        {
            var removeKeyAtIndexes_method_imp = removeKeyAtIndexes_method.method_imp;
            class_addMethod(KVOClass, removeKeyAtIndexes_selector,             function(self, _cmd, indexes)
            {
                objj_msgSend(self, "willChange:valuesAtIndexes:forKey:", CPKeyValueChangeRemoval, objj_msgSend(indexes, "copy"), aKey);
                removeKeyAtIndexes_method_imp(self, _cmd, indexes);
                objj_msgSend(self, "didChange:valuesAtIndexes:forKey:", CPKeyValueChangeRemoval, objj_msgSend(indexes, "copy"), aKey);
            }, "");
        }
        var replaceObjectInKeyAtIndex_withObject_selector = sel_getUid("replaceObjectIn" + capitalizedKey + "AtIndex:withObject:"),
            replaceObjectInKeyAtIndex_withObject_method = class_getInstanceMethod(theClass, replaceObjectInKeyAtIndex_withObject_selector);
        if (replaceObjectInKeyAtIndex_withObject_method)
        {
            var replaceObjectInKeyAtIndex_withObject_method_imp = replaceObjectInKeyAtIndex_withObject_method.method_imp;
            class_addMethod(KVOClass, replaceObjectInKeyAtIndex_withObject_selector,             function(self, _cmd, anIndex, anObject)
            {
                objj_msgSend(self, "willChange:valuesAtIndexes:forKey:", CPKeyValueChangeReplacement, objj_msgSend(CPIndexSet, "indexSetWithIndex:", anIndex), aKey);
                replaceObjectInKeyAtIndex_withObject_method_imp(self, _cmd, anIndex, anObject);
                objj_msgSend(self, "didChange:valuesAtIndexes:forKey:", CPKeyValueChangeReplacement, objj_msgSend(CPIndexSet, "indexSetWithIndex:", anIndex), aKey);
            }, "");
        }
        var replaceKeyAtIndexes_withKey_selector = sel_getUid("replace" + capitalizedKey + "AtIndexes:with" + capitalizedKey + ":"),
            replaceKeyAtIndexes_withKey_method = class_getInstanceMethod(theClass, replaceKeyAtIndexes_withKey_selector);
        if (replaceKeyAtIndexes_withKey_method)
        {
            var replaceKeyAtIndexes_withKey_method_imp = replaceKeyAtIndexes_withKey_method.method_imp;
            class_addMethod(KVOClass, replaceKeyAtIndexes_withKey_selector,             function(self, _cmd, indexes, objects)
            {
                objj_msgSend(self, "willChange:valuesAtIndexes:forKey:", CPKeyValueChangeReplacement, objj_msgSend(indexes, "copy"), aKey);
                replaceObjectInKeyAtIndex_withObject_method_imp(self, _cmd, indexes, objects);
                objj_msgSend(self, "didChange:valuesAtIndexes:forKey:", CPKeyValueChangeReplacement, objj_msgSend(indexes, "copy"), aKey);
            }, "");
        }
    }
    var addKeyObject_selector = sel_getUid("add" + capitalizedKey + "Object:"),
        addKeyObject_method = class_getInstanceMethod(theClass, addKeyObject_selector),
        addKey_selector = sel_getUid("add" + capitalizedKey + ":"),
        addKey_method = class_getInstanceMethod(theClass, addKey_selector),
        removeKeyObject_selector = sel_getUid("remove" + capitalizedKey + "Object:"),
        removeKeyObject_method = class_getInstanceMethod(theClass, removeKeyObject_selector),
        removeKey_selector = sel_getUid("remove" + capitalizedKey + ":"),
        removeKey_method = class_getInstanceMethod(theClass, removeKey_selector);
    if ((addKeyObject_method || addKey_method) && (removeKeyObject_method || removeKey_method))
    {
        if (addKeyObject_method)
        {
            var addKeyObject_method_imp = addKeyObject_method.method_imp;
            class_addMethod(KVOClass, addKeyObject_selector,             function(self, _cmd, anObject)
            {
                objj_msgSend(self, "willChangeValueForKey:withSetMutation:usingObjects:", aKey, CPKeyValueUnionSetMutation, objj_msgSend(CPSet, "setWithObject:", anObject));
                addKeyObject_method_imp(self, _cmd, anObject);
                objj_msgSend(self, "didChangeValueForKey:withSetMutation:usingObjects:", aKey, CPKeyValueUnionSetMutation, objj_msgSend(CPSet, "setWithObject:", anObject));
            }, "");
        }
        if (addKey_method)
        {
            var addKey_method_imp = addKey_method.method_imp;
            class_addMethod(KVOClass, addKey_selector,             function(self, _cmd, objects)
            {
                objj_msgSend(self, "willChangeValueForKey:withSetMutation:usingObjects:", aKey, CPKeyValueUnionSetMutation, objj_msgSend(objects, "copy"));
                addKey_method_imp(self, _cmd, objects);
                objj_msgSend(self, "didChangeValueForKey:withSetMutation:usingObjects:", aKey, CPKeyValueUnionSetMutation, objj_msgSend(objects, "copy"));
            }, "");
        }
        if (removeKeyObject_method)
        {
            var removeKeyObject_method_imp = removeKeyObject_method.method_imp;
            class_addMethod(KVOClass, removeKeyObject_selector,             function(self, _cmd, anObject)
            {
                objj_msgSend(self, "willChangeValueForKey:withSetMutation:usingObjects:", aKey, CPKeyValueMinusSetMutation, objj_msgSend(CPSet, "setWithObject:", anObject));
                removeKeyObject_method_imp(self, _cmd, anObject);
                objj_msgSend(self, "didChangeValueForKey:withSetMutation:usingObjects:", aKey, CPKeyValueMinusSetMutation, objj_msgSend(CPSet, "setWithObject:", anObject));
            }, "");
        }
        if (removeKey_method)
        {
            var removeKey_method_imp = removeKey_method.method_imp;
            class_addMethod(KVOClass, removeKey_selector,             function(self, _cmd, objects)
            {
                objj_msgSend(self, "willChangeValueForKey:withSetMutation:usingObjects:", aKey, CPKeyValueMinusSetMutation, objj_msgSend(objects, "copy"));
                removeKey_method_imp(self, _cmd, objects);
                objj_msgSend(self, "didChangeValueForKey:withSetMutation:usingObjects:", aKey, CPKeyValueMinusSetMutation, objj_msgSend(objects, "copy"));
            }, "");
        }
        var intersectKey_selector = sel_getUid("intersect" + capitalizedKey + ":"),
            intersectKey_method = class_getInstanceMethod(theClass, intersectKey_selector);
        if (intersectKey_method)
        {
            var intersectKey_method_imp = intersectKey_method.method_imp;
            class_addMethod(KVOClass, intersectKey_selector,             function(self, _cmd, aSet)
            {
                objj_msgSend(self, "willChangeValueForKey:withSetMutation:usingObjects:", aKey, CPKeyValueIntersectSetMutation, objj_msgSend(aSet, "copy"));
                intersectKey_method_imp(self, _cmd, aSet);
                objj_msgSend(self, "didChangeValueForKey:withSetMutation:usingObjects:", aKey, CPKeyValueIntersectSetMutation, objj_msgSend(aSet, "copy"));
            }, "");
        }
    }
    var affectingKeys = objj_msgSend(objj_msgSend(self._nativeClass, "keyPathsForValuesAffectingValueForKey:", aKey), "allObjects"),
        affectingKeysCount = affectingKeys ? affectingKeys.length : 0;
    if (!affectingKeysCount)
        return;
    var dependentKeysForClass = self._nativeClass[DependentKeysKey];
    if (!dependentKeysForClass)
    {
        dependentKeysForClass = {};
        self._nativeClass[DependentKeysKey] = dependentKeysForClass;
    }
    while (affectingKeysCount--)
    {
        var affectingKey = affectingKeys[affectingKeysCount],
            affectedKeys = dependentKeysForClass[affectingKey];
        if (!affectedKeys)
        {
            affectedKeys = objj_msgSend(CPSet, "new");
            dependentKeysForClass[affectingKey] = affectedKeys;
        }
        objj_msgSend(affectedKeys, "addObject:", aKey);
        if (affectingKey.indexOf(".") !== -1)
            objj_msgSend(self._targetObject, "addObserver:forKeyPath:options:context:", self, affectingKey, CPKeyValueObservingOptionPrior | kvoNewAndOld, nil);
        else
            objj_msgSend(self, "_replaceModifiersForKey:", affectingKey);
    }
}

), new objj_method(sel_getUid("observeValueForKeyPath:ofObject:change:context:"), function $_CPKVOProxy__observeValueForKeyPath_ofObject_change_context_(self, _cmd, theKeyPath, theObject, theChanges, theContext)
{
    var dependentKeysForClass = self._nativeClass[DependentKeysKey],
        dependantKeys = objj_msgSend(dependentKeysForClass[theKeyPath], "allObjects"),
        isBeforeFlag = !!objj_msgSend(theChanges, "objectForKey:", CPKeyValueChangeNotificationIsPriorKey);
    for (var i = 0; i < objj_msgSend(dependantKeys, "count"); i++)
    {
        var dependantKey = objj_msgSend(dependantKeys, "objectAtIndex:", i);
        objj_msgSend(self, "_sendNotificationsForKey:changeOptions:isBefore:", dependantKey, theChanges, isBeforeFlag);
    }
}

), new objj_method(sel_getUid("_addObserver:forKeyPath:options:context:"), function $_CPKVOProxy___addObserver_forKeyPath_options_context_(self, _cmd, anObserver, aPath, options, aContext)
{
    if (!anObserver)
        return;
    var forwarder = nil;
    if (aPath.indexOf('.') !== CPNotFound && aPath.charAt(0) !== '@')
        forwarder = objj_msgSend(objj_msgSend(_CPKVOForwardingObserver, "alloc"), "initWithKeyPath:object:observer:options:context:", aPath, self._targetObject, anObserver, options, aContext);
    else
        objj_msgSend(self, "_replaceModifiersForKey:", aPath);
    var observers = self._observersForKey[aPath];
    if (!observers)
    {
        observers = objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "init");
        self._observersForKey[aPath] = observers;
        self._observersForKeyLength++;
    }
    objj_msgSend(observers, "setObject:forKey:", _CPKVOInfoMake(anObserver, options, aContext, forwarder), objj_msgSend(anObserver, "UID"));
    if (options & CPKeyValueObservingOptionInitial)
    {
        var newValue = objj_msgSend(self._targetObject, "valueForKeyPath:", aPath);
        if (newValue === nil || newValue === undefined)
            newValue = objj_msgSend(CPNull, "null");
        var changes = objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", newValue, CPKeyValueChangeNewKey);
        objj_msgSend(anObserver, "observeValueForKeyPath:ofObject:change:context:", aPath, self._targetObject, changes, aContext);
    }
}

), new objj_method(sel_getUid("_removeObserver:forKeyPath:"), function $_CPKVOProxy___removeObserver_forKeyPath_(self, _cmd, anObserver, aPath)
{
    var observers = self._observersForKey[aPath];
    if (!observers)
    {
        if (!self._adding)
            CPLog.warn("Cannot remove an observer %@ for the key path \"%@\" from %@ because it is not registered as an observer.", self._targetObject, aPath, anObserver);
        return;
    }
    if (aPath.indexOf('.') != CPNotFound)
    {
        var observer = objj_msgSend(observers, "objectForKey:", objj_msgSend(anObserver, "UID")),
            forwarder = observer ? observer.forwarder : nil;
        objj_msgSend(forwarder, "finalize");
    }
    objj_msgSend(observers, "removeObjectForKey:", objj_msgSend(anObserver, "UID"));
    if (!objj_msgSend(observers, "count"))
    {
        self._observersForKeyLength--;
        delete self._observersForKey[aPath];
    }
    if (!self._observersForKeyLength)
    {
        self._targetObject.isa = self._nativeClass;
        delete self._targetObject[KVOProxyKey];
    }
}

), new objj_method(sel_getUid("_sendNotificationsForKey:changeOptions:isBefore:"), function $_CPKVOProxy___sendNotificationsForKey_changeOptions_isBefore_(self, _cmd, aKey, changeOptions, isBefore)
{
    var changes = self._changesForKey[aKey];
    if (isBefore)
    {
        if (changes)
        {
            var level = self._nestingForKey[aKey];
            if (!level)
                objj_msgSend(CPException, "raise:reason:", CPInternalInconsistencyException, "self._changesForKey without self._nestingForKey");
            self._nestingForKey[aKey] = level + 1;
            return;
        }
        self._nestingForKey[aKey] = 1;
        changes = changeOptions;
        var indexes = objj_msgSend(changes, "objectForKey:", CPKeyValueChangeIndexesKey),
            setMutationKind = changes[_CPKeyValueChangeSetMutationKindKey];
        if (setMutationKind)
        {
            var setMutationObjects = objj_msgSend(changes[_CPKeyValueChangeSetMutationObjectsKey], "copy"),
                setExistingObjects = objj_msgSend(objj_msgSend(self._targetObject, "valueForKey:", aKey), "copy");
            if (setMutationKind == CPKeyValueMinusSetMutation)
            {
                objj_msgSend(setExistingObjects, "intersectSet:", setMutationObjects);
                objj_msgSend(changes, "setValue:forKey:", setExistingObjects, CPKeyValueChangeOldKey);
            }
            else if (setMutationKind === CPKeyValueIntersectSetMutation || setMutationKind === CPKeyValueSetSetMutation)
            {
                objj_msgSend(setExistingObjects, "minusSet:", setMutationObjects);
                objj_msgSend(changes, "setValue:forKey:", setExistingObjects, CPKeyValueChangeOldKey);
            }
            if (setMutationKind === CPKeyValueUnionSetMutation || setMutationKind === CPKeyValueSetSetMutation)
            {
                objj_msgSend(setMutationObjects, "minusSet:", setExistingObjects);
                changes[_CPKeyValueChangeSetMutationNewValueKey] = setMutationObjects;
            }
        }
        else if (indexes)
        {
            var type = objj_msgSend(changes, "objectForKey:", CPKeyValueChangeKindKey);
            if (type === CPKeyValueChangeReplacement || type === CPKeyValueChangeRemoval)
            {
                var newValues = objj_msgSend(objj_msgSend(self._targetObject, "mutableArrayValueForKeyPath:", aKey), "objectsAtIndexes:", indexes);
                objj_msgSend(changes, "setValue:forKey:", newValues, CPKeyValueChangeOldKey);
            }
        }
        else
        {
            var oldValue = objj_msgSend(self._targetObject, "valueForKey:", aKey);
            if (oldValue === nil || oldValue === undefined)
                oldValue = objj_msgSend(CPNull, "null");
            objj_msgSend(changes, "setObject:forKey:", oldValue, CPKeyValueChangeOldKey);
        }
        objj_msgSend(changes, "setObject:forKey:", 1, CPKeyValueChangeNotificationIsPriorKey);
        self._changesForKey[aKey] = changes;
    }
    else
    {
        var level = self._nestingForKey[aKey];
        if (!changes || !level)
        {
            if (self._targetObject._willChangeMessageCounter && self._targetObject._willChangeMessageCounter[aKey])
            {
                self._targetObject._willChangeMessageCounter[aKey] -= 1;
                if (!self._targetObject._willChangeMessageCounter[aKey])
                    delete self._targetObject._willChangeMessageCounter[aKey];
                return;
            }
            else
                objj_msgSend(CPException, "raise:reason:", "CPKeyValueObservingException", "'didChange...' message called without prior call of 'willChange...'");
        }
        self._nestingForKey[aKey] = level - 1;
        if (level - 1 > 0)
        {
            return;
        }
        delete self._nestingForKey[aKey];
        objj_msgSend(changes, "removeObjectForKey:", CPKeyValueChangeNotificationIsPriorKey);
        var indexes = objj_msgSend(changes, "objectForKey:", CPKeyValueChangeIndexesKey),
            setMutationKind = changes[_CPKeyValueChangeSetMutationKindKey];
        if (setMutationKind)
        {
            var newValue = changes[_CPKeyValueChangeSetMutationNewValueKey];
            objj_msgSend(changes, "setValue:forKey:", newValue, CPKeyValueChangeNewKey);
            delete changes[_CPKeyValueChangeSetMutationNewValueKey];
            delete changes[_CPKeyValueChangeSetMutationObjectsKey];
            delete changes[_CPKeyValueChangeSetMutationKindKey];
        }
        else if (indexes)
        {
            var type = objj_msgSend(changes, "objectForKey:", CPKeyValueChangeKindKey);
            if (type == CPKeyValueChangeReplacement || type == CPKeyValueChangeInsertion)
            {
                var newValues = objj_msgSend(objj_msgSend(self._targetObject, "mutableArrayValueForKeyPath:", aKey), "objectsAtIndexes:", indexes);
                objj_msgSend(changes, "setValue:forKey:", newValues, CPKeyValueChangeNewKey);
            }
        }
        else
        {
            var newValue = objj_msgSend(self._targetObject, "valueForKey:", aKey);
            if (newValue === nil || newValue === undefined)
                newValue = objj_msgSend(CPNull, "null");
            objj_msgSend(changes, "setObject:forKey:", newValue, CPKeyValueChangeNewKey);
        }
        delete self._changesForKey[aKey];
    }
    var observers = objj_msgSend(self._observersForKey[aKey], "allValues"),
        count = observers ? observers.length : 0;
    while (count--)
    {
        var observerInfo = observers[count];
        if (!isBefore || observerInfo.options & CPKeyValueObservingOptionPrior)
            objj_msgSend(observerInfo.observer, "observeValueForKeyPath:ofObject:change:context:", aKey, self._targetObject, changes, observerInfo.context);
    }
    var dependentKeysMap = self._nativeClass[DependentKeysKey];
    if (!dependentKeysMap)
        return;
    var dependentKeyPaths = objj_msgSend(dependentKeysMap[aKey], "allObjects");
    if (!dependentKeyPaths)
        return;
    var index = 0,
        count = objj_msgSend(dependentKeyPaths, "count");
    for (; index < count; ++index)
    {
        var keyPath = dependentKeyPaths[index];
        objj_msgSend(self, "_sendNotificationsForKey:changeOptions:isBefore:", keyPath, isBefore ? objj_msgSend(changeOptions, "copy") : self._changesForKey[keyPath], isBefore);
    }
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("proxyForObject:"), function $_CPKVOProxy__proxyForObject_(self, _cmd, anObject)
{
    var proxy = anObject[KVOProxyKey];
    if (proxy)
        return proxy;
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithTarget:", anObject);
}

)]);
}{var the_class = objj_allocateClassPair(CPObject, "_CPKVOModelSubclass"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("willChangeValueForKey:"), function $_CPKVOModelSubclass__willChangeValueForKey_(self, _cmd, aKey)
{
    var superClass = objj_msgSend(self, "class"),
        methodSelector = sel_getUid("willChangeValueForKey:"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector, aKey);
    if (!aKey)
        return;
    var changeOptions = objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", CPKeyValueChangeSetting, CPKeyValueChangeKindKey);
    objj_msgSend(objj_msgSend(_CPKVOProxy, "proxyForObject:", self), "_sendNotificationsForKey:changeOptions:isBefore:", aKey, changeOptions, YES);
}

), new objj_method(sel_getUid("didChangeValueForKey:"), function $_CPKVOModelSubclass__didChangeValueForKey_(self, _cmd, aKey)
{
    var superClass = objj_msgSend(self, "class"),
        methodSelector = sel_getUid("didChangeValueForKey:"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector, aKey);
    if (!aKey)
        return;
    objj_msgSend(objj_msgSend(_CPKVOProxy, "proxyForObject:", self), "_sendNotificationsForKey:changeOptions:isBefore:", aKey, nil, NO);
}

), new objj_method(sel_getUid("willChange:valuesAtIndexes:forKey:"), function $_CPKVOModelSubclass__willChange_valuesAtIndexes_forKey_(self, _cmd, change, indexes, aKey)
{
    var superClass = objj_msgSend(self, "class"),
        methodSelector = sel_getUid("willChange:valuesAtIndexes:forKey:"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector, change, indexes, aKey);
    if (!aKey)
        return;
    var changeOptions = objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", change, CPKeyValueChangeKindKey, indexes, CPKeyValueChangeIndexesKey);
    objj_msgSend(objj_msgSend(_CPKVOProxy, "proxyForObject:", self), "_sendNotificationsForKey:changeOptions:isBefore:", aKey, changeOptions, YES);
}

), new objj_method(sel_getUid("didChange:valuesAtIndexes:forKey:"), function $_CPKVOModelSubclass__didChange_valuesAtIndexes_forKey_(self, _cmd, change, indexes, aKey)
{
    var superClass = objj_msgSend(self, "class"),
        methodSelector = sel_getUid("didChange:valuesAtIndexes:forKey:"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector, change, indexes, aKey);
    if (!aKey)
        return;
    objj_msgSend(objj_msgSend(_CPKVOProxy, "proxyForObject:", self), "_sendNotificationsForKey:changeOptions:isBefore:", aKey, nil, NO);
}

), new objj_method(sel_getUid("willChangeValueForKey:withSetMutation:usingObjects:"), function $_CPKVOModelSubclass__willChangeValueForKey_withSetMutation_usingObjects_(self, _cmd, aKey, mutationKind, objects)
{
    var superClass = objj_msgSend(self, "class"),
        methodSelector = sel_getUid("willChangeValueForKey:withSetMutation:usingObjects:"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector, aKey, mutationKind, objects);
    if (!aKey)
        return;
    var changeKind = _changeKindForSetMutationKind(mutationKind),
        changeOptions = objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", changeKind, CPKeyValueChangeKindKey);
    changeOptions[_CPKeyValueChangeSetMutationObjectsKey] = objects;
    changeOptions[_CPKeyValueChangeSetMutationKindKey] = mutationKind;
    objj_msgSend(objj_msgSend(_CPKVOProxy, "proxyForObject:", self), "_sendNotificationsForKey:changeOptions:isBefore:", aKey, changeOptions, YES);
}

), new objj_method(sel_getUid("didChangeValueForKey:withSetMutation:usingObjects:"), function $_CPKVOModelSubclass__didChangeValueForKey_withSetMutation_usingObjects_(self, _cmd, aKey, mutationKind, objects)
{
    var superClass = objj_msgSend(self, "class"),
        methodSelector = sel_getUid("didChangeValueForKey:withSetMutation:usingObjects:"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector, aKey, mutationKind, objects);
    if (!aKey)
        return;
    objj_msgSend(objj_msgSend(_CPKVOProxy, "proxyForObject:", self), "_sendNotificationsForKey:changeOptions:isBefore:", aKey, nil, NO);
}

), new objj_method(sel_getUid("class"), function $_CPKVOModelSubclass__class(self, _cmd)
{
    return self[KVOProxyKey]._nativeClass;
}

), new objj_method(sel_getUid("superclass"), function $_CPKVOModelSubclass__superclass(self, _cmd)
{
    return objj_msgSend(objj_msgSend(self, "class"), "superclass");
}

), new objj_method(sel_getUid("isKindOfClass:"), function $_CPKVOModelSubclass__isKindOfClass_(self, _cmd, aClass)
{
    return objj_msgSend(objj_msgSend(self, "class"), "isSubclassOfClass:", aClass);
}

), new objj_method(sel_getUid("isMemberOfClass:"), function $_CPKVOModelSubclass__isMemberOfClass_(self, _cmd, aClass)
{
    return objj_msgSend(self, "class") == aClass;
}

), new objj_method(sel_getUid("className"), function $_CPKVOModelSubclass__className(self, _cmd)
{
    return objj_msgSend(self, "class").name;
}

)]);
}{var the_class = objj_allocateClassPair(CPObject, "_CPKVOModelDictionarySubclass"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("removeAllObjects"), function $_CPKVOModelDictionarySubclass__removeAllObjects(self, _cmd)
{
    var keys = objj_msgSend(self, "allKeys"),
        count = objj_msgSend(keys, "count"),
        i = 0;
    for (; i < count; i++)
        objj_msgSend(self, "willChangeValueForKey:", keys[i]);
    var superClass = objj_msgSend(self, "class"),
        methodSelector = sel_getUid("removeAllObjects"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector);
    for (i = 0; i < count; i++)
        objj_msgSend(self, "didChangeValueForKey:", keys[i]);
}

), new objj_method(sel_getUid("removeObjectForKey:"), function $_CPKVOModelDictionarySubclass__removeObjectForKey_(self, _cmd, aKey)
{
    objj_msgSend(self, "willChangeValueForKey:", aKey);
    var superClass = objj_msgSend(self, "class"),
        methodSelector = sel_getUid("removeObjectForKey:"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector, aKey);
    objj_msgSend(self, "didChangeValueForKey:", aKey);
}

), new objj_method(sel_getUid("setObject:forKey:"), function $_CPKVOModelDictionarySubclass__setObject_forKey_(self, _cmd, anObject, aKey)
{
    objj_msgSend(self, "willChangeValueForKey:", aKey);
    var superClass = objj_msgSend(self, "class"),
        methodSelector = sel_getUid("setObject:forKey:"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector, anObject, aKey);
    objj_msgSend(self, "didChangeValueForKey:", aKey);
}

)]);
}{var the_class = objj_allocateClassPair(CPObject, "_CPKVOForwardingObserver"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_object"), new objj_ivar("_observer"), new objj_ivar("_context"), new objj_ivar("_options"), new objj_ivar("_firstPart"), new objj_ivar("_secondPart"), new objj_ivar("_value")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithKeyPath:object:observer:options:context:"), function $_CPKVOForwardingObserver__initWithKeyPath_object_observer_options_context_(self, _cmd, aKeyPath, anObject, anObserver, options, aContext)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPKVOForwardingObserver").super_class }, "init");
    self._context = aContext;
    self._observer = anObserver;
    self._object = anObject;
    self._options = options;
    var dotIndex = aKeyPath.indexOf('.');
    if (dotIndex === CPNotFound)
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "Created _CPKVOForwardingObserver without compound key path: " + aKeyPath);
    self._firstPart = aKeyPath.substring(0, dotIndex);
    self._secondPart = aKeyPath.substring(dotIndex + 1);
    objj_msgSend(self._object, "addObserver:forKeyPath:options:context:", self, self._firstPart, self._options, nil);
    self._value = objj_msgSend(self._object, "valueForKey:", self._firstPart);
    if (self._value)
        objj_msgSend(self._value, "addObserver:forKeyPath:options:context:", self, self._secondPart, self._options, nil);
    return self;
}

), new objj_method(sel_getUid("observeValueForKeyPath:ofObject:change:context:"), function $_CPKVOForwardingObserver__observeValueForKeyPath_ofObject_change_context_(self, _cmd, aKeyPath, anObject, changes, aContext)
{
    if (aKeyPath === self._firstPart)
    {
        var oldValue = objj_msgSend(self._value, "valueForKeyPath:", self._secondPart),
            newValue = objj_msgSend(self._object, "valueForKeyPath:", self._firstPart + "." + self._secondPart),
            pathChanges = objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", newValue ? newValue : objj_msgSend(CPNull, "null"), CPKeyValueChangeNewKey, oldValue ? oldValue : objj_msgSend(CPNull, "null"), CPKeyValueChangeOldKey, CPKeyValueChangeSetting, CPKeyValueChangeKindKey);
        objj_msgSend(self._observer, "observeValueForKeyPath:ofObject:change:context:", self._firstPart + "." + self._secondPart, self._object, pathChanges, self._context);
        if (self._value)
            objj_msgSend(self._value, "removeObserver:forKeyPath:", self, self._secondPart);
        self._value = objj_msgSend(self._object, "valueForKey:", self._firstPart);
        if (self._value)
            objj_msgSend(self._value, "addObserver:forKeyPath:options:context:", self, self._secondPart, self._options, nil);
    }
    else
    {
        objj_msgSend(self._observer, "observeValueForKeyPath:ofObject:change:context:", self._firstPart + "." + aKeyPath, self._object, changes, self._context);
    }
}

), new objj_method(sel_getUid("finalize"), function $_CPKVOForwardingObserver__finalize(self, _cmd)
{
    if (self._value)
        objj_msgSend(self._value, "removeObserver:forKeyPath:", self, self._secondPart);
    objj_msgSend(self._object, "removeObserver:forKeyPath:", self, self._firstPart);
    self._object = nil;
    self._observer = nil;
    self._context = nil;
    self._value = nil;
}

)]);
}var _CPKVOInfoMake = function(anObserver, theOptions, aContext, aForwarder)
{
    return {observer: anObserver, options: theOptions, context: aContext, forwarder: aForwarder};
};
CPDefaultRunLoopMode = "CPDefaultRunLoopMode";
function _CPRunLoopPerformCompare(lhs, rhs)
{
    return objj_msgSend(rhs, "order") - objj_msgSend(lhs, "order");
}
var _CPRunLoopPerformPool = [],
    _CPRunLoopPerformPoolCapacity = 5;
{var the_class = objj_allocateClassPair(CPObject, "_CPRunLoopPerform"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_target"), new objj_ivar("_selector"), new objj_ivar("_argument"), new objj_ivar("_order"), new objj_ivar("_runLoopModes"), new objj_ivar("_isValid")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithSelector:target:argument:order:modes:"), function $_CPRunLoopPerform__initWithSelector_target_argument_order_modes_(self, _cmd, aSelector, aTarget, anArgument, anOrder, modes)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPRunLoopPerform").super_class }, "init");
    if (self)
    {
        self._selector = aSelector;
        self._target = aTarget;
        self._argument = anArgument;
        self._order = anOrder;
        self._runLoopModes = modes;
        self._isValid = YES;
    }
    return self;
}

), new objj_method(sel_getUid("selector"), function $_CPRunLoopPerform__selector(self, _cmd)
{
    return self._selector;
}

), new objj_method(sel_getUid("target"), function $_CPRunLoopPerform__target(self, _cmd)
{
    return self._target;
}

), new objj_method(sel_getUid("argument"), function $_CPRunLoopPerform__argument(self, _cmd)
{
    return self._argument;
}

), new objj_method(sel_getUid("order"), function $_CPRunLoopPerform__order(self, _cmd)
{
    return self._order;
}

), new objj_method(sel_getUid("fireInMode:"), function $_CPRunLoopPerform__fireInMode_(self, _cmd, aRunLoopMode)
{
    if (!self._isValid)
        return YES;
    if (objj_msgSend(self._runLoopModes, "containsObject:", aRunLoopMode))
    {
        objj_msgSend(self._target, "performSelector:withObject:", self._selector, self._argument);
        return YES;
    }
    return NO;
}

), new objj_method(sel_getUid("invalidate"), function $_CPRunLoopPerform__invalidate(self, _cmd)
{
    self._isValid = NO;
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("_poolPerform:"), function $_CPRunLoopPerform___poolPerform_(self, _cmd, aPerform)
{
    if (!aPerform || _CPRunLoopPerformPool.length >= _CPRunLoopPerformPoolCapacity)
        return;
    _CPRunLoopPerformPool.push(aPerform);
}

), new objj_method(sel_getUid("performWithSelector:target:argument:order:modes:"), function $_CPRunLoopPerform__performWithSelector_target_argument_order_modes_(self, _cmd, aSelector, aTarget, anArgument, anOrder, modes)
{
    if (_CPRunLoopPerformPool.length)
    {
        var perform = _CPRunLoopPerformPool.pop();
        perform._target = aTarget;
        perform._selector = aSelector;
        perform._argument = anArgument;
        perform._order = anOrder;
        perform._runLoopModes = modes;
        perform._isValid = YES;
        return perform;
    }
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithSelector:target:argument:order:modes:", aSelector, aTarget, anArgument, anOrder, modes);
}

)]);
}var CPRunLoopLastNativeRunLoop = 0;
var CPMainRunLoop = nil;
{var the_class = objj_allocateClassPair(CPObject, "CPRunLoop"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_runLoopLock"), new objj_ivar("_timersForModes"), new objj_ivar("_nativeTimersForModes"), new objj_ivar("_nextTimerFireDatesForModes"), new objj_ivar("_didAddTimer"), new objj_ivar("_effectiveDate"), new objj_ivar("_orderedPerforms"), new objj_ivar("_runLoopInsuranceTimer")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPRunLoop__init(self, _cmd)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPRunLoop").super_class }, "init");
    if (self)
    {
        self._orderedPerforms = [];
        self._timersForModes = {};
        self._nativeTimersForModes = {};
        self._nextTimerFireDatesForModes = {};
    }
    return self;
}

), new objj_method(sel_getUid("performSelector:target:argument:order:modes:"), function $CPRunLoop__performSelector_target_argument_order_modes_(self, _cmd, aSelector, aTarget, anArgument, anOrder, modes)
{
    var perform = objj_msgSend(_CPRunLoopPerform, "performWithSelector:target:argument:order:modes:", aSelector, aTarget, anArgument, anOrder, modes),
        count = self._orderedPerforms.length;
    while (count--)
        if (anOrder < objj_msgSend(self._orderedPerforms[count], "order"))
            break;
    self._orderedPerforms.splice(count + 1, 0, perform);
}

), new objj_method(sel_getUid("cancelPerformSelector:target:argument:"), function $CPRunLoop__cancelPerformSelector_target_argument_(self, _cmd, aSelector, aTarget, anArgument)
{
    var count = self._orderedPerforms.length;
    while (count--)
    {
        var perform = self._orderedPerforms[count];
        if (objj_msgSend(perform, "selector") === aSelector && objj_msgSend(perform, "target") == aTarget && objj_msgSend(perform, "argument") == anArgument)
            objj_msgSend(self._orderedPerforms[count], "invalidate");
    }
}

), new objj_method(sel_getUid("performSelectors"), function $CPRunLoop__performSelectors(self, _cmd)
{
    objj_msgSend(self, "limitDateForMode:", CPDefaultRunLoopMode);
}

), new objj_method(sel_getUid("addTimer:forMode:"), function $CPRunLoop__addTimer_forMode_(self, _cmd, aTimer, aMode)
{
    if (self._timersForModes[aMode])
        self._timersForModes[aMode].push(aTimer);
    else
        self._timersForModes[aMode] = [aTimer];
    self._didAddTimer = YES;
    if (!aTimer._lastNativeRunLoopsForModes)
        aTimer._lastNativeRunLoopsForModes = {};
    aTimer._lastNativeRunLoopsForModes[aMode] = CPRunLoopLastNativeRunLoop;
    if (!self._runLoopInsuranceTimer)
        self._runLoopInsuranceTimer = setTimeout(        function()
        {
            objj_msgSend(self, "limitDateForMode:", CPDefaultRunLoopMode);
        }, 0);
}

), new objj_method(sel_getUid("limitDateForMode:"), function $CPRunLoop__limitDateForMode_(self, _cmd, aMode)
{
    if (self._runLoopLock)
        return;
    self._runLoopLock = YES;
    if (self._runLoopInsuranceTimer)
    {
        clearTimeout(self._runLoopInsuranceTimer);
        self._runLoopInsuranceTimer = nil;
    }
    var now = self._effectiveDate ? objj_msgSend(self._effectiveDate, "laterDate:", objj_msgSend(CPDate, "date")) : objj_msgSend(CPDate, "date"),
        nextFireDate = nil,
        nextTimerFireDate = self._nextTimerFireDatesForModes[aMode];
    if (self._didAddTimer || nextTimerFireDate && nextTimerFireDate <= now)
    {
        self._didAddTimer = NO;
        if (self._nativeTimersForModes[aMode] !== nil)
        {
            clearTimeout(self._nativeTimersForModes[aMode]);
            self._nativeTimersForModes[aMode] = nil;
        }
        var timers = self._timersForModes[aMode],
            index = timers.length;
        self._timersForModes[aMode] = nil;
        var hasNativeTimers = YES;
        while (index--)
        {
            var timer = timers[index];
            if ((!hasNativeTimers || timer._lastNativeRunLoopsForModes[aMode] < CPRunLoopLastNativeRunLoop) && timer._isValid && timer._fireDate <= now)
                objj_msgSend(timer, "fire");
            if (timer._isValid)
                nextFireDate = nextFireDate === nil ? timer._fireDate : objj_msgSend(nextFireDate, "earlierDate:", timer._fireDate);
            else
            {
                timer._lastNativeRunLoopsForModes[aMode] = 0;
                timers.splice(index, 1);
            }
        }
        var newTimers = self._timersForModes[aMode];
        if (newTimers && newTimers.length)
        {
            index = newTimers.length;
            while (index--)
            {
                var timer = newTimers[index];
                if (objj_msgSend(timer, "isValid"))
                    nextFireDate = nextFireDate === nil ? timer._fireDate : objj_msgSend(nextFireDate, "earlierDate:", timer._fireDate);
                else
                    newTimers.splice(index, 1);
            }
            self._timersForModes[aMode] = newTimers.concat(timers);
        }
        else
            self._timersForModes[aMode] = timers;
        self._nextTimerFireDatesForModes[aMode] = nextFireDate;
        if (self._nextTimerFireDatesForModes[aMode] !== nil)
            self._nativeTimersForModes[aMode] = setTimeout(            function()
            {
                self._effectiveDate = nextFireDate;
                self._nativeTimersForModes[aMode] = nil;
                ++CPRunLoopLastNativeRunLoop;
                objj_msgSend(self, "limitDateForMode:", aMode);
                self._effectiveDate = nil;
            }, MAX(0, objj_msgSend(nextFireDate, "timeIntervalSinceNow") * 1000));
    }
    var performs = self._orderedPerforms,
        index = performs.length;
    self._orderedPerforms = [];
    while (index--)
    {
        var perform = performs[index];
        if (objj_msgSend(perform, "fireInMode:", CPDefaultRunLoopMode))
        {
            objj_msgSend(_CPRunLoopPerform, "_poolPerform:", perform);
            performs.splice(index, 1);
        }
    }
    if (self._orderedPerforms.length)
    {
        self._orderedPerforms = self._orderedPerforms.concat(performs);
        self._orderedPerforms.sort(_CPRunLoopPerformCompare);
    }
    else
        self._orderedPerforms = performs;
    self._runLoopLock = NO;
    return nextFireDate;
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("initialize"), function $CPRunLoop__initialize(self, _cmd)
{
    if (self !== objj_msgSend(CPRunLoop, "class"))
        return;
    CPMainRunLoop = objj_msgSend(objj_msgSend(CPRunLoop, "alloc"), "init");
}

), new objj_method(sel_getUid("currentRunLoop"), function $CPRunLoop__currentRunLoop(self, _cmd)
{
    return CPMainRunLoop;
}

), new objj_method(sel_getUid("mainRunLoop"), function $CPRunLoop__mainRunLoop(self, _cmd)
{
    return CPMainRunLoop;
}

)]);
}{var the_class = objj_allocateClassPair(CPObject, "CPURLRequest"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_URL"), new objj_ivar("_HTTPBody"), new objj_ivar("_HTTPMethod"), new objj_ivar("_HTTPHeaderFields")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPURLRequest__init(self, _cmd)
{
    return objj_msgSend(self, "initWithURL:", nil);
}

), new objj_method(sel_getUid("initWithURL:"), function $CPURLRequest__initWithURL_(self, _cmd, aURL)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPURLRequest").super_class }, "init");
    if (self)
    {
        objj_msgSend(self, "setURL:", aURL);
        self._HTTPBody = "";
        self._HTTPMethod = "GET";
        self._HTTPHeaderFields = objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "init");
        objj_msgSend(self, "setValue:forHTTPHeaderField:", "Thu, 01 Jan 1970 00:00:00 GMT", "If-Modified-Since");
        objj_msgSend(self, "setValue:forHTTPHeaderField:", "no-cache", "Cache-Control");
        objj_msgSend(self, "setValue:forHTTPHeaderField:", "XMLHttpRequest", "X-Requested-With");
    }
    return self;
}

), new objj_method(sel_getUid("URL"), function $CPURLRequest__URL(self, _cmd)
{
    return self._URL;
}

), new objj_method(sel_getUid("setURL:"), function $CPURLRequest__setURL_(self, _cmd, aURL)
{
    self._URL = new CFURL(aURL);
}

), new objj_method(sel_getUid("setHTTPBody:"), function $CPURLRequest__setHTTPBody_(self, _cmd, anHTTPBody)
{
    self._HTTPBody = anHTTPBody;
}

), new objj_method(sel_getUid("HTTPBody"), function $CPURLRequest__HTTPBody(self, _cmd)
{
    return self._HTTPBody;
}

), new objj_method(sel_getUid("setHTTPMethod:"), function $CPURLRequest__setHTTPMethod_(self, _cmd, anHTTPMethod)
{
    self._HTTPMethod = anHTTPMethod;
}

), new objj_method(sel_getUid("HTTPMethod"), function $CPURLRequest__HTTPMethod(self, _cmd)
{
    return self._HTTPMethod;
}

), new objj_method(sel_getUid("allHTTPHeaderFields"), function $CPURLRequest__allHTTPHeaderFields(self, _cmd)
{
    return self._HTTPHeaderFields;
}

), new objj_method(sel_getUid("valueForHTTPHeaderField:"), function $CPURLRequest__valueForHTTPHeaderField_(self, _cmd, aField)
{
    return objj_msgSend(self._HTTPHeaderFields, "objectForKey:", aField);
}

), new objj_method(sel_getUid("setValue:forHTTPHeaderField:"), function $CPURLRequest__setValue_forHTTPHeaderField_(self, _cmd, aValue, aField)
{
    objj_msgSend(self._HTTPHeaderFields, "setObject:forKey:", aValue, aField);
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("requestWithURL:"), function $CPURLRequest__requestWithURL_(self, _cmd, aURL)
{
    return objj_msgSend(objj_msgSend(CPURLRequest, "alloc"), "initWithURL:", aURL);
}

)]);
}{var the_class = objj_allocateClassPair(CPObject, "CPURLResponse"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_URL")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithURL:"), function $CPURLResponse__initWithURL_(self, _cmd, aURL)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPURLResponse").super_class }, "init");
    if (self)
        self._URL = aURL;
    return self;
}

), new objj_method(sel_getUid("URL"), function $CPURLResponse__URL(self, _cmd)
{
    return self._URL;
}

)]);
}{var the_class = objj_allocateClassPair(CPURLResponse, "CPHTTPURLResponse"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_statusCode"), new objj_ivar("_allResponseHeaders"), new objj_ivar("_responseHeaders")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("_setStatusCode:"), function $CPHTTPURLResponse___setStatusCode_(self, _cmd, aStatusCode)
{
    self._statusCode = aStatusCode;
}

), new objj_method(sel_getUid("statusCode"), function $CPHTTPURLResponse__statusCode(self, _cmd)
{
    return self._statusCode;
}

), new objj_method(sel_getUid("_setAllResponseHeaders:"), function $CPHTTPURLResponse___setAllResponseHeaders_(self, _cmd, responseHeadersString)
{
    self._allResponseHeaders = responseHeadersString;
}

), new objj_method(sel_getUid("allHeaderFields"), function $CPHTTPURLResponse__allHeaderFields(self, _cmd)
{
    if (!self._responseHeaders)
        self._responseHeaders = objj_msgSend(objj_msgSend(self, "class"), "parseHTTPHeaders:", self._allResponseHeaders);
    return self._responseHeaders;
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("parseHTTPHeaders:"), function $CPHTTPURLResponse__parseHTTPHeaders_(self, _cmd, headersString)
{
    var r = objj_msgSend(CPDictionary, "dictionary");
    if (headersString)
    {
        var headerLines = headersString.split('\r\n'),
            count = headerLines.length;
        while (count--)
        {
            var headerLine = headerLines[count],
                index = headerLine.indexOf(': ');
            if (index !== CPNotFound)
                objj_msgSend(r, "setValue:forKey:", headerLine.substring(index + 2), headerLine.substring(0, index));
        }
    }
    return r;
}

)]);
}var CPURLConnectionDelegate = nil;
{var the_class = objj_allocateClassPair(CPObject, "CPURLConnection"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_request"), new objj_ivar("_delegate"), new objj_ivar("_isCanceled"), new objj_ivar("_HTTPRequest")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithRequest:delegate:startImmediately:"), function $CPURLConnection__initWithRequest_delegate_startImmediately_(self, _cmd, aRequest, aDelegate, shouldStartImmediately)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPURLConnection").super_class }, "init");
    if (self)
    {
        self._request = aRequest;
        self._delegate = aDelegate;
        self._isCanceled = NO;
        var URL = objj_msgSend(self._request, "URL"),
            scheme = objj_msgSend(URL, "scheme");
        self._HTTPRequest = new CFHTTPRequest();
        if (shouldStartImmediately)
            objj_msgSend(self, "start");
    }
    return self;
}

), new objj_method(sel_getUid("initWithRequest:delegate:"), function $CPURLConnection__initWithRequest_delegate_(self, _cmd, aRequest, aDelegate)
{
    return objj_msgSend(self, "initWithRequest:delegate:startImmediately:", aRequest, aDelegate, YES);
}

), new objj_method(sel_getUid("delegate"), function $CPURLConnection__delegate(self, _cmd)
{
    return self._delegate;
}

), new objj_method(sel_getUid("start"), function $CPURLConnection__start(self, _cmd)
{
    self._isCanceled = NO;
    try {
        self._HTTPRequest.open(objj_msgSend(self._request, "HTTPMethod"), objj_msgSend(objj_msgSend(self._request, "URL"), "absoluteString"), YES);
        self._HTTPRequest.onreadystatechange =         function()
        {
            objj_msgSend(self, "_readyStateDidChange");
        };
        var fields = objj_msgSend(self._request, "allHTTPHeaderFields"),
            key = nil,
            keys = objj_msgSend(fields, "keyEnumerator");
        while ((key = objj_msgSend(keys, "nextObject")) !== nil)
            self._HTTPRequest.setRequestHeader(key, objj_msgSend(fields, "objectForKey:", key));
        self._HTTPRequest.send(objj_msgSend(self._request, "HTTPBody"));
    }
    catch(anException) {
        if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("connection:didFailWithError:")))
            objj_msgSend(self._delegate, "connection:didFailWithError:", self, anException);
    }
}

), new objj_method(sel_getUid("cancel"), function $CPURLConnection__cancel(self, _cmd)
{
    self._isCanceled = YES;
    try {
        self._HTTPRequest.abort();
    }
    catch(anException) {
    }
}

), new objj_method(sel_getUid("_readyStateDidChange"), function $CPURLConnection___readyStateDidChange(self, _cmd)
{
    if (self._HTTPRequest.readyState() === CFHTTPRequest.CompleteState)
    {
        var statusCode = self._HTTPRequest.status(),
            URL = objj_msgSend(self._request, "URL");
        if (statusCode === 401 && objj_msgSend(CPURLConnectionDelegate, "respondsToSelector:", sel_getUid("connectionDidReceiveAuthenticationChallenge:")))
            objj_msgSend(CPURLConnectionDelegate, "connectionDidReceiveAuthenticationChallenge:", self);
        else
        {
            if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("connection:didReceiveResponse:")))
            {
                var response = objj_msgSend(objj_msgSend(CPHTTPURLResponse, "alloc"), "initWithURL:", URL);
                objj_msgSend(response, "_setStatusCode:", statusCode);
                objj_msgSend(response, "_setAllResponseHeaders:", self._HTTPRequest.getAllResponseHeaders());
                objj_msgSend(self._delegate, "connection:didReceiveResponse:", self, response);
            }
            if (!self._isCanceled)
            {
                if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("connection:didReceiveData:")))
                    objj_msgSend(self._delegate, "connection:didReceiveData:", self, self._HTTPRequest.responseText());
                if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("connectionDidFinishLoading:")))
                    objj_msgSend(self._delegate, "connectionDidFinishLoading:", self);
            }
        }
    }
    objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
}

), new objj_method(sel_getUid("_HTTPRequest"), function $CPURLConnection___HTTPRequest(self, _cmd)
{
    return self._HTTPRequest;
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("setClassDelegate:"), function $CPURLConnection__setClassDelegate_(self, _cmd, delegate)
{
    CPURLConnectionDelegate = delegate;
}

), new objj_method(sel_getUid("sendSynchronousRequest:returningResponse:"), function $CPURLConnection__sendSynchronousRequest_returningResponse_(self, _cmd, aRequest, aURLResponse)
{
    try {
        var request = new CFHTTPRequest();
        request.open(objj_msgSend(aRequest, "HTTPMethod"), objj_msgSend(objj_msgSend(aRequest, "URL"), "absoluteString"), NO);
        var fields = objj_msgSend(aRequest, "allHTTPHeaderFields"),
            key = nil,
            keys = objj_msgSend(fields, "keyEnumerator");
        while ((key = objj_msgSend(keys, "nextObject")) !== nil)
            request.setRequestHeader(key, objj_msgSend(fields, "objectForKey:", key));
        request.send(objj_msgSend(aRequest, "HTTPBody"));
        if (!request.success())
            return nil;
        return request.responseText();
    }
    catch(anException) {
    }
    return nil;
}

), new objj_method(sel_getUid("connectionWithRequest:delegate:"), function $CPURLConnection__connectionWithRequest_delegate_(self, _cmd, aRequest, aDelegate)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithRequest:delegate:", aRequest, aDelegate);
}

)]);
}function CPURLPost(url, data, success, error)
{
    ($.post(url, data,     function(data, textStatus, jqXHR)
    {
        if (success)
            success(data, textStatus, jqXHR);
        objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
    })).fail(    function(jqxhr, text, err)
    {
        if (error)
            error(jqxhr, text, err);
        objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
    });
}
function CPURLGet(url, data, success, error)
{
    ($.get(url, data,     function(data, textStatus, jqXHR)
    {
        if (success)
            success(data, textStatus, jqXHR);
        objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
    })).fail(    function(jqxhr, text, err)
    {
        if (error)
            error(jqxhr, text, err);
        objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
    });
}
var CPDeleteKeyCode = 8;
var CPTabKeyCode = 9;
var CPReturnKeyCode = 13;
var CPEscapeKeyCode = 27;
var CPSpaceKeyCode = 32;
var CPPageUpKeyCode = 33;
var CPPageDownKeyCode = 34;
var CPLeftArrowKeyCode = 37;
var CPUpArrowKeyCode = 38;
var CPRightArrowKeyCode = 39;
var CPDownArrowKeyCode = 40;
var CPDeleteForwardKeyCode = 46;
{var the_class = objj_allocateClassPair(CPObject, "CPResponder"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_nextResponder")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("acceptsFirstResponder"), function $CPResponder__acceptsFirstResponder(self, _cmd)
{
    return NO;
}

), new objj_method(sel_getUid("becomeFirstResponder"), function $CPResponder__becomeFirstResponder(self, _cmd)
{
    return YES;
}

), new objj_method(sel_getUid("swallowsKey"), function $CPResponder__swallowsKey(self, _cmd)
{
    return NO;
}

), new objj_method(sel_getUid("resignFirstResponder"), function $CPResponder__resignFirstResponder(self, _cmd)
{
    return YES;
}

), new objj_method(sel_getUid("setNextResponder:"), function $CPResponder__setNextResponder_(self, _cmd, aResponder)
{
    self._nextResponder = aResponder;
}

), new objj_method(sel_getUid("nextResponder"), function $CPResponder__nextResponder(self, _cmd)
{
    return self._nextResponder;
}

), new objj_method(sel_getUid("mouseClicked:"), function $CPResponder__mouseClicked_(self, _cmd, anEvent)
{
    objj_msgSend(self._nextResponder, "performSelector:withObject:", _cmd, anEvent);
}

), new objj_method(sel_getUid("mouseDown:"), function $CPResponder__mouseDown_(self, _cmd, anEvent)
{
    objj_msgSend(self._nextResponder, "performSelector:withObject:", _cmd, anEvent);
}

), new objj_method(sel_getUid("rightMouseDown:"), function $CPResponder__rightMouseDown_(self, _cmd, anEvent)
{
    objj_msgSend(self._nextResponder, "performSelector:withObject:", _cmd, anEvent);
}

), new objj_method(sel_getUid("mouseDragged:"), function $CPResponder__mouseDragged_(self, _cmd, anEvent)
{
    objj_msgSend(self._nextResponder, "performSelector:withObject:", _cmd, anEvent);
}

), new objj_method(sel_getUid("mouseUp:"), function $CPResponder__mouseUp_(self, _cmd, anEvent)
{
    objj_msgSend(self._nextResponder, "performSelector:withObject:", _cmd, anEvent);
}

), new objj_method(sel_getUid("rightMouseUp:"), function $CPResponder__rightMouseUp_(self, _cmd, anEvent)
{
    objj_msgSend(self._nextResponder, "performSelector:withObject:", _cmd, anEvent);
}

), new objj_method(sel_getUid("mouseMoved:"), function $CPResponder__mouseMoved_(self, _cmd, anEvent)
{
    objj_msgSend(self._nextResponder, "performSelector:withObject:", _cmd, anEvent);
}

), new objj_method(sel_getUid("mouseEntered:"), function $CPResponder__mouseEntered_(self, _cmd, anEvent)
{
    objj_msgSend(self._nextResponder, "performSelector:withObject:", _cmd, anEvent);
}

), new objj_method(sel_getUid("mouseExited:"), function $CPResponder__mouseExited_(self, _cmd, anEvent)
{
    objj_msgSend(self._nextResponder, "performSelector:withObject:", _cmd, anEvent);
}

), new objj_method(sel_getUid("scrollWheel:"), function $CPResponder__scrollWheel_(self, _cmd, anEvent)
{
    objj_msgSend(self._nextResponder, "performSelector:withObject:", _cmd, anEvent);
}

), new objj_method(sel_getUid("keyDown:"), function $CPResponder__keyDown_(self, _cmd, anEvent)
{
    objj_msgSend(self._nextResponder, "performSelector:withObject:", _cmd, anEvent);
}

), new objj_method(sel_getUid("keyUp:"), function $CPResponder__keyUp_(self, _cmd, anEvent)
{
    objj_msgSend(self._nextResponder, "performSelector:withObject:", _cmd, anEvent);
}

), new objj_method(sel_getUid("doCommandBySelector:"), function $CPResponder__doCommandBySelector_(self, _cmd, aSelector)
{
    if (objj_msgSend(self, "respondsToSelector:", aSelector))
        objj_msgSend(self, "performSelector:", aSelector);
    else
        objj_msgSend(self._nextResponder, "doCommandBySelector:", aSelector);
}

), new objj_method(sel_getUid("tryToPerform:with:"), function $CPResponder__tryToPerform_with_(self, _cmd, aSelector, anObject)
{
    if (objj_msgSend(self, "respondsToSelector:", aSelector))
    {
        objj_msgSend(self, "performSelector:withObject:", aSelector, anObject);
        return YES;
    }
    return objj_msgSend(self._nextResponder, "tryToPerform:with:", aSelector, anObject);
}

)]);
}var CPResponderNextResponderKey = "CPResponderNextResponderKey";
{
var the_class = objj_getClass("CPResponder")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPResponder\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPResponder__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPResponder").super_class }, "init");
    if (self)
    {
        objj_msgSend(self, "setNextResponder:", objj_msgSend(aCoder, "decodeObjectForKey:", CPResponderNextResponderKey));
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPResponder__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPResponder").super_class }, "encodeWithCoder:", aCoder);
    if (self._nextResponder !== nil)
        objj_msgSend(aCoder, "encodeConditionalObject:forKey:", self._nextResponder, CPResponderNextResponderKey);
}

)]);
}{var the_class = objj_allocateClassPair(CPObject, "CPScreen"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("visibleFrame"), function $CPScreen__visibleFrame(self, _cmd)
{
    return CGRectMake(window.screen.availLeft, window.screen.availTop, window.screen.availWidth, window.screen.availHeight);
}

)]);
}(function($, undefined)
{
    var uuid = 0,
        runiqueId = /^ui-id-\d+$/;
    $.ui = $.ui || {};
    if ($.ui.version)
    {
        return;
    }    $.extend($.ui, {version: "1.9.2", keyCode: {BACKSPACE: 8, COMMA: 188, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, LEFT: 37, NUMPAD_ADD: 107, NUMPAD_DECIMAL: 110, NUMPAD_DIVIDE: 111, NUMPAD_ENTER: 108, NUMPAD_MULTIPLY: 106, NUMPAD_SUBTRACT: 109, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SPACE: 32, TAB: 9, UP: 38}});
    $.fn.extend({_focus: $.fn.focus, focus:     function(delay, fn)
    {
        return typeof delay === "number" ? this.each(        function()
        {
            var elem = this;
            setTimeout(            function()
            {
                ($(elem)).focus();
                if (fn)
                {
                    fn.call(elem);
                }            }, delay);
        }) : this._focus.apply(this, arguments);
    }, scrollParent:     function()
    {
        var scrollParent;
        if ($.ui.ie && /(static|relative)/.test(this.css('position')) || /absolute/.test(this.css('position')))
        {
            scrollParent = ((this.parents()).filter(            function()
            {
                return /(relative|absolute|fixed)/.test($.css(this, 'position')) && /(auto|scroll)/.test($.css(this, 'overflow') + $.css(this, 'overflow-y') + $.css(this, 'overflow-x'));
            })).eq(0);
        }        else
        {
            scrollParent = ((this.parents()).filter(            function()
            {
                return /(auto|scroll)/.test($.css(this, 'overflow') + $.css(this, 'overflow-y') + $.css(this, 'overflow-x'));
            })).eq(0);
        }        return /fixed/.test(this.css('position')) || !scrollParent.length ? $(document) : scrollParent;
    }, zIndex:     function(zIndex)
    {
        if (zIndex !== undefined)
        {
            return this.css("zIndex", zIndex);
        }        if (this.length)
        {
            var elem = $(this[0]),
                position,
                value;
            while (elem.length && elem[0] !== document)
            {
                position = elem.css("position");
                if (position === "absolute" || position === "relative" || position === "fixed")
                {
                    value = parseInt(elem.css("zIndex"), 10);
                    if (!isNaN(value) && value !== 0)
                    {
                        return value;
                    }                }                elem = elem.parent();
            }        }        return 0;
    }, uniqueId:     function()
    {
        return this.each(        function()
        {
            if (!this.id)
            {
                this.id = "ui-id-" + ++uuid;
            }        });
    }, removeUniqueId:     function()
    {
        return this.each(        function()
        {
            if (runiqueId.test(this.id))
            {
                ($(this)).removeAttr("id");
            }        });
    }});
    function focusable(element, isTabIndexNotNaN)
    {
        var map,
            mapName,
            img,
            nodeName = element.nodeName.toLowerCase();
        if ("area" === nodeName)
        {
            map = element.parentNode;
            mapName = map.name;
            if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map")
            {
                return false;
            }
            img = ($("img[usemap=#" + mapName + "]"))[0];
            return !!img && visible(img);
        }
        return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element);
    }
    function visible(element)
    {
        return $.expr.filters.visible(element) && !(((($(element)).parents()).andSelf()).filter(        function()
        {
            return $.css(this, "visibility") === "hidden";
        })).length;
    }
    $.extend($.expr[":"], {data: $.expr.createPseudo ? $.expr.createPseudo(    function(dataName)
    {
        return         function(elem)
        {
            return !!$.data(elem, dataName);
        };
    }) :     function(elem, i, match)
    {
        return !!$.data(elem, match[3]);
    }, focusable:     function(element)
    {
        return focusable(element, !isNaN($.attr(element, "tabindex")));
    }, tabbable:     function(element)
    {
        var tabIndex = $.attr(element, "tabindex"),
            isTabIndexNaN = isNaN(tabIndex);
        return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
    }});
    $(    function()
    {
        var body = document.body,
            div = body.appendChild(div = document.createElement("div"));
        div.offsetHeight;
        $.extend(div.style, {minHeight: "100px", height: "auto", padding: 0, borderWidth: 0});
        $.support.minHeight = div.offsetHeight === 100;
        $.support.selectstart = "onselectstart" in div;
        (body.removeChild(div)).style.display = "none";
    });
    if (!(($("<a>")).outerWidth(1)).jquery)
    {
        $.each(["Width", "Height"],         function(i, name)
        {
            var side = name === "Width" ? ["Left", "Right"] : ["Top", "Bottom"],
                type = name.toLowerCase(),
                orig = {innerWidth: $.fn.innerWidth, innerHeight: $.fn.innerHeight, outerWidth: $.fn.outerWidth, outerHeight: $.fn.outerHeight};
            function reduce(elem, size, border, margin)
            {
                $.each(side,                 function()
                {
                    size -= parseFloat($.css(elem, "padding" + this)) || 0;
                    if (border)
                    {
                        size -= parseFloat($.css(elem, "border" + this + "Width")) || 0;
                    }                    if (margin)
                    {
                        size -= parseFloat($.css(elem, "margin" + this)) || 0;
                    }                });
                return size;
            }
            $.fn["inner" + name] =             function(size)
            {
                if (size === undefined)
                {
                    return orig["inner" + name].call(this);
                }                return this.each(                function()
                {
                    ($(this)).css(type, reduce(this, size) + "px");
                });
            };
            $.fn["outer" + name] =             function(size, margin)
            {
                if (typeof size !== "number")
                {
                    return orig["outer" + name].call(this, size);
                }                return this.each(                function()
                {
                    ($(this)).css(type, reduce(this, size, true, margin) + "px");
                });
            };
        });
    }    if (((($("<a>")).data("a-b", "a")).removeData("a-b")).data("a-b"))
    {
        $.fn.removeData = (        function(removeData)
        {
            return             function(key)
            {
                if (arguments.length)
                {
                    return removeData.call(this, $.camelCase(key));
                }                else
                {
                    return removeData.call(this);
                }            };
        })($.fn.removeData);
    }    (    function()
    {
        var uaMatch = /msie ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || [];
        $.ui.ie = uaMatch.length ? true : false;
        $.ui.ie6 = parseFloat(uaMatch[1], 10) === 6;
    })();
    $.fn.extend({disableSelection:     function()
    {
        return this.bind(($.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection",         function(event)
        {
            event.preventDefault();
        });
    }, enableSelection:     function()
    {
        return this.unbind(".ui-disableSelection");
    }});
    $.extend($.ui, {plugin: {add:     function(module, option, set)
    {
        var i,
            proto = $.ui[module].prototype;
        for (i in set)
        {
            proto.plugins[i] = proto.plugins[i] || [];
            proto.plugins[i].push([option, set[i]]);
        }    }, call:     function(instance, name, args)
    {
        var i,
            set = instance.plugins[name];
        if (!set || !instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11)
        {
            return;
        }        for (i = 0; i < set.length; i++)
        {
            if (instance.options[set[i][0]])
            {
                set[i][1].apply(instance.element, args);
            }        }    }}, contains: $.contains, hasScroll:     function(el, a)
    {
        if (($(el)).css("overflow") === "hidden")
        {
            return false;
        }        var scroll = a && a === "left" ? "scrollLeft" : "scrollTop",
            has = false;
        if (el[scroll] > 0)
        {
            return true;
        }        el[scroll] = 1;
        has = el[scroll] > 0;
        el[scroll] = 0;
        return has;
    }, isOverAxis:     function(x, reference, size)
    {
        return x > reference && x < reference + size;
    }, isOver:     function(y, x, top, left, height, width)
    {
        return $.ui.isOverAxis(y, top, height) && $.ui.isOverAxis(x, left, width);
    }});
})(jQuery);
(function($, undefined)
{
    var uuid = 0,
        slice = Array.prototype.slice,
        _cleanData = $.cleanData;
    $.cleanData =     function(elems)
    {
        for (var i = 0, elem; (elem = elems[i]) != null; i++)
        {
            try {
                ($(elem)).triggerHandler("remove");
            }
            catch(e) {
            }
        }        _cleanData(elems);
    };
    $.widget =     function(name, base, prototype)
    {
        var fullName,
            existingConstructor,
            constructor,
            basePrototype,
            namespace = (name.split("."))[0];
        name = (name.split("."))[1];
        fullName = namespace + "-" + name;
        if (!prototype)
        {
            prototype = base;
            base = $.Widget;
        }        $.expr[":"][fullName.toLowerCase()] =         function(elem)
        {
            return !!$.data(elem, fullName);
        };
        $[namespace] = $[namespace] || {};
        existingConstructor = $[namespace][name];
        constructor = $[namespace][name] =         function(options, element)
        {
            if (!this._createWidget)
            {
                return new constructor(options, element);
            }            if (arguments.length)
            {
                this._createWidget(options, element);
            }        };
        $.extend(constructor, existingConstructor, {version: prototype.version, _proto: $.extend({}, prototype), _childConstructors: []});
        basePrototype = new base();
        basePrototype.options = $.widget.extend({}, basePrototype.options);
        $.each(prototype,         function(prop, value)
        {
            if ($.isFunction(value))
            {
                prototype[prop] = (                function()
                {
                    var _super =                     function()
                    {
                        return base.prototype[prop].apply(this, arguments);
                    },
                        _superApply =                     function(args)
                    {
                        return base.prototype[prop].apply(this, args);
                    };
                    return                     function()
                    {
                        var __super = this._super,
                            __superApply = this._superApply,
                            returnValue;
                        this._super = _super;
                        this._superApply = _superApply;
                        returnValue = value.apply(this, arguments);
                        this._super = __super;
                        this._superApply = __superApply;
                        return returnValue;
                    };
                })();
            }        });
        constructor.prototype = $.widget.extend(basePrototype, {widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name}, prototype, {constructor: constructor, namespace: namespace, widgetName: name, widgetBaseClass: fullName, widgetFullName: fullName});
        if (existingConstructor)
        {
            $.each(existingConstructor._childConstructors,             function(i, child)
            {
                var childPrototype = child.prototype;
                $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto);
            });
            delete existingConstructor._childConstructors;
        }        else
        {
            base._childConstructors.push(constructor);
        }        $.widget.bridge(name, constructor);
    };
    $.widget.extend =     function(target)
    {
        var input = slice.call(arguments, 1),
            inputIndex = 0,
            inputLength = input.length,
            key,
            value;
        for (; inputIndex < inputLength; inputIndex++)
        {
            for (key in input[inputIndex])
            {
                value = input[inputIndex][key];
                if (input[inputIndex].hasOwnProperty(key) && value !== undefined)
                {
                    if ($.isPlainObject(value))
                    {
                        target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : $.widget.extend({}, value);
                    }                    else
                    {
                        target[key] = value;
                    }                }            }        }        return target;
    };
    $.widget.bridge =     function(name, object)
    {
        var fullName = object.prototype.widgetFullName || name;
        $.fn[name] =         function(options)
        {
            var isMethodCall = typeof options === "string",
                args = slice.call(arguments, 1),
                returnValue = this;
            options = !isMethodCall && args.length ? $.widget.extend.apply(null, [options].concat(args)) : options;
            if (isMethodCall)
            {
                this.each(                function()
                {
                    var methodValue,
                        instance = $.data(this, fullName);
                    if (!instance)
                    {
                        return $.error("cannot call methods on " + name + " prior to initialization; " + "attempted to call method '" + options + "'");
                    }                    if (!$.isFunction(instance[options]) || options.charAt(0) === "_")
                    {
                        return $.error("no such method '" + options + "' for " + name + " widget instance");
                    }                    methodValue = instance[options].apply(instance, args);
                    if (methodValue !== instance && methodValue !== undefined)
                    {
                        returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
                        return false;
                    }                });
            }            else
            {
                this.each(                function()
                {
                    var instance = $.data(this, fullName);
                    if (instance)
                    {
                        (instance.option(options || {}))._init();
                    }                    else
                    {
                        $.data(this, fullName, new object(options, this));
                    }                });
            }            return returnValue;
        };
    };
    $.Widget =     function()
    {
    };
    $.Widget._childConstructors = [];
    $.Widget.prototype = {widgetName: "widget", widgetEventPrefix: "", defaultElement: "<div>", options: {disabled: false, create: null}, _createWidget:     function(options, element)
    {
        element = ($(element || this.defaultElement || this))[0];
        this.element = $(element);
        this.uuid = uuid++;
        this.eventNamespace = "." + this.widgetName + this.uuid;
        this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);
        this.bindings = $();
        this.hoverable = $();
        this.focusable = $();
        if (element !== this)
        {
            $.data(element, this.widgetName, this);
            $.data(element, this.widgetFullName, this);
            this._on(true, this.element, {remove:             function(event)
            {
                if (event.target === element)
                {
                    this.destroy();
                }            }});
            this.document = $(element.style ? element.ownerDocument : element.document || element);
            this.window = $(this.document[0].defaultView || this.document[0].parentWindow);
        }        this._create();
        this._trigger("create", null, this._getCreateEventData());
        this._init();
    }, _getCreateOptions: $.noop, _getCreateEventData: $.noop, _create: $.noop, _init: $.noop, destroy:     function()
    {
        this._destroy();
        (((this.element.unbind(this.eventNamespace)).removeData(this.widgetName)).removeData(this.widgetFullName)).removeData($.camelCase(this.widgetFullName));
        (((this.widget()).unbind(this.eventNamespace)).removeAttr("aria-disabled")).removeClass(this.widgetFullName + "-disabled " + "ui-state-disabled");
        this.bindings.unbind(this.eventNamespace);
        this.hoverable.removeClass("ui-state-hover");
        this.focusable.removeClass("ui-state-focus");
    }, _destroy: $.noop, widget:     function()
    {
        return this.element;
    }, option:     function(key, value)
    {
        var options = key,
            parts,
            curOption,
            i;
        if (arguments.length === 0)
        {
            return $.widget.extend({}, this.options);
        }        if (typeof key === "string")
        {
            options = {};
            parts = key.split(".");
            key = parts.shift();
            if (parts.length)
            {
                curOption = options[key] = $.widget.extend({}, this.options[key]);
                for (i = 0; i < parts.length - 1; i++)
                {
                    curOption[parts[i]] = curOption[parts[i]] || {};
                    curOption = curOption[parts[i]];
                }                key = parts.pop();
                if (value === undefined)
                {
                    return curOption[key] === undefined ? null : curOption[key];
                }                curOption[key] = value;
            }            else
            {
                if (value === undefined)
                {
                    return this.options[key] === undefined ? null : this.options[key];
                }                options[key] = value;
            }        }        this._setOptions(options);
        return this;
    }, _setOptions:     function(options)
    {
        var key;
        for (key in options)
        {
            this._setOption(key, options[key]);
        }        return this;
    }, _setOption:     function(key, value)
    {
        this.options[key] = value;
        if (key === "disabled")
        {
            ((this.widget()).toggleClass(this.widgetFullName + "-disabled ui-state-disabled", !!value)).attr("aria-disabled", value);
            this.hoverable.removeClass("ui-state-hover");
            this.focusable.removeClass("ui-state-focus");
        }        return this;
    }, enable:     function()
    {
        return this._setOption("disabled", false);
    }, disable:     function()
    {
        return this._setOption("disabled", true);
    }, _on:     function(suppressDisabledCheck, element, handlers)
    {
        var delegateElement,
            instance = this;
        if (typeof suppressDisabledCheck !== "boolean")
        {
            handlers = element;
            element = suppressDisabledCheck;
            suppressDisabledCheck = false;
        }        if (!handlers)
        {
            handlers = element;
            element = this.element;
            delegateElement = this.widget();
        }        else
        {
            element = delegateElement = $(element);
            this.bindings = this.bindings.add(element);
        }        $.each(handlers,         function(event, handler)
        {
            function handlerProxy()
            {
                if (!suppressDisabledCheck && (instance.options.disabled === true || ($(this)).hasClass("ui-state-disabled")))
                {
                    return;
                }
                return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
            }
            if (typeof handler !== "string")
            {
                handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;
            }            var match = event.match(/^(\w+)\s*(.*)$/),
                eventName = match[1] + instance.eventNamespace,
                selector = match[2];
            if (selector)
            {
                delegateElement.delegate(selector, eventName, handlerProxy);
            }            else
            {
                element.bind(eventName, handlerProxy);
            }        });
    }, _off:     function(element, eventName)
    {
        eventName = ((eventName || "").split(" ")).join(this.eventNamespace + " ") + this.eventNamespace;
        (element.unbind(eventName)).undelegate(eventName);
    }, _delay:     function(handler, delay)
    {
        function handlerProxy()
        {
            return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
        }
        var instance = this;
        return setTimeout(handlerProxy, delay || 0);
    }, _hoverable:     function(element)
    {
        this.hoverable = this.hoverable.add(element);
        this._on(element, {mouseenter:         function(event)
        {
            ($(event.currentTarget)).addClass("ui-state-hover");
        }, mouseleave:         function(event)
        {
            ($(event.currentTarget)).removeClass("ui-state-hover");
        }});
    }, _focusable:     function(element)
    {
        this.focusable = this.focusable.add(element);
        this._on(element, {focusin:         function(event)
        {
            ($(event.currentTarget)).addClass("ui-state-focus");
        }, focusout:         function(event)
        {
            ($(event.currentTarget)).removeClass("ui-state-focus");
        }});
    }, _trigger:     function(type, event, data)
    {
        var prop,
            orig,
            callback = this.options[type];
        data = data || {};
        event = $.Event(event);
        event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
        event.target = this.element[0];
        orig = event.originalEvent;
        if (orig)
        {
            for (prop in orig)
            {
                if (!(prop in event))
                {
                    event[prop] = orig[prop];
                }            }        }        this.element.trigger(event, data);
        return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented());
    }};
    $.each({show: "fadeIn", hide: "fadeOut"},     function(method, defaultEffect)
    {
        $.Widget.prototype["_" + method] =         function(element, options, callback)
        {
            if (typeof options === "string")
            {
                options = {effect: options};
            }            var hasOptions,
                effectName = !options ? method : options === true || typeof options === "number" ? defaultEffect : options.effect || defaultEffect;
            options = options || {};
            if (typeof options === "number")
            {
                options = {duration: options};
            }            hasOptions = !$.isEmptyObject(options);
            options.complete = callback;
            if (options.delay)
            {
                element.delay(options.delay);
            }            if (hasOptions && $.effects && ($.effects.effect[effectName] || $.uiBackCompat !== false && $.effects[effectName]))
            {
                element[method](options);
            }            else if (effectName !== method && element[effectName])
            {
                element[effectName](options.duration, options.easing, callback);
            }            else
            {
                element.queue(                function(next)
                {
                    ($(this))[method]();
                    if (callback)
                    {
                        callback.call(element[0]);
                    }                    next();
                });
            }        };
    });
    if ($.uiBackCompat !== false)
    {
        $.Widget.prototype._getCreateOptions =         function()
        {
            return $.metadata && ($.metadata.get(this.element[0]))[this.widgetName];
        };
    }})(jQuery);
(function($, undefined)
{
    var mouseHandled = false;
    ($(document)).mouseup(    function(e)
    {
        mouseHandled = false;
    });
    $.widget("ui.mouse", {version: "1.9.2", options: {cancel: 'input,textarea,button,select,option', distance: 1, delay: 0}, _mouseInit:     function()
    {
        var that = this;
        (this.element.bind('mousedown.' + this.widgetName,         function(event)
        {
            return that._mouseDown(event);
        })).bind('click.' + this.widgetName,         function(event)
        {
            if (true === $.data(event.target, that.widgetName + '.preventClickEvent'))
            {
                $.removeData(event.target, that.widgetName + '.preventClickEvent');
                event.stopImmediatePropagation();
                return false;
            }        });
        this.started = false;
    }, _mouseDestroy:     function()
    {
        this.element.unbind('.' + this.widgetName);
        if (this._mouseMoveDelegate)
        {
            (($(document)).unbind('mousemove.' + this.widgetName, this._mouseMoveDelegate)).unbind('mouseup.' + this.widgetName, this._mouseUpDelegate);
        }    }, _mouseDown:     function(event)
    {
        if (mouseHandled)
        {
            return;
        }        this._mouseStarted && this._mouseUp(event);
        this._mouseDownEvent = event;
        var that = this,
            btnIsLeft = event.which === 1,
            elIsCancel = typeof this.options.cancel === "string" && event.target.nodeName ? (($(event.target)).closest(this.options.cancel)).length : false;
        if (!btnIsLeft || elIsCancel || !this._mouseCapture(event))
        {
            return true;
        }        this.mouseDelayMet = !this.options.delay;
        if (!this.mouseDelayMet)
        {
            this._mouseDelayTimer = setTimeout(            function()
            {
                that.mouseDelayMet = true;
            }, this.options.delay);
        }        if (this._mouseDistanceMet(event) && this._mouseDelayMet(event))
        {
            this._mouseStarted = this._mouseStart(event) !== false;
            if (!this._mouseStarted)
            {
                event.preventDefault();
                return true;
            }        }        if (true === $.data(event.target, this.widgetName + '.preventClickEvent'))
        {
            $.removeData(event.target, this.widgetName + '.preventClickEvent');
        }        this._mouseMoveDelegate =         function(event)
        {
            return that._mouseMove(event);
        };
        this._mouseUpDelegate =         function(event)
        {
            return that._mouseUp(event);
        };
        (($(document)).bind('mousemove.' + this.widgetName, this._mouseMoveDelegate)).bind('mouseup.' + this.widgetName, this._mouseUpDelegate);
        event.preventDefault();
        mouseHandled = true;
        return true;
    }, _mouseMove:     function(event)
    {
        if ($.ui.ie && !(document.documentMode >= 9) && !event.button)
        {
            return this._mouseUp(event);
        }        if (this._mouseStarted)
        {
            this._mouseDrag(event);
            return event.preventDefault();
        }        if (this._mouseDistanceMet(event) && this._mouseDelayMet(event))
        {
            this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== false;
            this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);
        }        return !this._mouseStarted;
    }, _mouseUp:     function(event)
    {
        (($(document)).unbind('mousemove.' + this.widgetName, this._mouseMoveDelegate)).unbind('mouseup.' + this.widgetName, this._mouseUpDelegate);
        if (this._mouseStarted)
        {
            this._mouseStarted = false;
            if (event.target === this._mouseDownEvent.target)
            {
                $.data(event.target, this.widgetName + '.preventClickEvent', true);
            }            this._mouseStop(event);
        }        return false;
    }, _mouseDistanceMet:     function(event)
    {
        return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;
    }, _mouseDelayMet:     function(event)
    {
        return this.mouseDelayMet;
    }, _mouseStart:     function(event)
    {
    }, _mouseDrag:     function(event)
    {
    }, _mouseStop:     function(event)
    {
    }, _mouseCapture:     function(event)
    {
        return true;
    }});
})(jQuery);
(function($, undefined)
{
    $.widget("ui.draggable", $.ui.mouse, {version: "1.9.2", widgetEventPrefix: "drag", options: {addClasses: true, appendTo: "parent", axis: false, connectToSortable: false, containment: false, cursor: "auto", cursorAt: false, grid: false, handle: false, helper: "original", iframeFix: false, opacity: false, refreshPositions: false, revert: false, revertDuration: 500, scope: "default", scroll: true, scrollSensitivity: 20, scrollSpeed: 20, snap: false, snapMode: "both", snapTolerance: 20, stack: false, zIndex: false}, _create:     function()
    {
        if (this.options.helper == 'original' && !/^(?:r|a|f)/.test(this.element.css("position")))
            this.element[0].style.position = 'relative';
        this.options.addClasses && this.element.addClass("ui-draggable");
        this.options.disabled && this.element.addClass("ui-draggable-disabled");
        this._mouseInit();
    }, _destroy:     function()
    {
        this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");
        this._mouseDestroy();
    }, _mouseCapture:     function(event)
    {
        var o = this.options;
        if (this.helper || o.disabled || ($(event.target)).is('.ui-resizable-handle'))
            return false;
        this.handle = this._getHandle(event);
        if (!this.handle)
            return false;
        ($(o.iframeFix === true ? "iframe" : o.iframeFix)).each(        function()
        {
            ((($('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>')).css({width: this.offsetWidth + "px", height: this.offsetHeight + "px", position: "absolute", opacity: "0.001", zIndex: 1000})).css(($(this)).offset())).appendTo("body");
        });
        return true;
    }, _mouseStart:     function(event)
    {
        var o = this.options;
        this.helper = this._createHelper(event);
        this.helper.addClass("ui-draggable-dragging");
        this._cacheHelperProportions();
        if ($.ui.ddmanager)
            $.ui.ddmanager.current = this;
        this._cacheMargins();
        this.cssPosition = this.helper.css("position");
        this.scrollParent = this.helper.scrollParent();
        this.offset = this.positionAbs = this.element.offset();
        this.offset = {top: this.offset.top - this.margins.top, left: this.offset.left - this.margins.left};
        $.extend(this.offset, {click: {left: event.pageX - this.offset.left, top: event.pageY - this.offset.top}, parent: this._getParentOffset(), relative: this._getRelativeOffset()});
        this.originalPosition = this.position = this._generatePosition(event);
        this.originalPageX = event.pageX;
        this.originalPageY = event.pageY;
        o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);
        if (o.containment)
            this._setContainment();
        if (this._trigger("start", event) === false)
        {
            this._clear();
            return false;
        }        this._cacheHelperProportions();
        if ($.ui.ddmanager && !o.dropBehaviour)
            $.ui.ddmanager.prepareOffsets(this, event);
        this._mouseDrag(event, true);
        if ($.ui.ddmanager)
            $.ui.ddmanager.dragStart(this, event);
        return true;
    }, _mouseDrag:     function(event, noPropagation)
    {
        this.position = this._generatePosition(event);
        this.positionAbs = this._convertPositionTo("absolute");
        if (!noPropagation)
        {
            var ui = this._uiHash();
            if (this._trigger('drag', event, ui) === false)
            {
                this._mouseUp({});
                return false;
            }            this.position = ui.position;
        }        if (!this.options.axis || this.options.axis != "y")
            this.helper[0].style.left = this.position.left + 'px';
        if (!this.options.axis || this.options.axis != "x")
            this.helper[0].style.top = this.position.top + 'px';
        if ($.ui.ddmanager)
            $.ui.ddmanager.drag(this, event);
        return false;
    }, _mouseStop:     function(event)
    {
        var dropped = false;
        if ($.ui.ddmanager && !this.options.dropBehaviour)
            dropped = $.ui.ddmanager.drop(this, event);
        if (this.dropped)
        {
            dropped = this.dropped;
            this.dropped = false;
        }        var element = this.element[0],
            elementInDom = false;
        while (element && (element = element.parentNode))
        {
            if (element == document)
            {
                elementInDom = true;
            }        }        if (!elementInDom && this.options.helper === "original")
            return false;
        if (this.options.revert == "invalid" && !dropped || this.options.revert == "valid" && dropped || this.options.revert === true || $.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))
        {
            var that = this;
            ($(this.helper)).animate(this.originalPosition, parseInt(this.options.revertDuration, 10),             function()
            {
                if (that._trigger("stop", event) !== false)
                {
                    that._clear();
                }            });
        }        else
        {
            if (this._trigger("stop", event) !== false)
            {
                this._clear();
            }        }        return false;
    }, _mouseUp:     function(event)
    {
        ($("div.ui-draggable-iframeFix")).each(        function()
        {
            this.parentNode.removeChild(this);
        });
        if ($.ui.ddmanager)
            $.ui.ddmanager.dragStop(this, event);
        return $.ui.mouse.prototype._mouseUp.call(this, event);
    }, cancel:     function()
    {
        if (this.helper.is(".ui-draggable-dragging"))
        {
            this._mouseUp({});
        }        else
        {
            this._clear();
        }        return this;
    }, _getHandle:     function(event)
    {
        var handle = !this.options.handle || !($(this.options.handle, this.element)).length ? true : false;
        ((($(this.options.handle, this.element)).find("*")).andSelf()).each(        function()
        {
            if (this == event.target)
                handle = true;
        });
        return handle;
    }, _createHelper:     function(event)
    {
        var o = this.options;
        var helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : o.helper == 'clone' ? (this.element.clone()).removeAttr('id') : this.element;
        if (!(helper.parents('body')).length)
            helper.appendTo(o.appendTo == 'parent' ? this.element[0].parentNode : o.appendTo);
        if (helper[0] != this.element[0] && !/(fixed|absolute)/.test(helper.css("position")))
            helper.css("position", "absolute");
        return helper;
    }, _adjustOffsetFromHelper:     function(obj)
    {
        if (typeof obj == 'string')
        {
            obj = obj.split(' ');
        }        if ($.isArray(obj))
        {
            obj = {left: +obj[0], top: +obj[1] || 0};
        }        if ('left' in obj)
        {
            this.offset.click.left = obj.left + this.margins.left;
        }        if ('right' in obj)
        {
            this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
        }        if ('top' in obj)
        {
            this.offset.click.top = obj.top + this.margins.top;
        }        if ('bottom' in obj)
        {
            this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
        }    }, _getParentOffset:     function()
    {
        this.offsetParent = this.helper.offsetParent();
        var po = this.offsetParent.offset();
        if (this.cssPosition == 'absolute' && this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0]))
        {
            po.left += this.scrollParent.scrollLeft();
            po.top += this.scrollParent.scrollTop();
        }        if (this.offsetParent[0] == document.body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == 'html' && $.ui.ie)
            po = {top: 0, left: 0};
        return {top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)};
    }, _getRelativeOffset:     function()
    {
        if (this.cssPosition == "relative")
        {
            var p = this.element.position();
            return {top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(), left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()};
        }        else
        {
            return {top: 0, left: 0};
        }    }, _cacheMargins:     function()
    {
        this.margins = {left: parseInt(this.element.css("marginLeft"), 10) || 0, top: parseInt(this.element.css("marginTop"), 10) || 0, right: parseInt(this.element.css("marginRight"), 10) || 0, bottom: parseInt(this.element.css("marginBottom"), 10) || 0};
    }, _cacheHelperProportions:     function()
    {
        this.helperProportions = {width: this.helper.outerWidth(), height: this.helper.outerHeight()};
    }, _setContainment:     function()
    {
        var o = this.options;
        if (o.containment == 'parent')
            o.containment = this.helper[0].parentNode;
        if (o.containment == 'document' || o.containment == 'window')
            this.containment = [o.containment == 'document' ? 0 : ($(window)).scrollLeft() - this.offset.relative.left - this.offset.parent.left, o.containment == 'document' ? 0 : ($(window)).scrollTop() - this.offset.relative.top - this.offset.parent.top, (o.containment == 'document' ? 0 : ($(window)).scrollLeft()) + ($(o.containment == 'document' ? document : window)).width() - this.helperProportions.width - this.margins.left, (o.containment == 'document' ? 0 : ($(window)).scrollTop()) + (($(o.containment == 'document' ? document : window)).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
        if (!/^(document|window|parent)$/.test(o.containment) && o.containment.constructor != Array)
        {
            var c = $(o.containment);
            var ce = c[0];
            if (!ce)
                return;
            var co = c.offset();
            var over = ($(ce)).css("overflow") != 'hidden';
            this.containment = [(parseInt(($(ce)).css("borderLeftWidth"), 10) || 0) + (parseInt(($(ce)).css("paddingLeft"), 10) || 0), (parseInt(($(ce)).css("borderTopWidth"), 10) || 0) + (parseInt(($(ce)).css("paddingTop"), 10) || 0), (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(($(ce)).css("borderLeftWidth"), 10) || 0) - (parseInt(($(ce)).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(($(ce)).css("borderTopWidth"), 10) || 0) - (parseInt(($(ce)).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom];
            this.relative_container = c;
        }        else if (o.containment.constructor == Array)
        {
            this.containment = o.containment;
        }    }, _convertPositionTo:     function(d, pos)
    {
        if (!pos)
            pos = this.position;
        var mod = d == "absolute" ? 1 : -1;
        var o = this.options,
            scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
            scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
        return {top: pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - (this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod, left: pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - (this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod};
    }, _generatePosition:     function(event)
    {
        var o = this.options,
            scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
            scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
        var pageX = event.pageX;
        var pageY = event.pageY;
        if (this.originalPosition)
        {
            var containment;
            if (this.containment)
            {
                if (this.relative_container)
                {
                    var co = this.relative_container.offset();
                    containment = [this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top];
                }                else
                {
                    containment = this.containment;
                }                if (event.pageX - this.offset.click.left < containment[0])
                    pageX = containment[0] + this.offset.click.left;
                if (event.pageY - this.offset.click.top < containment[1])
                    pageY = containment[1] + this.offset.click.top;
                if (event.pageX - this.offset.click.left > containment[2])
                    pageX = containment[2] + this.offset.click.left;
                if (event.pageY - this.offset.click.top > containment[3])
                    pageY = containment[3] + this.offset.click.top;
            }            if (o.grid)
            {
                var top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
                pageY = containment ? !(top - this.offset.click.top < containment[1] || top - this.offset.click.top > containment[3]) ? top : !(top - this.offset.click.top < containment[1]) ? top - o.grid[1] : top + o.grid[1] : top;
                var left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
                pageX = containment ? !(left - this.offset.click.left < containment[0] || left - this.offset.click.left > containment[2]) ? left : !(left - this.offset.click.left < containment[0]) ? left - o.grid[0] : left + o.grid[0] : left;
            }        }        return {top: pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()), left: pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())};
    }, _clear:     function()
    {
        this.helper.removeClass("ui-draggable-dragging");
        if (this.helper[0] != this.element[0] && !this.cancelHelperRemoval)
            this.helper.remove();
        this.helper = null;
        this.cancelHelperRemoval = false;
    }, _trigger:     function(type, event, ui)
    {
        ui = ui || this._uiHash();
        $.ui.plugin.call(this, type, [event, ui]);
        if (type == "drag")
            this.positionAbs = this._convertPositionTo("absolute");
        return $.Widget.prototype._trigger.call(this, type, event, ui);
    }, plugins: {}, _uiHash:     function(event)
    {
        return {helper: this.helper, position: this.position, originalPosition: this.originalPosition, offset: this.positionAbs};
    }});
    $.ui.plugin.add("draggable", "connectToSortable", {start:     function(event, ui)
    {
        var inst = ($(this)).data("draggable"),
            o = inst.options,
            uiSortable = $.extend({}, ui, {item: inst.element});
        inst.sortables = [];
        ($(o.connectToSortable)).each(        function()
        {
            var sortable = $.data(this, 'sortable');
            if (sortable && !sortable.options.disabled)
            {
                inst.sortables.push({instance: sortable, shouldRevert: sortable.options.revert});
                sortable.refreshPositions();
                sortable._trigger("activate", event, uiSortable);
            }        });
    }, stop:     function(event, ui)
    {
        var inst = ($(this)).data("draggable"),
            uiSortable = $.extend({}, ui, {item: inst.element});
        $.each(inst.sortables,         function()
        {
            if (this.instance.isOver)
            {
                this.instance.isOver = 0;
                inst.cancelHelperRemoval = true;
                this.instance.cancelHelperRemoval = false;
                if (this.shouldRevert)
                    this.instance.options.revert = true;
                this.instance._mouseStop(event);
                this.instance.options.helper = this.instance.options._helper;
                if (inst.options.helper == 'original')
                    this.instance.currentItem.css({top: 'auto', left: 'auto'});
            }            else
            {
                this.instance.cancelHelperRemoval = false;
                this.instance._trigger("deactivate", event, uiSortable);
            }        });
    }, drag:     function(event, ui)
    {
        var inst = ($(this)).data("draggable"),
            that = this;
        var checkPos =         function(o)
        {
            var dyClick = this.offset.click.top,
                dxClick = this.offset.click.left;
            var helperTop = this.positionAbs.top,
                helperLeft = this.positionAbs.left;
            var itemHeight = o.height,
                itemWidth = o.width;
            var itemTop = o.top,
                itemLeft = o.left;
            return $.ui.isOver(helperTop + dyClick, helperLeft + dxClick, itemTop, itemLeft, itemHeight, itemWidth);
        };
        $.each(inst.sortables,         function(i)
        {
            var innermostIntersecting = false;
            var thisSortable = this;
            this.instance.positionAbs = inst.positionAbs;
            this.instance.helperProportions = inst.helperProportions;
            this.instance.offset.click = inst.offset.click;
            if (this.instance._intersectsWith(this.instance.containerCache))
            {
                innermostIntersecting = true;
                $.each(inst.sortables,                 function()
                {
                    this.instance.positionAbs = inst.positionAbs;
                    this.instance.helperProportions = inst.helperProportions;
                    this.instance.offset.click = inst.offset.click;
                    if (this != thisSortable && this.instance._intersectsWith(this.instance.containerCache) && $.ui.contains(thisSortable.instance.element[0], this.instance.element[0]))
                        innermostIntersecting = false;
                    return innermostIntersecting;
                });
            }            if (innermostIntersecting)
            {
                if (!this.instance.isOver)
                {
                    this.instance.isOver = 1;
                    this.instance.currentItem = (((($(that)).clone()).removeAttr('id')).appendTo(this.instance.element)).data("sortable-item", true);
                    this.instance.options._helper = this.instance.options.helper;
                    this.instance.options.helper =                     function()
                    {
                        return ui.helper[0];
                    };
                    event.target = this.instance.currentItem[0];
                    this.instance._mouseCapture(event, true);
                    this.instance._mouseStart(event, true, true);
                    this.instance.offset.click.top = inst.offset.click.top;
                    this.instance.offset.click.left = inst.offset.click.left;
                    this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
                    this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;
                    inst._trigger("toSortable", event);
                    inst.dropped = this.instance.element;
                    inst.currentItem = inst.element;
                    this.instance.fromOutside = inst;
                }                if (this.instance.currentItem)
                    this.instance._mouseDrag(event);
            }            else
            {
                if (this.instance.isOver)
                {
                    this.instance.isOver = 0;
                    this.instance.cancelHelperRemoval = true;
                    this.instance.options.revert = false;
                    this.instance._trigger('out', event, this.instance._uiHash(this.instance));
                    this.instance._mouseStop(event, true);
                    this.instance.options.helper = this.instance.options._helper;
                    this.instance.currentItem.remove();
                    if (this.instance.placeholder)
                        this.instance.placeholder.remove();
                    inst._trigger("fromSortable", event);
                    inst.dropped = false;
                }            }        });
    }});
    $.ui.plugin.add("draggable", "cursor", {start:     function(event, ui)
    {
        var t = $('body'),
            o = (($(this)).data('draggable')).options;
        if (t.css("cursor"))
            o._cursor = t.css("cursor");
        t.css("cursor", o.cursor);
    }, stop:     function(event, ui)
    {
        var o = (($(this)).data('draggable')).options;
        if (o._cursor)
            ($('body')).css("cursor", o._cursor);
    }});
    $.ui.plugin.add("draggable", "opacity", {start:     function(event, ui)
    {
        var t = $(ui.helper),
            o = (($(this)).data('draggable')).options;
        if (t.css("opacity"))
            o._opacity = t.css("opacity");
        t.css('opacity', o.opacity);
    }, stop:     function(event, ui)
    {
        var o = (($(this)).data('draggable')).options;
        if (o._opacity)
            ($(ui.helper)).css('opacity', o._opacity);
    }});
    $.ui.plugin.add("draggable", "scroll", {start:     function(event, ui)
    {
        var i = ($(this)).data("draggable");
        if (i.scrollParent[0] != document && i.scrollParent[0].tagName != 'HTML')
            i.overflowOffset = i.scrollParent.offset();
    }, drag:     function(event, ui)
    {
        var i = ($(this)).data("draggable"),
            o = i.options,
            scrolled = false;
        if (i.scrollParent[0] != document && i.scrollParent[0].tagName != 'HTML')
        {
            if (!o.axis || o.axis != 'x')
            {
                if (i.overflowOffset.top + i.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity)
                    i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;
                else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity)
                    i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
            }            if (!o.axis || o.axis != 'y')
            {
                if (i.overflowOffset.left + i.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity)
                    i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;
                else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity)
                    i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
            }        }        else
        {
            if (!o.axis || o.axis != 'x')
            {
                if (event.pageY - ($(document)).scrollTop() < o.scrollSensitivity)
                    scrolled = ($(document)).scrollTop(($(document)).scrollTop() - o.scrollSpeed);
                else if (($(window)).height() - (event.pageY - ($(document)).scrollTop()) < o.scrollSensitivity)
                    scrolled = ($(document)).scrollTop(($(document)).scrollTop() + o.scrollSpeed);
            }            if (!o.axis || o.axis != 'y')
            {
                if (event.pageX - ($(document)).scrollLeft() < o.scrollSensitivity)
                    scrolled = ($(document)).scrollLeft(($(document)).scrollLeft() - o.scrollSpeed);
                else if (($(window)).width() - (event.pageX - ($(document)).scrollLeft()) < o.scrollSensitivity)
                    scrolled = ($(document)).scrollLeft(($(document)).scrollLeft() + o.scrollSpeed);
            }        }        if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour)
            $.ui.ddmanager.prepareOffsets(i, event);
    }});
    $.ui.plugin.add("draggable", "snap", {start:     function(event, ui)
    {
        var i = ($(this)).data("draggable"),
            o = i.options;
        i.snapElements = [];
        ($(o.snap.constructor != String ? o.snap.items || ':data(draggable)' : o.snap)).each(        function()
        {
            var $t = $(this);
            var $o = $t.offset();
            if (this != i.element[0])
                i.snapElements.push({item: this, width: $t.outerWidth(), height: $t.outerHeight(), top: $o.top, left: $o.left});
        });
    }, drag:     function(event, ui)
    {
        var inst = ($(this)).data("draggable"),
            o = inst.options;
        var d = o.snapTolerance;
        var x1 = ui.offset.left,
            x2 = x1 + inst.helperProportions.width,
            y1 = ui.offset.top,
            y2 = y1 + inst.helperProportions.height;
        for (var i = inst.snapElements.length - 1; i >= 0; i--)
        {
            var l = inst.snapElements[i].left,
                r = l + inst.snapElements[i].width,
                t = inst.snapElements[i].top,
                b = t + inst.snapElements[i].height;
            if (!(l - d < x1 && x1 < r + d && t - d < y1 && y1 < b + d || l - d < x1 && x1 < r + d && t - d < y2 && y2 < b + d || l - d < x2 && x2 < r + d && t - d < y1 && y1 < b + d || l - d < x2 && x2 < r + d && t - d < y2 && y2 < b + d))
            {
                if (inst.snapElements[i].snapping)
                    inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {snapItem: inst.snapElements[i].item}));
                inst.snapElements[i].snapping = false;
                continue;
            }            if (o.snapMode != 'inner')
            {
                var ts = Math.abs(t - y2) <= d;
                var bs = Math.abs(b - y1) <= d;
                var ls = Math.abs(l - x2) <= d;
                var rs = Math.abs(r - x1) <= d;
                if (ts)
                    ui.position.top = (inst._convertPositionTo("relative", {top: t - inst.helperProportions.height, left: 0})).top - inst.margins.top;
                if (bs)
                    ui.position.top = (inst._convertPositionTo("relative", {top: b, left: 0})).top - inst.margins.top;
                if (ls)
                    ui.position.left = (inst._convertPositionTo("relative", {top: 0, left: l - inst.helperProportions.width})).left - inst.margins.left;
                if (rs)
                    ui.position.left = (inst._convertPositionTo("relative", {top: 0, left: r})).left - inst.margins.left;
            }            var first = ts || bs || ls || rs;
            if (o.snapMode != 'outer')
            {
                var ts = Math.abs(t - y1) <= d;
                var bs = Math.abs(b - y2) <= d;
                var ls = Math.abs(l - x1) <= d;
                var rs = Math.abs(r - x2) <= d;
                if (ts)
                    ui.position.top = (inst._convertPositionTo("relative", {top: t, left: 0})).top - inst.margins.top;
                if (bs)
                    ui.position.top = (inst._convertPositionTo("relative", {top: b - inst.helperProportions.height, left: 0})).top - inst.margins.top;
                if (ls)
                    ui.position.left = (inst._convertPositionTo("relative", {top: 0, left: l})).left - inst.margins.left;
                if (rs)
                    ui.position.left = (inst._convertPositionTo("relative", {top: 0, left: r - inst.helperProportions.width})).left - inst.margins.left;
            }            if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first))
                inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {snapItem: inst.snapElements[i].item}));
            inst.snapElements[i].snapping = ts || bs || ls || rs || first;
        }    }});
    $.ui.plugin.add("draggable", "stack", {start:     function(event, ui)
    {
        var o = (($(this)).data("draggable")).options;
        var group = ($.makeArray($(o.stack))).sort(        function(a, b)
        {
            return (parseInt(($(a)).css("zIndex"), 10) || 0) - (parseInt(($(b)).css("zIndex"), 10) || 0);
        });
        if (!group.length)
        {
            return;
        }        var min = parseInt(group[0].style.zIndex) || 0;
        ($(group)).each(        function(i)
        {
            this.style.zIndex = min + i;
        });
        this[0].style.zIndex = min + group.length;
    }});
    $.ui.plugin.add("draggable", "zIndex", {start:     function(event, ui)
    {
        var t = $(ui.helper),
            o = (($(this)).data("draggable")).options;
        if (t.css("zIndex"))
            o._zIndex = t.css("zIndex");
        t.css('zIndex', o.zIndex);
    }, stop:     function(event, ui)
    {
        var o = (($(this)).data("draggable")).options;
        if (o._zIndex)
            ($(ui.helper)).css('zIndex', o._zIndex);
    }});
})(jQuery);
(function($, undefined)
{
    $.widget("ui.droppable", {version: "1.9.2", widgetEventPrefix: "drop", options: {accept: '*', activeClass: false, addClasses: true, greedy: false, hoverClass: false, scope: 'default', tolerance: 'intersect'}, _create:     function()
    {
        var o = this.options,
            accept = o.accept;
        this.isover = 0;
        this.isout = 1;
        this.accept = $.isFunction(accept) ? accept :         function(d)
        {
            return d.is(accept);
        };
        this.proportions = {width: this.element[0].offsetWidth, height: this.element[0].offsetHeight};
        $.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];
        $.ui.ddmanager.droppables[o.scope].push(this);
        o.addClasses && this.element.addClass("ui-droppable");
    }, _destroy:     function()
    {
        var drop = $.ui.ddmanager.droppables[this.options.scope];
        for (var i = 0; i < drop.length; i++)
            if (drop[i] == this)
                drop.splice(i, 1);
        this.element.removeClass("ui-droppable ui-droppable-disabled");
    }, _setOption:     function(key, value)
    {
        if (key == 'accept')
        {
            this.accept = $.isFunction(value) ? value :             function(d)
            {
                return d.is(value);
            };
        }        $.Widget.prototype._setOption.apply(this, arguments);
    }, _activate:     function(event)
    {
        var draggable = $.ui.ddmanager.current;
        if (this.options.activeClass)
            this.element.addClass(this.options.activeClass);
        draggable && this._trigger('activate', event, this.ui(draggable));
    }, _deactivate:     function(event)
    {
        var draggable = $.ui.ddmanager.current;
        if (this.options.activeClass)
            this.element.removeClass(this.options.activeClass);
        draggable && this._trigger('deactivate', event, this.ui(draggable));
    }, _over:     function(event)
    {
        var draggable = $.ui.ddmanager.current;
        if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0])
            return;
        if (this.accept.call(this.element[0], draggable.currentItem || draggable.element))
        {
            if (this.options.hoverClass)
                this.element.addClass(this.options.hoverClass);
            this._trigger('over', event, this.ui(draggable));
        }    }, _out:     function(event)
    {
        var draggable = $.ui.ddmanager.current;
        if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0])
            return;
        if (this.accept.call(this.element[0], draggable.currentItem || draggable.element))
        {
            if (this.options.hoverClass)
                this.element.removeClass(this.options.hoverClass);
            this._trigger('out', event, this.ui(draggable));
        }    }, _drop:     function(event, custom)
    {
        var draggable = custom || $.ui.ddmanager.current;
        if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0])
            return false;
        var childrenIntersection = false;
        ((this.element.find(":data(droppable)")).not(".ui-draggable-dragging")).each(        function()
        {
            var inst = $.data(this, 'droppable');
            if (inst.options.greedy && !inst.options.disabled && inst.options.scope == draggable.options.scope && inst.accept.call(inst.element[0], draggable.currentItem || draggable.element) && $.ui.intersect(draggable, $.extend(inst, {offset: inst.element.offset()}), inst.options.tolerance))
            {
                childrenIntersection = true;
                return false;
            }        });
        if (childrenIntersection)
            return false;
        if (this.accept.call(this.element[0], draggable.currentItem || draggable.element))
        {
            if (this.options.activeClass)
                this.element.removeClass(this.options.activeClass);
            if (this.options.hoverClass)
                this.element.removeClass(this.options.hoverClass);
            this._trigger('drop', event, this.ui(draggable));
            return this.element;
        }        return false;
    }, ui:     function(c)
    {
        return {draggable: c.currentItem || c.element, helper: c.helper, position: c.position, offset: c.positionAbs};
    }});
    $.ui.intersect =     function(draggable, droppable, toleranceMode)
    {
        if (!droppable.offset)
            return false;
        var x1 = (draggable.positionAbs || draggable.position.absolute).left,
            x2 = x1 + draggable.helperProportions.width,
            y1 = (draggable.positionAbs || draggable.position.absolute).top,
            y2 = y1 + draggable.helperProportions.height;
        var l = droppable.offset.left,
            r = l + droppable.proportions.width,
            t = droppable.offset.top,
            b = t + droppable.proportions.height;
        switch(toleranceMode) {
            case 'fit':
                return l <= x1 && x2 <= r && t <= y1 && y2 <= b;
                break;
            case 'intersect':
                return l < x1 + draggable.helperProportions.width / 2 && x2 - draggable.helperProportions.width / 2 < r && t < y1 + draggable.helperProportions.height / 2 && y2 - draggable.helperProportions.height / 2 < b;
                break;
            case 'pointer':
                var draggableLeft = (draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left,
                    draggableTop = (draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top,
                    isOver = $.ui.isOver(draggableTop, draggableLeft, t, l, droppable.proportions.height, droppable.proportions.width);
                return isOver;
                break;
            case 'touch':
                return (y1 >= t && y1 <= b || y2 >= t && y2 <= b || y1 < t && y2 > b) && (x1 >= l && x1 <= r || x2 >= l && x2 <= r || x1 < l && x2 > r);
                break;
default:
                return false;
                break;
        }
    };
    $.ui.ddmanager = {current: null, droppables: {'default': []}, prepareOffsets:     function(t, event)
    {
        var m = $.ui.ddmanager.droppables[t.options.scope] || [];
        var type = event ? event.type : null;
        var list = ((t.currentItem || t.element).find(":data(droppable)")).andSelf();
        droppablesLoop:         for (var i = 0; i < m.length; i++)
        {
            if (m[i].options.disabled || t && !m[i].accept.call(m[i].element[0], t.currentItem || t.element))
                continue;
            for (var j = 0; j < list.length; j++)
            {
                if (list[j] == m[i].element[0])
                {
                    m[i].proportions.height = 0;
                    continue droppablesLoop;
                }            }            m[i].visible = m[i].element.css("display") != "none";
            if (!m[i].visible)
                continue;
            if (type == "mousedown")
                m[i]._activate.call(m[i], event);
            m[i].offset = m[i].element.offset();
            m[i].proportions = {width: m[i].element[0].offsetWidth, height: m[i].element[0].offsetHeight};
        }    }, drop:     function(draggable, event)
    {
        var dropped = false;
        $.each($.ui.ddmanager.droppables[draggable.options.scope] || [],         function()
        {
            if (!this.options)
                return;
            if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance))
                dropped = this._drop.call(this, event) || dropped;
            if (!this.options.disabled && this.visible && this.accept.call(this.element[0], draggable.currentItem || draggable.element))
            {
                this.isout = 1;
                this.isover = 0;
                this._deactivate.call(this, event);
            }        });
        return dropped;
    }, dragStart:     function(draggable, event)
    {
        (draggable.element.parentsUntil("body")).bind("scroll.droppable",         function()
        {
            if (!draggable.options.refreshPositions)
                $.ui.ddmanager.prepareOffsets(draggable, event);
        });
    }, drag:     function(draggable, event)
    {
        if (draggable.options.refreshPositions)
            $.ui.ddmanager.prepareOffsets(draggable, event);
        $.each($.ui.ddmanager.droppables[draggable.options.scope] || [],         function()
        {
            if (this.options.disabled || this.greedyChild || !this.visible)
                return;
            var intersects = $.ui.intersect(draggable, this, this.options.tolerance);
            var c = !intersects && this.isover == 1 ? 'isout' : intersects && this.isover == 0 ? 'isover' : null;
            if (!c)
                return;
            var parentInstance;
            if (this.options.greedy)
            {
                var scope = this.options.scope;
                var parent = (this.element.parents(':data(droppable)')).filter(                function()
                {
                    return ($.data(this, 'droppable')).options.scope === scope;
                });
                if (parent.length)
                {
                    parentInstance = $.data(parent[0], 'droppable');
                    parentInstance.greedyChild = c == 'isover' ? 1 : 0;
                }            }            if (parentInstance && c == 'isover')
            {
                parentInstance['isover'] = 0;
                parentInstance['isout'] = 1;
                parentInstance._out.call(parentInstance, event);
            }            this[c] = 1;
            this[c == 'isout' ? 'isover' : 'isout'] = 0;
            this[c == "isover" ? "_over" : "_out"].call(this, event);
            if (parentInstance && c == 'isout')
            {
                parentInstance['isout'] = 0;
                parentInstance['isover'] = 1;
                parentInstance._over.call(parentInstance, event);
            }        });
    }, dragStop:     function(draggable, event)
    {
        (draggable.element.parentsUntil("body")).unbind("scroll.droppable");
        if (!draggable.options.refreshPositions)
            $.ui.ddmanager.prepareOffsets(draggable, event);
    }};
})(jQuery);
(function($, undefined)
{
    $.widget("ui.resizable", $.ui.mouse, {version: "1.9.2", widgetEventPrefix: "resize", options: {alsoResize: false, animate: false, animateDuration: "slow", animateEasing: "swing", aspectRatio: false, autoHide: false, containment: false, ghost: false, grid: false, handles: "e,s,se", helper: false, maxHeight: null, maxWidth: null, minHeight: 10, minWidth: 10, zIndex: 1000}, _create:     function()
    {
        var that = this,
            o = this.options;
        this.element.addClass("ui-resizable");
        $.extend(this, {_aspectRatio: !!o.aspectRatio, aspectRatio: o.aspectRatio, originalElement: this.element, _proportionallyResizeElements: [], _helper: o.helper || o.ghost || o.animate ? o.helper || 'ui-resizable-helper' : null});
        if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i))
        {
            this.element.wrap(($('<div class="ui-wrapper" style="overflow: hidden;"></div>')).css({position: this.element.css('position'), width: this.element.outerWidth(), height: this.element.outerHeight(), top: this.element.css('top'), left: this.element.css('left')}));
            this.element = (this.element.parent()).data("resizable", this.element.data('resizable'));
            this.elementIsWrapper = true;
            this.element.css({marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom")});
            this.originalElement.css({marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});
            this.originalResizeStyle = this.originalElement.css('resize');
            this.originalElement.css('resize', 'none');
            this._proportionallyResizeElements.push(this.originalElement.css({position: 'static', zoom: 1, display: 'block'}));
            this.originalElement.css({margin: this.originalElement.css('margin')});
            this._proportionallyResize();
        }        this.handles = o.handles || (!($('.ui-resizable-handle', this.element)).length ? "e,s,se" : {n: '.ui-resizable-n', e: '.ui-resizable-e', s: '.ui-resizable-s', w: '.ui-resizable-w', se: '.ui-resizable-se', sw: '.ui-resizable-sw', ne: '.ui-resizable-ne', nw: '.ui-resizable-nw'});
        if (this.handles.constructor == String)
        {
            if (this.handles == 'all')
                this.handles = 'n,e,s,w,se,sw,ne,nw';
            var n = this.handles.split(",");
            this.handles = {};
            for (var i = 0; i < n.length; i++)
            {
                var handle = $.trim(n[i]),
                    hname = 'ui-resizable-' + handle;
                var axis = $('<div class="ui-resizable-handle ' + hname + '"></div>');
                axis.css({zIndex: o.zIndex});
                if ('se' == handle)
                {
                    axis.addClass('ui-icon ui-icon-gripsmall-diagonal-se');
                }                this.handles[handle] = '.ui-resizable-' + handle;
                this.element.append(axis);
            }        }        this._renderAxis =         function(target)
        {
            target = target || this.element;
            for (var i in this.handles)
            {
                if (this.handles[i].constructor == String)
                    this.handles[i] = ($(this.handles[i], this.element)).show();
                if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i))
                {
                    var axis = $(this.handles[i], this.element),
                        padWrapper = 0;
                    padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();
                    var padPos = ['padding', /ne|nw|n/.test(i) ? 'Top' : /se|sw|s/.test(i) ? 'Bottom' : /^e$/.test(i) ? 'Right' : 'Left'].join("");
                    target.css(padPos, padWrapper);
                    this._proportionallyResize();
                }                if (!($(this.handles[i])).length)
                    continue;
            }        };
        this._renderAxis(this.element);
        this._handles = ($('.ui-resizable-handle', this.element)).disableSelection();
        this._handles.mouseover(        function()
        {
            if (!that.resizing)
            {
                if (this.className)
                    var axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
                that.axis = axis && axis[1] ? axis[1] : 'se';
            }        });
        if (o.autoHide)
        {
            this._handles.hide();
            ((($(this.element)).addClass("ui-resizable-autohide")).mouseenter(            function()
            {
                if (o.disabled)
                    return;
                ($(this)).removeClass("ui-resizable-autohide");
                that._handles.show();
            })).mouseleave(            function()
            {
                if (o.disabled)
                    return;
                if (!that.resizing)
                {
                    ($(this)).addClass("ui-resizable-autohide");
                    that._handles.hide();
                }            });
        }        this._mouseInit();
    }, _destroy:     function()
    {
        this._mouseDestroy();
        var _destroy =         function(exp)
        {
            (((((($(exp)).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")).removeData("resizable")).removeData("ui-resizable")).unbind(".resizable")).find('.ui-resizable-handle')).remove();
        };
        if (this.elementIsWrapper)
        {
            _destroy(this.element);
            var wrapper = this.element;
            (this.originalElement.css({position: wrapper.css('position'), width: wrapper.outerWidth(), height: wrapper.outerHeight(), top: wrapper.css('top'), left: wrapper.css('left')})).insertAfter(wrapper);
            wrapper.remove();
        }        this.originalElement.css('resize', this.originalResizeStyle);
        _destroy(this.originalElement);
        return this;
    }, _mouseCapture:     function(event)
    {
        var handle = false;
        for (var i in this.handles)
        {
            if (($(this.handles[i]))[0] == event.target)
            {
                handle = true;
            }        }        return !this.options.disabled && handle;
    }, _mouseStart:     function(event)
    {
        var o = this.options,
            iniPos = this.element.position(),
            el = this.element;
        this.resizing = true;
        this.documentScroll = {top: ($(document)).scrollTop(), left: ($(document)).scrollLeft()};
        if (el.is('.ui-draggable') || /absolute/.test(el.css('position')))
        {
            el.css({position: 'absolute', top: iniPos.top, left: iniPos.left});
        }        this._renderProxy();
        var curleft = num(this.helper.css('left')),
            curtop = num(this.helper.css('top'));
        if (o.containment)
        {
            curleft += ($(o.containment)).scrollLeft() || 0;
            curtop += ($(o.containment)).scrollTop() || 0;
        }        this.offset = this.helper.offset();
        this.position = {left: curleft, top: curtop};
        this.size = this._helper ? {width: el.outerWidth(), height: el.outerHeight()} : {width: el.width(), height: el.height()};
        this.originalSize = this._helper ? {width: el.outerWidth(), height: el.outerHeight()} : {width: el.width(), height: el.height()};
        this.originalPosition = {left: curleft, top: curtop};
        this.sizeDiff = {width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height()};
        this.originalMousePosition = {left: event.pageX, top: event.pageY};
        this.aspectRatio = typeof o.aspectRatio == 'number' ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1;
        var cursor = ($('.ui-resizable-' + this.axis)).css('cursor');
        ($('body')).css('cursor', cursor == 'auto' ? this.axis + '-resize' : cursor);
        el.addClass("ui-resizable-resizing");
        this._propagate("start", event);
        return true;
    }, _mouseDrag:     function(event)
    {
        var el = this.helper,
            o = this.options,
            props = {},
            that = this,
            smp = this.originalMousePosition,
            a = this.axis;
        var dx = event.pageX - smp.left || 0,
            dy = event.pageY - smp.top || 0;
        var trigger = this._change[a];
        if (!trigger)
            return false;
        var data = trigger.apply(this, [event, dx, dy]);
        this._updateVirtualBoundaries(event.shiftKey);
        if (this._aspectRatio || event.shiftKey)
            data = this._updateRatio(data, event);
        data = this._respectSize(data, event);
        this._propagate("resize", event);
        el.css({top: this.position.top + "px", left: this.position.left + "px", width: this.size.width + "px", height: this.size.height + "px"});
        if (!this._helper && this._proportionallyResizeElements.length)
            this._proportionallyResize();
        this._updateCache(data);
        this._trigger('resize', event, this.ui());
        return false;
    }, _mouseStop:     function(event)
    {
        this.resizing = false;
        var o = this.options,
            that = this;
        if (this._helper)
        {
            var pr = this._proportionallyResizeElements,
                ista = pr.length && /textarea/i.test(pr[0].nodeName),
                soffseth = ista && $.ui.hasScroll(pr[0], 'left') ? 0 : that.sizeDiff.height,
                soffsetw = ista ? 0 : that.sizeDiff.width;
            var s = {width: that.helper.width() - soffsetw, height: that.helper.height() - soffseth},
                left = parseInt(that.element.css('left'), 10) + (that.position.left - that.originalPosition.left) || null,
                top = parseInt(that.element.css('top'), 10) + (that.position.top - that.originalPosition.top) || null;
            if (!o.animate)
                this.element.css($.extend(s, {top: top, left: left}));
            that.helper.height(that.size.height);
            that.helper.width(that.size.width);
            if (this._helper && !o.animate)
                this._proportionallyResize();
        }        ($('body')).css('cursor', 'auto');
        this.element.removeClass("ui-resizable-resizing");
        this._propagate("stop", event);
        if (this._helper)
            this.helper.remove();
        return false;
    }, _updateVirtualBoundaries:     function(forceAspectRatio)
    {
        var o = this.options,
            pMinWidth,
            pMaxWidth,
            pMinHeight,
            pMaxHeight,
            b;
        b = {minWidth: isNumber(o.minWidth) ? o.minWidth : 0, maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity, minHeight: isNumber(o.minHeight) ? o.minHeight : 0, maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity};
        if (this._aspectRatio || forceAspectRatio)
        {
            pMinWidth = b.minHeight * this.aspectRatio;
            pMinHeight = b.minWidth / this.aspectRatio;
            pMaxWidth = b.maxHeight * this.aspectRatio;
            pMaxHeight = b.maxWidth / this.aspectRatio;
            if (pMinWidth > b.minWidth)
                b.minWidth = pMinWidth;
            if (pMinHeight > b.minHeight)
                b.minHeight = pMinHeight;
            if (pMaxWidth < b.maxWidth)
                b.maxWidth = pMaxWidth;
            if (pMaxHeight < b.maxHeight)
                b.maxHeight = pMaxHeight;
        }        this._vBoundaries = b;
    }, _updateCache:     function(data)
    {
        var o = this.options;
        this.offset = this.helper.offset();
        if (isNumber(data.left))
            this.position.left = data.left;
        if (isNumber(data.top))
            this.position.top = data.top;
        if (isNumber(data.height))
            this.size.height = data.height;
        if (isNumber(data.width))
            this.size.width = data.width;
    }, _updateRatio:     function(data, event)
    {
        var o = this.options,
            cpos = this.position,
            csize = this.size,
            a = this.axis;
        if (isNumber(data.height))
            data.width = data.height * this.aspectRatio;
        else if (isNumber(data.width))
            data.height = data.width / this.aspectRatio;
        if (a == 'sw')
        {
            data.left = cpos.left + (csize.width - data.width);
            data.top = null;
        }        if (a == 'nw')
        {
            data.top = cpos.top + (csize.height - data.height);
            data.left = cpos.left + (csize.width - data.width);
        }        return data;
    }, _respectSize:     function(data, event)
    {
        var el = this.helper,
            o = this._vBoundaries,
            pRatio = this._aspectRatio || event.shiftKey,
            a = this.axis,
            ismaxw = isNumber(data.width) && o.maxWidth && o.maxWidth < data.width,
            ismaxh = isNumber(data.height) && o.maxHeight && o.maxHeight < data.height,
            isminw = isNumber(data.width) && o.minWidth && o.minWidth > data.width,
            isminh = isNumber(data.height) && o.minHeight && o.minHeight > data.height;
        if (isminw)
            data.width = o.minWidth;
        if (isminh)
            data.height = o.minHeight;
        if (ismaxw)
            data.width = o.maxWidth;
        if (ismaxh)
            data.height = o.maxHeight;
        var dw = this.originalPosition.left + this.originalSize.width,
            dh = this.position.top + this.size.height;
        var cw = /sw|nw|w/.test(a),
            ch = /nw|ne|n/.test(a);
        if (isminw && cw)
            data.left = dw - o.minWidth;
        if (ismaxw && cw)
            data.left = dw - o.maxWidth;
        if (isminh && ch)
            data.top = dh - o.minHeight;
        if (ismaxh && ch)
            data.top = dh - o.maxHeight;
        var isNotwh = !data.width && !data.height;
        if (isNotwh && !data.left && data.top)
            data.top = null;
        else if (isNotwh && !data.top && data.left)
            data.left = null;
        return data;
    }, _proportionallyResize:     function()
    {
        var o = this.options;
        if (!this._proportionallyResizeElements.length)
            return;
        var element = this.helper || this.element;
        for (var i = 0; i < this._proportionallyResizeElements.length; i++)
        {
            var prel = this._proportionallyResizeElements[i];
            if (!this.borderDif)
            {
                var b = [prel.css('borderTopWidth'), prel.css('borderRightWidth'), prel.css('borderBottomWidth'), prel.css('borderLeftWidth')],
                    p = [prel.css('paddingTop'), prel.css('paddingRight'), prel.css('paddingBottom'), prel.css('paddingLeft')];
                this.borderDif = $.map(b,                 function(v, i)
                {
                    var border = parseInt(v, 10) || 0,
                        padding = parseInt(p[i], 10) || 0;
                    return border + padding;
                });
            }            prel.css({height: element.height() - this.borderDif[0] - this.borderDif[2] || 0, width: element.width() - this.borderDif[1] - this.borderDif[3] || 0});
        }    }, _renderProxy:     function()
    {
        var el = this.element,
            o = this.options;
        this.elementOffset = el.offset();
        if (this._helper)
        {
            this.helper = this.helper || $('<div style="overflow:hidden;"></div>');
            var ie6offset = $.ui.ie6 ? 1 : 0,
                pxyoffset = $.ui.ie6 ? 2 : -1;
            (this.helper.addClass(this._helper)).css({width: this.element.outerWidth() + pxyoffset, height: this.element.outerHeight() + pxyoffset, position: 'absolute', left: this.elementOffset.left - ie6offset + 'px', top: this.elementOffset.top - ie6offset + 'px', zIndex: ++o.zIndex});
            (this.helper.appendTo("body")).disableSelection();
        }        else
        {
            this.helper = this.element;
        }    }, _change: {e:     function(event, dx, dy)
    {
        return {width: this.originalSize.width + dx};
    }, w:     function(event, dx, dy)
    {
        var o = this.options,
            cs = this.originalSize,
            sp = this.originalPosition;
        return {left: sp.left + dx, width: cs.width - dx};
    }, n:     function(event, dx, dy)
    {
        var o = this.options,
            cs = this.originalSize,
            sp = this.originalPosition;
        return {top: sp.top + dy, height: cs.height - dy};
    }, s:     function(event, dx, dy)
    {
        return {height: this.originalSize.height + dy};
    }, se:     function(event, dx, dy)
    {
        return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
    }, sw:     function(event, dx, dy)
    {
        return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
    }, ne:     function(event, dx, dy)
    {
        return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
    }, nw:     function(event, dx, dy)
    {
        return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
    }}, _propagate:     function(n, event)
    {
        $.ui.plugin.call(this, n, [event, this.ui()]);
        n != "resize" && this._trigger(n, event, this.ui());
    }, plugins: {}, ui:     function()
    {
        return {originalElement: this.originalElement, element: this.element, helper: this.helper, position: this.position, size: this.size, originalSize: this.originalSize, originalPosition: this.originalPosition};
    }});
    $.ui.plugin.add("resizable", "alsoResize", {start:     function(event, ui)
    {
        var that = ($(this)).data("resizable"),
            o = that.options;
        var _store =         function(exp)
        {
            ($(exp)).each(            function()
            {
                var el = $(this);
                el.data("resizable-alsoresize", {width: parseInt(el.width(), 10), height: parseInt(el.height(), 10), left: parseInt(el.css('left'), 10), top: parseInt(el.css('top'), 10)});
            });
        };
        if (typeof o.alsoResize == 'object' && !o.alsoResize.parentNode)
        {
            if (o.alsoResize.length)
            {
                o.alsoResize = o.alsoResize[0];
                _store(o.alsoResize);
            }            else
            {
                $.each(o.alsoResize,                 function(exp)
                {
                    _store(exp);
                });
            }        }        else
        {
            _store(o.alsoResize);
        }    }, resize:     function(event, ui)
    {
        var that = ($(this)).data("resizable"),
            o = that.options,
            os = that.originalSize,
            op = that.originalPosition;
        var delta = {height: that.size.height - os.height || 0, width: that.size.width - os.width || 0, top: that.position.top - op.top || 0, left: that.position.left - op.left || 0},
            _alsoResize =         function(exp, c)
        {
            ($(exp)).each(            function()
            {
                var el = $(this),
                    start = ($(this)).data("resizable-alsoresize"),
                    style = {},
                    css = c && c.length ? c : (el.parents(ui.originalElement[0])).length ? ['width', 'height'] : ['width', 'height', 'top', 'left'];
                $.each(css,                 function(i, prop)
                {
                    var sum = (start[prop] || 0) + (delta[prop] || 0);
                    if (sum && sum >= 0)
                        style[prop] = sum || null;
                });
                el.css(style);
            });
        };
        if (typeof o.alsoResize == 'object' && !o.alsoResize.nodeType)
        {
            $.each(o.alsoResize,             function(exp, c)
            {
                _alsoResize(exp, c);
            });
        }        else
        {
            _alsoResize(o.alsoResize);
        }    }, stop:     function(event, ui)
    {
        ($(this)).removeData("resizable-alsoresize");
    }});
    $.ui.plugin.add("resizable", "animate", {stop:     function(event, ui)
    {
        var that = ($(this)).data("resizable"),
            o = that.options;
        var pr = that._proportionallyResizeElements,
            ista = pr.length && /textarea/i.test(pr[0].nodeName),
            soffseth = ista && $.ui.hasScroll(pr[0], 'left') ? 0 : that.sizeDiff.height,
            soffsetw = ista ? 0 : that.sizeDiff.width;
        var style = {width: that.size.width - soffsetw, height: that.size.height - soffseth},
            left = parseInt(that.element.css('left'), 10) + (that.position.left - that.originalPosition.left) || null,
            top = parseInt(that.element.css('top'), 10) + (that.position.top - that.originalPosition.top) || null;
        that.element.animate($.extend(style, top && left ? {top: top, left: left} : {}), {duration: o.animateDuration, easing: o.animateEasing, step:         function()
        {
            var data = {width: parseInt(that.element.css('width'), 10), height: parseInt(that.element.css('height'), 10), top: parseInt(that.element.css('top'), 10), left: parseInt(that.element.css('left'), 10)};
            if (pr && pr.length)
                ($(pr[0])).css({width: data.width, height: data.height});
            that._updateCache(data);
            that._propagate("resize", event);
        }});
    }});
    $.ui.plugin.add("resizable", "containment", {start:     function(event, ui)
    {
        var that = ($(this)).data("resizable"),
            o = that.options,
            el = that.element;
        var oc = o.containment,
            ce = oc instanceof $ ? oc.get(0) : /parent/.test(oc) ? (el.parent()).get(0) : oc;
        if (!ce)
            return;
        that.containerElement = $(ce);
        if (/document/.test(oc) || oc == document)
        {
            that.containerOffset = {left: 0, top: 0};
            that.containerPosition = {left: 0, top: 0};
            that.parentData = {element: $(document), left: 0, top: 0, width: ($(document)).width(), height: ($(document)).height() || document.body.parentNode.scrollHeight};
        }        else
        {
            var element = $(ce),
                p = [];
            ($(["Top", "Right", "Left", "Bottom"])).each(            function(i, name)
            {
                p[i] = num(element.css("padding" + name));
            });
            that.containerOffset = element.offset();
            that.containerPosition = element.position();
            that.containerSize = {height: element.innerHeight() - p[3], width: element.innerWidth() - p[1]};
            var co = that.containerOffset,
                ch = that.containerSize.height,
                cw = that.containerSize.width,
                width = $.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw,
                height = $.ui.hasScroll(ce) ? ce.scrollHeight : ch;
            that.parentData = {element: ce, left: co.left, top: co.top, width: width, height: height};
        }    }, resize:     function(event, ui)
    {
        var that = ($(this)).data("resizable"),
            o = that.options,
            ps = that.containerSize,
            co = that.containerOffset,
            cs = that.size,
            cp = that.position,
            pRatio = that._aspectRatio || event.shiftKey,
            cop = {top: 0, left: 0},
            ce = that.containerElement;
        if (ce[0] != document && /static/.test(ce.css('position')))
            cop = co;
        if (cp.left < (that._helper ? co.left : 0))
        {
            that.size.width = that.size.width + (that._helper ? that.position.left - co.left : that.position.left - cop.left);
            if (pRatio)
                that.size.height = that.size.width / that.aspectRatio;
            that.position.left = o.helper ? co.left : 0;
        }        if (cp.top < (that._helper ? co.top : 0))
        {
            that.size.height = that.size.height + (that._helper ? that.position.top - co.top : that.position.top);
            if (pRatio)
                that.size.width = that.size.height * that.aspectRatio;
            that.position.top = that._helper ? co.top : 0;
        }        that.offset.left = that.parentData.left + that.position.left;
        that.offset.top = that.parentData.top + that.position.top;
        var woset = Math.abs((that._helper ? that.offset.left - cop.left : that.offset.left - cop.left) + that.sizeDiff.width),
            hoset = Math.abs((that._helper ? that.offset.top - cop.top : that.offset.top - co.top) + that.sizeDiff.height);
        var isParent = that.containerElement.get(0) == (that.element.parent()).get(0),
            isOffsetRelative = /relative|absolute/.test(that.containerElement.css('position'));
        if (isParent && isOffsetRelative)
            woset -= that.parentData.left;
        if (woset + that.size.width >= that.parentData.width)
        {
            that.size.width = that.parentData.width - woset;
            if (pRatio)
                that.size.height = that.size.width / that.aspectRatio;
        }        if (hoset + that.size.height >= that.parentData.height)
        {
            that.size.height = that.parentData.height - hoset;
            if (pRatio)
                that.size.width = that.size.height * that.aspectRatio;
        }    }, stop:     function(event, ui)
    {
        var that = ($(this)).data("resizable"),
            o = that.options,
            cp = that.position,
            co = that.containerOffset,
            cop = that.containerPosition,
            ce = that.containerElement;
        var helper = $(that.helper),
            ho = helper.offset(),
            w = helper.outerWidth() - that.sizeDiff.width,
            h = helper.outerHeight() - that.sizeDiff.height;
        if (that._helper && !o.animate && /relative/.test(ce.css('position')))
            ($(this)).css({left: ho.left - cop.left - co.left, width: w, height: h});
        if (that._helper && !o.animate && /static/.test(ce.css('position')))
            ($(this)).css({left: ho.left - cop.left - co.left, width: w, height: h});
    }});
    $.ui.plugin.add("resizable", "ghost", {start:     function(event, ui)
    {
        var that = ($(this)).data("resizable"),
            o = that.options,
            cs = that.size;
        that.ghost = that.originalElement.clone();
        ((that.ghost.css({opacity: .25, display: 'block', position: 'relative', height: cs.height, width: cs.width, margin: 0, left: 0, top: 0})).addClass('ui-resizable-ghost')).addClass(typeof o.ghost == 'string' ? o.ghost : '');
        that.ghost.appendTo(that.helper);
    }, resize:     function(event, ui)
    {
        var that = ($(this)).data("resizable"),
            o = that.options;
        if (that.ghost)
            that.ghost.css({position: 'relative', height: that.size.height, width: that.size.width});
    }, stop:     function(event, ui)
    {
        var that = ($(this)).data("resizable"),
            o = that.options;
        if (that.ghost && that.helper)
            (that.helper.get(0)).removeChild(that.ghost.get(0));
    }});
    $.ui.plugin.add("resizable", "grid", {resize:     function(event, ui)
    {
        var that = ($(this)).data("resizable"),
            o = that.options,
            cs = that.size,
            os = that.originalSize,
            op = that.originalPosition,
            a = that.axis,
            ratio = o._aspectRatio || event.shiftKey;
        o.grid = typeof o.grid == "number" ? [o.grid, o.grid] : o.grid;
        var ox = Math.round((cs.width - os.width) / (o.grid[0] || 1)) * (o.grid[0] || 1),
            oy = Math.round((cs.height - os.height) / (o.grid[1] || 1)) * (o.grid[1] || 1);
        if (/^(se|s|e)$/.test(a))
        {
            that.size.width = os.width + ox;
            that.size.height = os.height + oy;
        }        else if (/^(ne)$/.test(a))
        {
            that.size.width = os.width + ox;
            that.size.height = os.height + oy;
            that.position.top = op.top - oy;
        }        else if (/^(sw)$/.test(a))
        {
            that.size.width = os.width + ox;
            that.size.height = os.height + oy;
            that.position.left = op.left - ox;
        }        else
        {
            that.size.width = os.width + ox;
            that.size.height = os.height + oy;
            that.position.top = op.top - oy;
            that.position.left = op.left - ox;
        }    }});
    var num =     function(v)
    {
        return parseInt(v, 10) || 0;
    };
    var isNumber =     function(value)
    {
        return !isNaN(parseInt(value, 10));
    };
})(jQuery);
$.fn.isKey = function()
{
    return this.is(":focus");
};
$.fn.makeKey = function()
{
    if (!($(this)).isKey())
    {
        ($(this)).focus();
        window.scrollTo(0, 0);
    }};
(function(factory)
{
    if (typeof define === 'function' && define.amd)
    {
        define(['jquery'], factory);
    }    else if (typeof exports === 'object')
    {
        module.exports = factory;
    }    else
    {
        factory(jQuery);
    }})(function($)
{
    var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = 'onwheel' in document || document.documentMode >= 9 ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice = Array.prototype.slice,
        nullLowestDeltaTimeout,
        lowestDelta;
    if ($.event.fixHooks)
    {
        for (var i = toFix.length; i; )
        {
            $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;
        }    }    $.event.special.mousewheel = {version: '3.1.6', setup:     function()
    {
        if (this.addEventListener)
        {
            for (var i = toBind.length; i; )
            {
                this.addEventListener(toBind[--i], handler, false);
            }        }        else
        {
            this.onmousewheel = handler;
        }    }, teardown:     function()
    {
        if (this.removeEventListener)
        {
            for (var i = toBind.length; i; )
            {
                this.removeEventListener(toBind[--i], handler, false);
            }        }        else
        {
            this.onmousewheel = null;
        }    }};
    $.fn.extend({mousewheel:     function(fn)
    {
        return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
    }, unmousewheel:     function(fn)
    {
        return this.unbind('mousewheel', fn);
    }});
    function handler(event)
    {
        var orgEvent = event || window.event,
            args = slice.call(arguments, 1),
            delta = 0,
            deltaX = 0,
            deltaY = 0,
            absDelta = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';
        if ('detail' in orgEvent)
        {
            deltaY = orgEvent.detail * -1;
        }
        if ('wheelDelta' in orgEvent)
        {
            deltaY = orgEvent.wheelDelta;
        }
        if ('wheelDeltaY' in orgEvent)
        {
            deltaY = orgEvent.wheelDeltaY;
        }
        if ('wheelDeltaX' in orgEvent)
        {
            deltaX = orgEvent.wheelDeltaX * -1;
        }
        if ('axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS)
        {
            deltaX = deltaY * -1;
            deltaY = 0;
        }
        delta = deltaY === 0 ? deltaX : deltaY;
        if ('deltaY' in orgEvent)
        {
            deltaY = orgEvent.deltaY * -1;
            delta = deltaY;
        }
        if ('deltaX' in orgEvent)
        {
            deltaX = orgEvent.deltaX;
            if (deltaY === 0)
            {
                delta = deltaX * -1;
            }
        }
        if (deltaY === 0 && deltaX === 0)
        {
            return;
        }
        absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));
        if (!lowestDelta || absDelta < lowestDelta)
        {
            lowestDelta = absDelta;
        }
        delta = Math[delta >= 1 ? 'floor' : 'ceil'](delta / lowestDelta);
        deltaX = Math[deltaX >= 1 ? 'floor' : 'ceil'](deltaX / lowestDelta);
        deltaY = Math[deltaY >= 1 ? 'floor' : 'ceil'](deltaY / lowestDelta);
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        args.unshift(event, delta, deltaX, deltaY);
        if (nullLowestDeltaTimeout)
        {
            clearTimeout(nullLowestDeltaTimeout);
        }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);
        return ($.event.dispatch || $.event.handle).apply(this, args);
    }
    function nullLowestDelta()
    {
        lowestDelta = null;
    }
});
var displayObjects = [],
    displayObjectsByUID = {},
    layoutObjects = [],
    layoutObjectsByUID = {},
    runLoop = objj_msgSend(CPRunLoop, "mainRunLoop");
function _CPDisplayServerAddDisplayObject(anObject)
{
    var UID = objj_msgSend(anObject, "UID");
    if (typeof displayObjectsByUID[UID] !== "undefined")
        return;
    var index = displayObjects.length;
    displayObjectsByUID[UID] = index;
    displayObjects[index] = anObject;
}
function _CPDisplayServerAddLayoutObject(anObject)
{
    var UID = objj_msgSend(anObject, "UID");
    if (typeof layoutObjectsByUID[UID] !== "undefined")
        return;
    var index = layoutObjects.length;
    layoutObjectsByUID[UID] = index;
    layoutObjects[index] = anObject;
}
{var the_class = objj_allocateClassPair(CPObject, "_CPDisplayServer"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(meta_class, [new objj_method(sel_getUid("run"), function $_CPDisplayServer__run(self, _cmd)
{
    while (layoutObjects.length || displayObjects.length)
    {
        var index = 0;
        for (; index < layoutObjects.length; ++index)
        {
            var object = layoutObjects[index];
            delete layoutObjectsByUID[objj_msgSend(object, "UID")];
            objj_msgSend(object, "layoutIfNeeded");
        }
        layoutObjects = [];
        layoutObjectsByUID = {};
        index = 0;
        for (; index < displayObjects.length; ++index)
        {
            if (layoutObjects.length)
                break;
            var object = displayObjects[index];
            delete displayObjectsByUID[objj_msgSend(object, "UID")];
            objj_msgSend(object, "displayIfNeeded");
        }
        if (index === displayObjects.length)
        {
            displayObjects = [];
            displayObjectsByUID = {};
        }
        else
            displayObjects.splice(0, index);
    }
    objj_msgSend(runLoop, "performSelector:target:argument:order:modes:", sel_getUid("run"), self, nil, 0, [CPDefaultRunLoopMode]);
}

)]);
}objj_msgSend(_CPDisplayServer, "run");
var CPLeftMouseDown = 1,
    CPLeftMouseUp = 2,
    CPRightMouseDown = 3,
    CPRightMouseUp = 4,
    CPMouseMoved = 5,
    CPLeftMouseDragged = 6,
    CPRightMouseDragged = 7,
    CPMouseEntered = 8,
    CPMouseExited = 9,
    CPKeyDown = 10,
    CPKeyUp = 11,
    CPScrollWheel = 12,
    CPOtherMouseDown = 13,
    CPOtherMouseUp = 14,
    CPOtherMouseDragged = 15,
    CPMouseClicked = 16;
var mpt = null;
{var the_class = objj_allocateClassPair(CPObject, "CPEvent"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_domEvent"), new objj_ivar("_type")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("type"), function $CPEvent__type(self, _cmd)
{
    return self._type;
}

), new objj_method(sel_getUid("setType:"), function $CPEvent__setType_(self, _cmd, newValue)
{
    self._type = newValue;
}

), new objj_method(sel_getUid("initWithNativeEvent:"), function $CPEvent__initWithNativeEvent_(self, _cmd, evt)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPEvent").super_class }, "init");
    if (self)
    {
        self._domEvent = evt;
    }
    return self;
}

), new objj_method(sel_getUid("mouseLocation"), function $CPEvent__mouseLocation(self, _cmd)
{
    return CGPointMake(self._domEvent.clientX, self._domEvent.clientY);
}

), new objj_method(sel_getUid("locationInWindow"), function $CPEvent__locationInWindow(self, _cmd)
{
    var cframe = null;
    if (!self._domEvent._window._DOMWindowContentDiv)
        cframe = ($("#CPWindowToolbarAndContent")).offset();
    else
        cframe = self._domEvent._window._DOMWindowContentDiv.offset();
    return CGPointMake(self._domEvent.clientX - cframe.left, self._domEvent.clientY - cframe.top);
}

), new objj_method(sel_getUid("buttonNumber"), function $CPEvent__buttonNumber(self, _cmd)
{
    return self._domEvent.which;
}

), new objj_method(sel_getUid("keyCode"), function $CPEvent__keyCode(self, _cmd)
{
    return self._domEvent.which;
}

), new objj_method(sel_getUid("deltaX"), function $CPEvent__deltaX(self, _cmd)
{
    if (self._domEvent.deltaX)
        return self._domEvent.deltaX;
    return 0.0;
}

), new objj_method(sel_getUid("deltaY"), function $CPEvent__deltaY(self, _cmd)
{
    if (self._domEvent.deltaY)
        return self._domEvent.deltaY;
    return 0.0;
}

), new objj_method(sel_getUid("shiftKey"), function $CPEvent__shiftKey(self, _cmd)
{
    return self._domEvent.shiftKey;
}

), new objj_method(sel_getUid("_setWindow:"), function $CPEvent___setWindow_(self, _cmd, aWindow)
{
    self._domEvent._window = aWindow;
}

), new objj_method(sel_getUid("window"), function $CPEvent__window(self, _cmd)
{
    return self._domEvent._window;
}

), new objj_method(sel_getUid("windowNumber"), function $CPEvent__windowNumber(self, _cmd)
{
    return [self._domEvent._window];
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("initialize"), function $CPEvent__initialize(self, _cmd)
{
    ($(document)).mousemove(    function(evt)
    {
        mpt = CGPointMake(evt.pageX, evt.pageY);
    });
}

), new objj_method(sel_getUid("mouseLocation"), function $CPEvent__mouseLocation(self, _cmd)
{
    return mpt;
}

), new objj_method(sel_getUid("event:"), function $CPEvent__event_(self, _cmd, evt)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithNativeEvent:", evt);
}

)]);
}var _CPResponderLastMouseDown = null,
    _CPWindowIsResizing = NO,
    _CPWindowIsMoving = NO,
    _CPWindowResizeDelayTimer = null;
{var the_class = objj_allocateClassPair(CPObject, "CPDOMEventDispatcher"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(meta_class, [new objj_method(sel_getUid("addEventDispatchersForWindow:"), function $CPDOMEventDispatcher__addEventDispatchersForWindow_(self, _cmd, aWindow)
{
    var WindowDOM = aWindow._DOMWindowContentDiv;
    if (aWindow === objj_msgSend(CPApp, "mainWindow"))
    {
        ($(window)).resize(        function()
        {
            objj_msgSend(aWindow, "_adjustContentViewSize");
            if (_CPWindowResizeDelayTimer)
            {
                clearTimeout(_CPWindowResizeDelayTimer);
                _CPWindowResizeDelayTimer = null;
            }            _CPWindowResizeDelayTimer = setTimeout(            function()
            {
                objj_msgSend(aWindow._toolbar, "layout");
            }, 100);
            objj_msgSend(objj_msgSend(CPApp, "mainWindow"), "makeKeyWindow");
            objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
        });
        ($(window)).blur(        function(evt)
        {
            ($(document.activeElement)).blur();
            objj_msgSend(CPApp._keyWindow, "resignKeyWindow");
        });
        ($(window)).bind("click mousedown mouseup mousemove keydown keyup",         function(evt)
        {
            objj_msgSend(CPDOMEventDispatcher, "dispatchDOMEvent:inWindow:", evt, aWindow);
        });
        WindowDOM = aWindow.contentView._DOMElement;
    }
    else
    {
        WindowDOM.bind("mousedown click mousemove keydown keyup",         function(evt)
        {
            objj_msgSend(CPDOMEventDispatcher, "dispatchDOMEvent:inWindow:", evt, aWindow);
        });
    }
    WindowDOM.on('mousewheel',     function(evt)
    {
        objj_msgSend(CPDOMEventDispatcher, "dispatchDOMEvent:inWindow:", evt, aWindow);
    });
}

), new objj_method(sel_getUid("dispatchDOMEvent:inWindow:"), function $CPDOMEventDispatcher__dispatchDOMEvent_inWindow_(self, _cmd, evt, aWindow)
{
    if (!_CPWindowIsResizing && !_CPWindowIsMoving)
    {
        evt._window = aWindow;
        var theEvent = objj_msgSend(CPEvent, "event:", evt);
        var firstResponder = objj_msgSend(aWindow, "firstResponder") ? objj_msgSend(aWindow, "firstResponder") : aWindow;
        var isKey = objj_msgSend(aWindow, "isKeyWindow");
        if (evt.type === "keydown")
        {
            if (isKey)
            {
                evt.stopPropagation();
                objj_msgSend(theEvent, "setType:", CPKeyDown);
                objj_msgSend(firstResponder, "keyDown:", theEvent);
                if (evt.which === CPTabKeyCode)
                {
                    evt.preventDefault();
                    objj_msgSend(aWindow, "selectNextKeyView:", aWindow);
                }
                objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
            }
        }
        else if (evt.type === "keyup")
        {
            if (isKey)
            {
                evt.stopPropagation();
                objj_msgSend(theEvent, "setType:", CPKeyUp);
                objj_msgSend(firstResponder, "keyUp:", theEvent);
                objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
            }
        }
        else
        {
            var view = objj_msgSend(aWindow, "hitTest:", objj_msgSend(theEvent, "locationInWindow"));
            if (!view)
                view = objj_msgSend(objj_msgSend(CPApp, "mainWindow"), "contentView");
            objj_msgSend(CPDOMEventDispatcher, "dispatchDOMMouseEvent:toView:", evt, view);
        }
    }
}

), new objj_method(sel_getUid("dispatchDOMMouseEvent:toView:"), function $CPDOMEventDispatcher__dispatchDOMMouseEvent_toView_(self, _cmd, evt, view)
{
    if (_CPWindowIsResizing || _CPWindowIsMoving)
        return;
    evt.stopPropagation();
    evt._window = objj_msgSend(view, "window");
    var theEvent = objj_msgSend(CPEvent, "event:", evt);
    if (evt.type === "click")
    {
        if (evt.which === 1)
        {
            evt.preventDefault();
            objj_msgSend(theEvent, "setType:", CPMouseClicked);
            objj_msgSend(view, "mouseClicked:", theEvent);
            objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
        }
    }
    else if (evt.type === "mousewheel" || evt.type === "DOMMouseScroll")
    {
        objj_msgSend(view, "scrollWheel:", theEvent);
        objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
    }
    else if (evt.type === "mousedown")
    {
        if (!evt._cancelPreventDefault)
            evt.preventDefault();
        if (evt.which === 1)
        {
            objj_msgSend(theEvent, "setType:", CPLeftMouseDown);
            objj_msgSend(view, "mouseDown:", theEvent);
        }
        else if (evt.which === 3)
        {
            objj_msgSend(theEvent, "setType:", CPRightMouseDown);
            objj_msgSend(view, "rightMouseDown:", theEvent);
        }
        _CPResponderLastMouseDown = view;
        objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
    }
    else if (evt.type === "mouseup")
    {
        if (_CPResponderLastMouseDown)
        {
            objj_msgSend(theEvent, "_setWindow:", objj_msgSend(_CPResponderLastMouseDown, "window"));
            if (evt.which === 1)
            {
                objj_msgSend(theEvent, "setType:", CPLeftMouseUp);
                objj_msgSend(_CPResponderLastMouseDown, "mouseUp:", theEvent);
            }
            else if (evt.which === 3)
            {
                objj_msgSend(theEvent, "setType:", CPRightMouseUp);
                objj_msgSend(_CPResponderLastMouseDown, "rightMouseUp:", theEvent);
            }
            _CPResponderLastMouseDown = null;
            objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
        }
    }
    else if (evt.type === "mousemove")
    {
        if (_CPResponderLastMouseDown)
        {
            objj_msgSend(theEvent, "_setWindow:", objj_msgSend(_CPResponderLastMouseDown, "window"));
            objj_msgSend(theEvent, "setType:", CPLeftMouseDragged);
            objj_msgSend(_CPResponderLastMouseDown, "mouseDragged:", theEvent);
            objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
        }
        else
        {
            objj_msgSend(theEvent, "setType:", CPMouseMoved);
            objj_msgSend(view, "mouseMoved:", theEvent);
        }
    }
    else if (evt.type === "mouseout")
    {
        objj_msgSend(theEvent, "setType:", CPMouseExited);
        objj_msgSend(view, "mouseExited:", theEvent);
    }
    else if (evt.type === "mouseover")
    {
        objj_msgSend(theEvent, "setType:", CPMouseEntered);
        objj_msgSend(view, "mouseEntered:", theEvent);
    }
}

), new objj_method(sel_getUid("DOMFocusKeyWindow:"), function $CPDOMEventDispatcher__DOMFocusKeyWindow_(self, _cmd, bool)
{
    if (CPApp._keyWindow)
    {
        if (bool)
        {
            if (CPApp._keyWindow._DOMWindowContentDiv)
            {
                CPApp._keyWindow._DOMWindowContentDiv.makeKey();
            }
            else
            {
                CPApp._keyWindow.contentView._DOMElement.makeKey();
            }
        }
        else
        {
            if (CPApp._keyWindow._DOMWindowContentDiv)
                CPApp._keyWindow._DOMWindowContentDiv.blur();
            else
                CPApp._keyWindow.contentView._DOMElement.blur();
        }
    }
}

)]);
}var _CPMenuBarVisible = NO;
{var the_class = objj_allocateClassPair(CPResponder, "_CPMenuBar"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_menus"), new objj_ivar("_items"), new objj_ivar("_menubarActive"), new objj_ivar("_activeIndex"), new objj_ivar("_DOMElement")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("itemArray"), function $_CPMenuBar__itemArray(self, _cmd)
{
    return self._items;
}

), new objj_method(sel_getUid("_setItems:"), function $_CPMenuBar___setItems_(self, _cmd, newValue)
{
    self._items = newValue;
}

), new objj_method(sel_getUid("activeIndex"), function $_CPMenuBar__activeIndex(self, _cmd)
{
    return self._activeIndex;
}

), new objj_method(sel_getUid("setActiveIndex:"), function $_CPMenuBar__setActiveIndex_(self, _cmd, newValue)
{
    self._activeIndex = newValue;
}

), new objj_method(sel_getUid("init"), function $_CPMenuBar__init(self, _cmd)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPMenuBar").super_class }, "init");
    if (self)
    {
        self._menubarActive = NO;
        self._activeIndex = -1;
        self._DOMElement = ($("<div></div>")).addClass("cpmenubar");
        self._DOMElement.css({height: 28.0, position: "absolute"});
        self._DOMElement.attr({"role": "menubar", "tabindex": 0});
        self._DOMElement.bind({keydown:         function(evt)
        {
            evt.preventDefault();
            evt.stopPropagation();
            objj_msgSend(self, "keyDown:", evt);
        }, keyup:         function(evt)
        {
            evt.preventDefault();
            evt.stopPropagation();
        }});
        self._items = [];
        self._menus = [];
        objj_msgSend(self, "setNextResponder:", CPApp);
    }
    return self;
}

), new objj_method(sel_getUid("window"), function $_CPMenuBar__window(self, _cmd)
{
    return objj_msgSend(CPApp, "mainWindow");
}

), new objj_method(sel_getUid("rootMenu"), function $_CPMenuBar__rootMenu(self, _cmd)
{
    return self;
}

), new objj_method(sel_getUid("isVisible"), function $_CPMenuBar__isVisible(self, _cmd)
{
    return objj_msgSend(CPMenu, "menuBarVisible") && objj_msgSend(self, "isActive");
}

), new objj_method(sel_getUid("close:"), function $_CPMenuBar__close_(self, _cmd, sender)
{
    if (objj_msgSend(sender, "isVisible"))
        objj_msgSend(sender, "close:", nil);
}

), new objj_method(sel_getUid("addItem:"), function $_CPMenuBar__addItem_(self, _cmd, aMenu)
{
    var item = objj_msgSend(objj_msgSend(_CPMenuBarItem, "alloc"), "initWithMenu:inMenuBar:", aMenu, self);
    objj_msgSend(item, "setIndex:", self._items.length);
    if (self._items.length === 0)
        item._DOMElement.css("margin-left", 10);
    self._DOMElement.append(item._DOMElement);
    objj_msgSend(self._menus, "addObject:", aMenu);
    objj_msgSend(self._items, "addObject:", item);
}

), new objj_method(sel_getUid("isActive"), function $_CPMenuBar__isActive(self, _cmd)
{
    return self._activeIndex >= 0;
}

), new objj_method(sel_getUid("keyDown:"), function $_CPMenuBar__keyDown_(self, _cmd, evt)
{
    if (objj_msgSend(self, "isActive"))
    {
        var KC = evt.which,
            i = self._activeIndex;
        if (KC === CPRightArrowKeyCode)
        {
            if (i + 1 < self._items.length)
            {
                objj_msgSend(self._items[i], "close");
                objj_msgSend(self._items[i + 1], "open");
            }
        }
        else if (KC === CPLeftArrowKeyCode)
        {
            if (i - 1 >= 0)
            {
                objj_msgSend(self._items[i], "close");
                objj_msgSend(self._items[i - 1], "open");
            }
        }
        else if (KC === CPDownArrowKeyCode)
        {
            objj_msgSend(self._items[i]._menu, "highlightFirstItem");
        }
        else if (KC === CPEscapeKeyCode)
        {
            objj_msgSend(self._items[i], "close");
            self._activeIndex = -1;
        }
    }
}

)]);
}{
var the_class = objj_getClass("_CPMenuBar")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"_CPMenuBar\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $_CPMenuBar__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSend(self, "init");
    if (self)
    {
        var arr = objj_msgSend(aCoder, "decodeObjectForKey:", "CPMenuBarMenusKey"),
            count = arr.length,
            i = 0;
        for (; i < count; i++)
        {
            objj_msgSend(self, "addItem:", arr[i]);
        }
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $_CPMenuBar__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSend(aCoder, "encodeObject:forKey:", self._menus, "CPMenuBarMenusKey");
}

)]);
}{var the_class = objj_allocateClassPair(CPObject, "_CPMenuBarItem"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_menubar"), new objj_ivar("_menu"), new objj_ivar("_index"), new objj_ivar("_DOMElement")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("index"), function $_CPMenuBarItem__index(self, _cmd)
{
    return self._index;
}

), new objj_method(sel_getUid("setIndex:"), function $_CPMenuBarItem__setIndex_(self, _cmd, newValue)
{
    self._index = newValue;
}

), new objj_method(sel_getUid("initWithMenu:inMenuBar:"), function $_CPMenuBarItem__initWithMenu_inMenuBar_(self, _cmd, menu, menubar)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPMenuBarItem").super_class }, "init");
    if (self)
    {
        self._menu = menu;
        self._menu._delegate = self;
        self._menu._supermenu = menubar;
        self._menubar = menubar;
        self._index = -1;
        self._DOMElement = ($("<div></div>")).addClass("cpmenubar-menu");
        self._DOMElement.attr({role: "menuitem", "aria-haspopup": true, "tabindex": 0});
        self._menu._DOMElement.addClass("menubar");
        self._DOMElement.bind({mousedown:         function(evt)
        {
            evt.preventDefault();
            evt.stopPropagation();
            CPApp._keyWindow = CPApp._mainWindow;
            _CPResponderLastMouseDown = CPApp._mainWindow.contentView;
            if (self._DOMElement.hasClass("selected"))
            {
                objj_msgSend(self, "close");
            }            else
            {
                objj_msgSend(self, "open");
            }        }, mouseup:         function(evt)
        {
            evt.preventDefault();
            evt.stopPropagation();
            if (self._menu._ignoreMouseUp)
                return;
            self._DOMElement.makeKey();
        }, mouseenter:         function(evt)
        {
            evt.preventDefault();
            evt.stopPropagation();
            if (objj_msgSend(self._menubar, "isActive"))
                objj_msgSend(self, "open");
        }});
        var textAndArrow = ($("<div></div>")).addClass("cpmenubar-menu-text");
        textAndArrow.append((($("<label></label>")).css("float", "left")).text(objj_msgSend(self._menu, "title")));
        textAndArrow.append(($("<div></div>")).addClass("cpmenubar-menu-arrow"));
        self._DOMElement.append(textAndArrow);
    }
    return self;
}

), new objj_method(sel_getUid("menuDidClose:"), function $_CPMenuBarItem__menuDidClose_(self, _cmd, menu)
{
    objj_msgSend(self, "close");
}

), new objj_method(sel_getUid("open"), function $_CPMenuBarItem__open(self, _cmd)
{
    objj_msgSend(self._menubar, "setActiveIndex:", self._index);
    self._DOMElement.addClass("selected");
    var offset = self._DOMElement.offset();
    objj_msgSend(self._menu, "setPosition:", CGPointMake(offset.left, offset.top + 28.0 + 1));
    objj_msgSend(self._menu, "setWidth:", MAX(180, self._DOMElement.width()));
    if (!objj_msgSend(self._menu, "isVisible"))
        objj_msgSend(self._menu, "show:", self);
}

), new objj_method(sel_getUid("close"), function $_CPMenuBarItem__close(self, _cmd)
{
    self._DOMElement.removeClass("selected");
    if (objj_msgSend(self._menu, "isVisible"))
        objj_msgSend(self._menu, "close:", self);
    if (objj_msgSend(self._menubar, "activeIndex") === self._index)
        objj_msgSend(self._menubar, "setActiveIndex:", -1);
}

)]);
}{var the_class = objj_allocateClassPair(CPObject, "CPData"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithRawString:"), function $CPData__initWithRawString_(self, _cmd, aString)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPData").super_class }, "init");
    if (self)
        objj_msgSend(self, "setRawString:", aString);
    return self;
}

), new objj_method(sel_getUid("initWithJSONObject:"), function $CPData__initWithJSONObject_(self, _cmd, anObject)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPData").super_class }, "init");
    if (self)
        objj_msgSend(self, "setJSONObject:", anObject);
    return self;
}

), new objj_method(sel_getUid("rawString"), function $CPData__rawString(self, _cmd)
{
    return self.rawString();
}

), new objj_method(sel_getUid("JSONObject"), function $CPData__JSONObject(self, _cmd)
{
    return self.JSONObject();
}

), new objj_method(sel_getUid("bytes"), function $CPData__bytes(self, _cmd)
{
    return self.bytes();
}

), new objj_method(sel_getUid("base64"), function $CPData__base64(self, _cmd)
{
    return self.base64();
}

), new objj_method(sel_getUid("length"), function $CPData__length(self, _cmd)
{
    return objj_msgSend(objj_msgSend(self, "rawString"), "length");
}

), new objj_method(sel_getUid("description"), function $CPData__description(self, _cmd)
{
    return self.toString();
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPData__alloc(self, _cmd)
{
    var result = new CFMutableData();
    result.isa = objj_msgSend(self, "class");
    return result;
}

), new objj_method(sel_getUid("data"), function $CPData__data(self, _cmd)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "init");
}

), new objj_method(sel_getUid("dataWithRawString:"), function $CPData__dataWithRawString_(self, _cmd, aString)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithRawString:", aString);
}

), new objj_method(sel_getUid("dataWithJSONObject:"), function $CPData__dataWithJSONObject_(self, _cmd, anObject)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithJSONObject:", anObject);
}

), new objj_method(sel_getUid("dataWithBytes:"), function $CPData__dataWithBytes_(self, _cmd, bytesArray)
{
    var data = objj_msgSend(objj_msgSend(self, "alloc"), "init");
    data.setBytes(bytesArray);
    return data;
}

), new objj_method(sel_getUid("dataWithBase64:"), function $CPData__dataWithBase64_(self, _cmd, aString)
{
    var data = objj_msgSend(objj_msgSend(self, "alloc"), "init");
    data.setBase64String(aString);
    return data;
}

)]);
}{
var the_class = objj_getClass("CPData")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPData\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("setRawString:"), function $CPData__setRawString_(self, _cmd, aString)
{
    self.setRawString(aString);
}

), new objj_method(sel_getUid("setJSONObject:"), function $CPData__setJSONObject_(self, _cmd, anObject)
{
    self.setJSONObject(anObject);
}

)]);
}{
var the_class = objj_getClass("CPData")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPData\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithString:"), function $CPData__initWithString_(self, _cmd, aString)
{
    _CPReportLenientDeprecation(self, _cmd, sel_getUid("initWithRawString:"));
    return objj_msgSend(self, "initWithRawString:", aString);
}

), new objj_method(sel_getUid("setString:"), function $CPData__setString_(self, _cmd, aString)
{
    _CPReportLenientDeprecation(self, _cmd, sel_getUid("setRawString:"));
    objj_msgSend(self, "setRawString:", aString);
}

), new objj_method(sel_getUid("string"), function $CPData__string(self, _cmd)
{
    _CPReportLenientDeprecation(self, _cmd, sel_getUid("rawString"));
    return objj_msgSend(self, "rawString");
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("dataWithString:"), function $CPData__dataWithString_(self, _cmd, aString)
{
    _CPReportLenientDeprecation(self, _cmd, sel_getUid("dataWithRawString:"));
    return objj_msgSend(self, "dataWithRawString:", aString);
}

)]);
}CFData.prototype.isa = CPData;
CFMutableData.prototype.isa = CPData;
function CGPointMake(x, y)
{
    return {x: x, y: y};
}
function CGPointMakeZero()
{
    return {x: 0, y: 0};
}
function CGPointMakeCopy(aPoint)
{
    return {x: aPoint.x, y: aPoint.y};
}
CGPointCreateCopy = CGPointMakeCopy;
function CGPointEqualToPoint(lhsPoint, rhsPoint)
{
    return lhsPoint.x == rhsPoint.x && lhsPoint.y == rhsPoint.y;
}
function CGStringFromPoint(aPoint)
{
    return "{" + aPoint.x + ", " + aPoint.y + "}";
}
function CGSizeMake(width, height)
{
    return {width: width, height: height};
}
function CGSizeMakeZero()
{
    return {width: 0, height: 0};
}
function CGSizeMakeCopy(aSize)
{
    return {width: aSize.width, height: aSize.height};
}
CGSizeCreateCopy = CGSizeMakeCopy;
function CGSizeEqualToSize(lhsSize, rhsSize)
{
    return lhsSize.width == rhsSize.width && lhsSize.height == rhsSize.height;
}
function CGStringFromSize(aSize)
{
    return "{" + aSize.width + ", " + aSize.height + "}";
}
function CGRectMake(x, y, width, height)
{
    return {origin: {x: x, y: y}, size: {width: width, height: height}};
}
function CGRectMakeZero()
{
    return {origin: {x: 0, y: 0}, size: {width: 0, height: 0}};
}
function CGRectMakeCopy(aRect)
{
    return {origin: {x: aRect.origin.x, y: aRect.origin.y}, size: {width: aRect.size.width, height: aRect.size.height}};
}
CGRectCreateCopy = CGRectMakeCopy;
function CGRectEqualToRect(lhsRect, rhsRect)
{
    return lhsRect.origin.x == rhsRect.origin.x && lhsRect.origin.y == rhsRect.origin.y && lhsRect.size.width == rhsRect.size.width && lhsRect.size.height == rhsRect.size.height;
}
function CGStringFromRect(aRect)
{
    return "{" + CGStringFromPoint(aRect.origin) + ", " + CGStringFromSize(aRect.size) + "}";
}
function CGRectOffset(aRect, dX, dY)
{
    return {origin: {x: aRect.origin.x + dX, y: aRect.origin.y + dY}, size: {width: aRect.size.width, height: aRect.size.height}};
}
function CGRectInset(aRect, dX, dY)
{
    return {origin: {x: aRect.origin.x + dX, y: aRect.origin.y + dY}, size: {width: aRect.size.width - 2 * dX, height: aRect.size.height - 2 * dY}};
}
function CGRectGetHeight(aRect)
{
    return aRect.size.height;
}
function CGRectGetMaxX(aRect)
{
    return aRect.origin.x + aRect.size.width;
}
function CGRectGetMaxY(aRect)
{
    return aRect.origin.y + aRect.size.height;
}
function CGRectGetMidX(aRect)
{
    return aRect.origin.x + aRect.size.width / 2.0;
}
function CGRectGetMidY(aRect)
{
    return aRect.origin.y + aRect.size.height / 2.0;
}
function CGRectGetMinX(aRect)
{
    return aRect.origin.x;
}
function CGRectGetMinY(aRect)
{
    return aRect.origin.y;
}
function CGRectGetWidth(aRect)
{
    return aRect.size.width;
}
function CGRectIsEmpty(aRect)
{
    return aRect.size.width <= 0.0 || aRect.size.height <= 0.0 || aRect.origin.x === Infinity || aRect.origin.y === Infinity;
}
function CGRectIsNull(aRect)
{
    return aRect.origin.x === Infinity || aRect.origin.y === Infinity;
}
function CGRectContainsPoint(aRect, aPoint)
{
    return aPoint.x >= aRect.origin.x && aPoint.y >= aRect.origin.y && aPoint.x < CGRectGetMaxX(aRect) && aPoint.y < CGRectGetMaxY(aRect);
}
function CGInsetMake(top, right, bottom, left)
{
    return {top: top, right: right, bottom: bottom, left: left};
}
function CGInsetMakeZero()
{
    return {top: 0, right: 0, bottom: 0, left: 0};
}
function CGInsetMakeCopy(anInset)
{
    return {top: anInset.top, right: anInset.right, bottom: anInset.bottom, left: anInset.left};
}
function CGInsetMakeInvertedCopy(anInset)
{
    return {top: -anInset.top, right: -anInset.right, bottom: -anInset.bottom, left: -anInset.left};
}
function CGInsetIsEmpty(anInset)
{
    return anInset.top === 0 && anInset.right === 0 && anInset.bottom === 0 && anInset.left === 0;
}
function CGInsetEqualToInset(lhsInset, rhsInset)
{
    return lhsInset.top === rhsInset.top && lhsInset.right === rhsInset.right && lhsInset.bottom === rhsInset.bottom && lhsInset.left === rhsInset.left;
}
CGMinXEdge = 0;
CGMinYEdge = 1;
CGMaxXEdge = 2;
CGMaxYEdge = 3;
CGRectNull = CGRectMake(Infinity, Infinity, 0.0, 0.0);
function CGRectDivide(inRect, slice, rem, amount, edge)
{
    slice.origin = CGPointMakeCopy(inRect.origin);
    slice.size = CGSizeMakeCopy(inRect.size);
    rem.origin = CGPointMakeCopy(inRect.origin);
    rem.size = CGSizeMakeCopy(inRect.size);
    switch(edge) {
        case CGMinXEdge:
            slice.size.width = amount;
            rem.origin.x += amount;
            rem.size.width -= amount;
            break;
        case CGMaxXEdge:
            slice.origin.x = CGRectGetMaxX(slice) - amount;
            slice.size.width = amount;
            rem.size.width -= amount;
            break;
        case CGMinYEdge:
            slice.size.height = amount;
            rem.origin.y += amount;
            rem.size.height -= amount;
            break;
        case CGMaxYEdge:
            slice.origin.y = CGRectGetMaxY(slice) - amount;
            slice.size.height = amount;
            rem.size.height -= amount;
    }
}
function CGRectContainsRect(lhsRect, rhsRect)
{
    var union = CGRectUnion(lhsRect, rhsRect);
    return CGRectEqualToRect(union, lhsRect);
}
function CGRectIntersectsRect(lhsRect, rhsRect)
{
    var intersection = CGRectIntersection(lhsRect, rhsRect);
    return !CGRectIsEmpty(intersection);
}
function CGRectIntegral(aRect)
{
    aRect = CGRectStandardize(aRect);
    var x = FLOOR(CGRectGetMinX(aRect)),
        y = FLOOR(CGRectGetMinY(aRect));
    aRect.size.width = CEIL(CGRectGetMaxX(aRect)) - x;
    aRect.size.height = CEIL(CGRectGetMaxY(aRect)) - y;
    aRect.origin.x = x;
    aRect.origin.y = y;
    return aRect;
}
function CGRectIntersection(lhsRect, rhsRect)
{
    var intersection = CGRectMake(MAX(CGRectGetMinX(lhsRect), CGRectGetMinX(rhsRect)), MAX(CGRectGetMinY(lhsRect), CGRectGetMinY(rhsRect)), 0, 0);
    intersection.size.width = MIN(CGRectGetMaxX(lhsRect), CGRectGetMaxX(rhsRect)) - CGRectGetMinX(intersection);
    intersection.size.height = MIN(CGRectGetMaxY(lhsRect), CGRectGetMaxY(rhsRect)) - CGRectGetMinY(intersection);
    return CGRectIsEmpty(intersection) ? CGRectMakeZero() : intersection;
}
function CGRectStandardize(aRect)
{
    var width = CGRectGetWidth(aRect),
        height = CGRectGetHeight(aRect),
        standardized = CGRectMakeCopy(aRect);
    if (width < 0.0)
    {
        standardized.origin.x += width;
        standardized.size.width = -width;
    }
    if (height < 0.0)
    {
        standardized.origin.y += height;
        standardized.size.height = -height;
    }
    return standardized;
}
function CGRectUnion(lhsRect, rhsRect)
{
    var lhsRectIsNull = !lhsRect || lhsRect === CGRectNull,
        rhsRectIsNull = !rhsRect || rhsRect === CGRectNull;
    if (lhsRectIsNull)
        return rhsRectIsNull ? CGRectNull : rhsRect;
    if (rhsRectIsNull)
        return lhsRectIsNull ? CGRectNull : lhsRect;
    var minX = MIN(CGRectGetMinX(lhsRect), CGRectGetMinX(rhsRect)),
        minY = MIN(CGRectGetMinY(lhsRect), CGRectGetMinY(rhsRect)),
        maxX = MAX(CGRectGetMaxX(lhsRect), CGRectGetMaxX(rhsRect)),
        maxY = MAX(CGRectGetMaxY(lhsRect), CGRectGetMaxY(rhsRect));
    return CGRectMake(minX, minY, maxX - minX, maxY - minY);
}
function CGRectInsetByInset(aRect, anInset)
{
    return CGRectMake(aRect.origin.x + anInset.left, aRect.origin.y + anInset.top, aRect.size.width - anInset.left - anInset.right, aRect.size.height - anInset.top - anInset.bottom);
}
function CGPointFromString(aString)
{
    var comma = aString.indexOf(',');
    return {x: parseFloat(aString.substr(1, comma - 1)), y: parseFloat(aString.substring(comma + 1, aString.length))};
}
function CGSizeFromString(aString)
{
    var comma = aString.indexOf(',');
    return {width: parseFloat(aString.substr(1, comma - 1)), height: parseFloat(aString.substring(comma + 1, aString.length))};
}
function CGRectFromString(aString)
{
    var comma = aString.indexOf(',', aString.indexOf(',') + 1);
    return {origin: CGPointFromString(aString.substr(1, comma - 1)), size: CGSizeFromString(aString.substring(comma + 2, aString.length - 1))};
}
function CGPointFromEvent(anEvent)
{
    return CGPointMake(anEvent.clientX, anEvent.clientY);
}
function CGInsetUnion(lhsInset, rhsInset)
{
    return CGInsetMake(lhsInset.top + rhsInset.top, lhsInset.right + rhsInset.right, lhsInset.bottom + rhsInset.bottom, lhsInset.left + rhsInset.left);
}
function CGInsetDifference(lhsInset, rhsInset)
{
    return CGInsetMake(lhsInset.top - rhsInset.top, lhsInset.right - rhsInset.right, lhsInset.bottom - rhsInset.bottom, lhsInset.left - rhsInset.left);
}
function CGInsetFromString(aString)
{
    var numbers = (aString.substr(1, aString.length - 2)).split(',');
    return CGInsetMake(parseFloat(numbers[0]), parseFloat(numbers[1]), parseFloat(numbers[2]), parseFloat(numbers[3]));
}
CGInsetFromCPString = CGInsetFromString;
function CPStringFromCGInset(anInset)
{
    return "{" + anInset.top + ", " + anInset.left + ", " + anInset.bottom + ", " + anInset.right + "}";
}
function CGAlignStroke(coord, strokeWidth)
{
    return FLOOR(coord) === coord ? coord + strokeWidth / 2 : coord;
}
function CGAlignCoordinate(coord)
{
    return FLOOR(coord);
}
CPMinXEdge = 0;
CPMinYEdge = 1;
CPMaxXEdge = 2;
CPMaxYEdge = 3;
CPMakePoint = CGPointMake;
CPMakeSize = CGSizeMake;
CPMakeRect = CGRectMake;
CPPointCreateCopy = CGPointMakeCopy;
CPPointEqualToPoint = CGPointEqualToPoint;
CPPointInRect = function(aPoint, aRect)
{
    return CGRectContainsPoint(aRect, aPoint);
};
CPRectEqualToRect = CGRectEqualToRect;
CPRectIsEmpty = CGRectIsEmpty;
CPRectContainsRect = CGRectContainsRect;
CPRectIntersection = CGRectIntersection;
CPPointMake = CGPointMake;
CPRectInset = CGRectInset;
CPRectIntegral = CGRectIntegral;
CPRectCreateCopy = CGRectCreateCopy;
CPRectMake = CGRectMake;
CPRectOffset = CGRectOffset;
CPRectStandardize = CGRectStandardize;
CPRectUnion = CGRectUnion;
CPSizeCreateCopy = CGSizeCreateCopy;
CPSizeMake = CGSizeMake;
CPRectContainsPoint = CGRectContainsPoint;
CPRectGetHeight = CGRectGetHeight;
CPRectGetMaxX = CGRectGetMaxX;
CPRectGetMaxY = CGRectGetMaxY;
CPRectGetMidX = CGRectGetMidX;
CPRectGetMidY = CGRectGetMidY;
CPRectGetMinX = CGRectGetMinX;
CPRectGetMinY = CGRectGetMinY;
CPRectGetWidth = CGRectGetWidth;
CPRectIntersectsRect = CGRectIntersectsRect;
CPRectIsNull = CGRectIsNull;
CPDivideRect = CGRectDivide;
CPSizeEqualToSize = CGSizeEqualToSize;
CPStringFromPoint = CGStringFromPoint;
CPStringFromSize = CGStringFromSize;
CPStringFromRect = CGStringFromRect;
CPPointFromString = CGPointFromString;
CPSizeFromString = CGSizeFromString;
CPRectFromString = CGRectFromString;
CPPointFromEvent = CGPointFromEvent;
CPSizeMakeZero = CGSizeMakeZero;
CPRectMakeZero = CGRectMakeZero;
CPPointMakeZero = CGPointMakeZero;
var CPImageLoadStatusInitialized = 0;
var CPImageLoadStatusLoading = 1;
var CPImageLoadStatusCompleted = 2;
var CPImageLoadStatusCancelled = 3;
var CPImageLoadStatusInvalidData = 4;
var CPImageLoadStatusUnexpectedEOF = 5;
var CPImageLoadStatusReadError = 6;
var CPImageDidLoadNotification = "CPImageDidLoadNotification";
var CPImageNameColorPanel = "CPImageNameColorPanel";
var CPImageNameColorPanelHighlighted = "CPImageNameColorPanelHighlighted";
{var the_class = objj_allocateClassPair(CPObject, "CPImage"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_filename"), new objj_ivar("_name"), new objj_ivar("_size"), new objj_ivar("_loadStatus"), new objj_ivar("_delegate"), new objj_ivar("_DOMElement")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initByReferencingFile:size:"), function $CPImage__initByReferencingFile_size_(self, _cmd, aFilename, aSize)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPImage").super_class }, "init");
    if (self)
    {
        self._size = CGSizeCreateCopy(aSize);
        self._filename = aFilename;
        self._loadStatus = CPImageLoadStatusInitialized;
        self._DOMElement = null;
    }
    return self;
}

), new objj_method(sel_getUid("DOMElement"), function $CPImage__DOMElement(self, _cmd)
{
    return $(self._DOMElement);
}

), new objj_method(sel_getUid("initWithContentsOfFile:size:"), function $CPImage__initWithContentsOfFile_size_(self, _cmd, aFilename, aSize)
{
    self = objj_msgSend(self, "initByReferencingFile:size:", aFilename, aSize);
    if (self)
        objj_msgSend(self, "load");
    return self;
}

), new objj_method(sel_getUid("initWithContentsOfFile:"), function $CPImage__initWithContentsOfFile_(self, _cmd, aFilename)
{
    self = objj_msgSend(self, "initByReferencingFile:size:", aFilename, CPMakeSize(-1, -1));
    if (self)
        objj_msgSend(self, "load");
    return self;
}

), new objj_method(sel_getUid("initWithData:"), function $CPImage__initWithData_(self, _cmd, someData)
{
    var base64 = objj_msgSend(someData, "base64"),
        type = objj_msgSend(base64, "hasPrefix:", "/9j/4AAQSkZJRgABAQEASABIAAD/") ? "jpg" : "png",
        dataURL = "data:image/" + type + ";base64," + base64;
    return objj_msgSend(self, "initWithContentsOfFile:", dataURL);
}

), new objj_method(sel_getUid("copy"), function $CPImage__copy(self, _cmd)
{
    return objj_msgSend(CPImage, "imageWithFile:", objj_msgSend(self, "filename"));
}

), new objj_method(sel_getUid("filename"), function $CPImage__filename(self, _cmd)
{
    return self._filename;
}

), new objj_method(sel_getUid("setDelegate:"), function $CPImage__setDelegate_(self, _cmd, aDelegate)
{
    self._delegate = aDelegate;
}

), new objj_method(sel_getUid("delegate"), function $CPImage__delegate(self, _cmd)
{
    return self._delegate;
}

), new objj_method(sel_getUid("setSize:"), function $CPImage__setSize_(self, _cmd, aSize)
{
    self._size = CGSizeCreateCopy(aSize);
}

), new objj_method(sel_getUid("size"), function $CPImage__size(self, _cmd)
{
    return self._size;
}

), new objj_method(sel_getUid("loadStatus"), function $CPImage__loadStatus(self, _cmd)
{
    return self._loadStatus;
}

), new objj_method(sel_getUid("load"), function $CPImage__load(self, _cmd)
{
    if (self._loadStatus == CPImageLoadStatusLoading || self._loadStatus == CPImageLoadStatusCompleted)
        return;
    self._loadStatus = CPImageLoadStatusLoading;
    self._DOMElement = new Image();
    ($(self._DOMElement)).mousedown(    function(evt)
    {
        evt.preventDefault();
    });
    ($(self._DOMElement)).addClass("cpimage");
    var isSynchronous = YES;
    self._DOMElement.onload =     function()
    {
        if (isSynchronous)
            window.setTimeout(            function()
            {
                objj_msgSend(self, "imageDidLoad");
            }, 0);
        else
        {
            objj_msgSend(self, "imageDidLoad");
        }        objj_msgSend(self, "_derefFromImage");
    };
    self._DOMElement.onerror =     function()
    {
        if (isSynchronous)
            window.setTimeout(            function()
            {
                objj_msgSend(self, "imageDidError");
            }, 0);
        else
        {
            objj_msgSend(self, "imageDidError");
        }        objj_msgSend(self, "_derefFromImage");
    };
    self._DOMElement.onabort =     function()
    {
        if (isSynchronous)
            window.setTimeout(            function()
            {
                objj_msgSend(self, "imageDidAbort");
            }, 0);
        else
        {
            objj_msgSend(self, "imageDidAbort");
        }        objj_msgSend(self, "_derefFromImage");
    };
    self._DOMElement.src = self._filename;
    window.setTimeout(    function()
    {
        isSynchronous = NO;
    }, 0);
}

), new objj_method(sel_getUid("_derefFromImage"), function $CPImage___derefFromImage(self, _cmd)
{
    self._DOMElement.onload = null;
    self._DOMElement.onerror = null;
    self._DOMElement.onabort = null;
}

), new objj_method(sel_getUid("imageDidLoad"), function $CPImage__imageDidLoad(self, _cmd)
{
    self._loadStatus = CPImageLoadStatusCompleted;
    if (!self._size || self._size.width == -1 && self._size.height == -1)
        self._size = CPMakeSize(self._DOMElement.width, self._DOMElement.height);
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPImageDidLoadNotification, self);
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("imageDidLoad:")))
        objj_msgSend(self._delegate, "imageDidLoad:", self);
}

), new objj_method(sel_getUid("imageDidError"), function $CPImage__imageDidError(self, _cmd)
{
    self._loadStatus = CPImageLoadStatusReadError;
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("imageDidError:")))
        objj_msgSend(self._delegate, "imageDidError:", self);
}

), new objj_method(sel_getUid("imageDidAbort"), function $CPImage__imageDidAbort(self, _cmd)
{
    self._loadStatus = CPImageLoadStatusCancelled;
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("imageDidAbort:")))
        objj_msgSend(self._delegate, "imageDidAbort:", self);
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("imageNamed:"), function $CPImage__imageNamed_(self, _cmd, imageName)
{
    return objj_msgSend(CPImage, "imageWithFile:", "Resources/" + imageName);
}

), new objj_method(sel_getUid("imageWithFile:"), function $CPImage__imageWithFile_(self, _cmd, aFilename)
{
    return objj_msgSend(objj_msgSend(CPImage, "alloc"), "initWithContentsOfFile:", aFilename);
}

)]);
}{
var the_class = objj_getClass("CPImage")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPImage\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPImage__initWithCoder_(self, _cmd, aCoder)
{
    return objj_msgSend(self, "initWithContentsOfFile:size:", objj_msgSend(aCoder, "decodeObjectForKey:", "CPFilename"), objj_msgSend(aCoder, "decodeSizeForKey:", "CPSize"));
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPImage__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPImage").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._filename, "CPFilename");
    objj_msgSend(aCoder, "encodeSize:forKey:", self._size, "CPSize");
}

)]);
}var CPMenuItemDOMElementPrototype = null;
{var the_class = objj_allocateClassPair(CPObject, "CPMenuItem"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_checkable"), new objj_ivar("_selectable"), new objj_ivar("_enabled"), new objj_ivar("_isChecked"), new objj_ivar("_radio"), new objj_ivar("_selected"), new objj_ivar("_tag"), new objj_ivar("_icon"), new objj_ivar("_submenu"), new objj_ivar("_menu"), new objj_ivar("_title"), new objj_ivar("_target"), new objj_ivar("_action"), new objj_ivar("_DOMElement")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("isSelectable"), function $CPMenuItem__isSelectable(self, _cmd)
{
    return self._selectable;
}

), new objj_method(sel_getUid("setSelectable:"), function $CPMenuItem__setSelectable_(self, _cmd, newValue)
{
    self._selectable = newValue;
}

), new objj_method(sel_getUid("isEnabled"), function $CPMenuItem__isEnabled(self, _cmd)
{
    return self._enabled;
}

), new objj_method(sel_getUid("_setEnabled:"), function $CPMenuItem___setEnabled_(self, _cmd, newValue)
{
    self._enabled = newValue;
}

), new objj_method(sel_getUid("isChecked"), function $CPMenuItem__isChecked(self, _cmd)
{
    return self._isChecked;
}

), new objj_method(sel_getUid("_setIsChecked:"), function $CPMenuItem___setIsChecked_(self, _cmd, newValue)
{
    self._isChecked = newValue;
}

), new objj_method(sel_getUid("isSelected"), function $CPMenuItem__isSelected(self, _cmd)
{
    return self._selected;
}

), new objj_method(sel_getUid("_setSelected:"), function $CPMenuItem___setSelected_(self, _cmd, newValue)
{
    self._selected = newValue;
}

), new objj_method(sel_getUid("tag"), function $CPMenuItem__tag(self, _cmd)
{
    return self._tag;
}

), new objj_method(sel_getUid("setTag:"), function $CPMenuItem__setTag_(self, _cmd, newValue)
{
    self._tag = newValue;
}

), new objj_method(sel_getUid("submenu"), function $CPMenuItem__submenu(self, _cmd)
{
    return self._submenu;
}

), new objj_method(sel_getUid("_setSubmenu:"), function $CPMenuItem___setSubmenu_(self, _cmd, newValue)
{
    self._submenu = newValue;
}

), new objj_method(sel_getUid("title"), function $CPMenuItem__title(self, _cmd)
{
    return self._title;
}

), new objj_method(sel_getUid("_setTitle:"), function $CPMenuItem___setTitle_(self, _cmd, newValue)
{
    self._title = newValue;
}

), new objj_method(sel_getUid("target"), function $CPMenuItem__target(self, _cmd)
{
    return self._target;
}

), new objj_method(sel_getUid("setTarget:"), function $CPMenuItem__setTarget_(self, _cmd, newValue)
{
    self._target = newValue;
}

), new objj_method(sel_getUid("action"), function $CPMenuItem__action(self, _cmd)
{
    return self._action;
}

), new objj_method(sel_getUid("setAction:"), function $CPMenuItem__setAction_(self, _cmd, newValue)
{
    self._action = newValue;
}

), new objj_method(sel_getUid("init"), function $CPMenuItem__init(self, _cmd)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPMenuItem").super_class }, "init");
    if (self)
    {
        self._DOMElement = CPMenuItemDOMElementPrototype.clone(false);
        objj_msgSend(self, "_attachEvents");
        self._icon = null;
        self._enabled = YES;
        self._selectable = YES;
        self._checkable = NO;
        self._isChecked = NO;
        self._radio = NO;
        self._selected = NO;
        self._title = null;
        self._target = null;
        self._action = null;
        self._submenu = null;
        self._menu = null;
        self._tag = -1;
    }
    return self;
}

), new objj_method(sel_getUid("_attachEvents"), function $CPMenuItem___attachEvents(self, _cmd)
{
    self._DOMElement.bind({mousedown:     function(evt)
    {
        evt.stopPropagation();
        evt.preventDefault();
    }, click:     function(evt)
    {
        evt.stopPropagation();
        evt.preventDefault();
    }, mouseup:     function(evt)
    {
        evt.stopPropagation();
        evt.preventDefault();
        if (!objj_msgSend(self, "isEnabled"))
            return;
        if (!objj_msgSend(self, "isSelectable"))
            return;
        if (self._menu._ignoreMouseUp)
            return;
        if (self._submenu)
            return;
        if (evt.which < 2)
            objj_msgSend(self, "triggerAction");
    }, mouseenter:     function(evt)
    {
        evt.stopPropagation();
        if (!objj_msgSend(self, "isEnabled"))
            return;
        if (self._menu && !self._menu._disabledMouse)
        {
            _CPFocusMenu = self._menu;
            self._menu._DOMElement.makeKey();
            if (objj_msgSend(self, "isSelectable"))
                objj_msgSend(self._menu, "setHighlightedMenuItem:", self);
            else
                objj_msgSend(self._menu, "setHighlightedMenuItem:", Nil);
            self._submenutimer = setTimeout(            function()
            {
                objj_msgSend(self, "_showSubmenu:", NO);
            }, 300);
        }    }});
}

), new objj_method(sel_getUid("setCheckable:"), function $CPMenuItem__setCheckable_(self, _cmd, aFlag)
{
    self._checkable = aFlag;
    if (self._checkable)
    {
        objj_msgSend(self, "setIsRadio:", NO);
        if (self._isChecked)
            (self._DOMElement.children(".cpmenu-item-icon")).addClass("checked");
        else
            (self._DOMElement.children(".cpmenu-item-icon")).removeClass("checked");
    }
}

), new objj_method(sel_getUid("setChecked:"), function $CPMenuItem__setChecked_(self, _cmd, aFlag)
{
    self._isChecked = aFlag;
    if (self._checkable)
    {
        if (self._isChecked)
            (self._DOMElement.children(".cpmenu-item-icon")).addClass("checked");
        else
            (self._DOMElement.children(".cpmenu-item-icon")).removeClass("checked");
    }
}

), new objj_method(sel_getUid("setEnabled:"), function $CPMenuItem__setEnabled_(self, _cmd, aFlag)
{
    self._enabled = aFlag;
    if (self._enabled)
        self._DOMElement.removeClass("disabled");
    else
        self._DOMElement.addClass("disabled");
}

), new objj_method(sel_getUid("setHighlighted:"), function $CPMenuItem__setHighlighted_(self, _cmd, aFlag)
{
    if (aFlag && self._enabled)
    {
        self._DOMElement.addClass("highlight");
    }
    else
    {
        self._DOMElement.removeClass("highlight");
        objj_msgSend(self, "hideSubmenu");
    }
}

), new objj_method(sel_getUid("_hideSubmenu"), function $CPMenuItem___hideSubmenu(self, _cmd)
{
    if (self._submenutimer)
    {
        clearTimeout(self._submenutimer);
        self._submenutimer = null;
    }
    objj_msgSend(self._submenu, "hide");
}

), new objj_method(sel_getUid("_showSubmenu:"), function $CPMenuItem___showSubmenu_(self, _cmd, highlightFirstItem)
{
    if (self._submenu)
    {
        var offset = self._DOMElement.offset();
        if (offset.left + self._DOMElement.width() + self._submenu._DOMElement.width() <= ($(window)).width())
            objj_msgSend(self._submenu, "setPosition:", CGPointMake(offset.left + self._DOMElement.width(), offset.top - 6));
        else
            objj_msgSend(self._submenu, "setPosition:", CGPointMake(offset.left - self._submenu._DOMElement.width(), offset.top - 6));
        objj_msgSend(self._submenu, "show:", nil);
        if (highlightFirstItem)
            objj_msgSend(self._submenu, "highlightFirstItem");
    }
}

), new objj_method(sel_getUid("submenu"), function $CPMenuItem__submenu(self, _cmd)
{
    return self._submenu;
}

), new objj_method(sel_getUid("setSubmenu:"), function $CPMenuItem__setSubmenu_(self, _cmd, aMenu)
{
    self._submenu = aMenu;
    if (self._submenu)
    {
        self._DOMElement.append(($("<div></div>")).addClass("cpmenu-item-triangle-bullet"));
        objj_msgSend(self._submenu, "setSupermenu:", self._menu);
    }
}

), new objj_method(sel_getUid("setIcon:"), function $CPMenuItem__setIcon_(self, _cmd, anImage)
{
    (self._DOMElement.children(".cpmenu-item-icon")).remove();
    if (anImage)
    {
        self._icon = anImage;
        objj_msgSend(self._icon, "setSize:", CGSizeMake(14, 14));
        var iconDOM = objj_msgSend(self._icon, "DOMElement");
        iconDOM.addClass("cpmenu-item-icon");
        self._DOMElement.prepend(iconDOM);
    }
}

), new objj_method(sel_getUid("setIsRadio:"), function $CPMenuItem__setIsRadio_(self, _cmd, aFlag)
{
    self._radio = aFlag;
    if (self._radio)
    {
        objj_msgSend(self, "setCheckable:", NO);
        if (self._selected)
            (self._DOMElement.children(".cpmenu-item-icon")).addClass("selected");
        else
            (self._DOMElement.children(".cpmenu-item-icon")).removeClass("selected");
    }
    else
        (self._DOMElement.children(".cpmenu-item-icon")).removeClass("selected");
}

), new objj_method(sel_getUid("setSupermenu:"), function $CPMenuItem__setSupermenu_(self, _cmd, aMenu)
{
    self._menu = aMenu;
    if (self._submenu)
        objj_msgSend(self._submenu, "setSupermenu:", self._menu);
}

), new objj_method(sel_getUid("setSelected:"), function $CPMenuItem__setSelected_(self, _cmd, aFlag)
{
    self._selected = aFlag;
    if (self._radio)
    {
        if (self._selected)
            (self._DOMElement.children(".cpmenu-item-icon")).addClass("selected");
        else
            (self._DOMElement.children(".cpmenu-item-icon")).removeClass("selected");
    }
}

), new objj_method(sel_getUid("setTitle:"), function $CPMenuItem__setTitle_(self, _cmd, aTitle)
{
    self._title = aTitle;
    (self._DOMElement.children(".cpmenu-item-label")).text(self._title);
}

), new objj_method(sel_getUid("closeSubmenu"), function $CPMenuItem__closeSubmenu(self, _cmd)
{
    if (objj_msgSend(self._submenu, "isVisible"))
        objj_msgSend(self._submenu, "close:", self);
}

), new objj_method(sel_getUid("hideSubmenu"), function $CPMenuItem__hideSubmenu(self, _cmd)
{
    objj_msgSend(self, "_hideSubmenu");
}

), new objj_method(sel_getUid("toggleCheck"), function $CPMenuItem__toggleCheck(self, _cmd)
{
    if (self._checkable)
        objj_msgSend(self, "setChecked:", !self._isChecked);
}

), new objj_method(sel_getUid("triggerAction"), function $CPMenuItem__triggerAction(self, _cmd)
{
    self._menu._disabledMouse = YES;
    var flash = setInterval(    function()
    {
        if (self._DOMElement.hasClass("highlight"))
            self._DOMElement.removeClass("highlight");
        else
            self._DOMElement.addClass("highlight");
    }, 60);
    setTimeout(    function()
    {
        clearTimeout(flash);
        if (self._radio)
        {
            objj_msgSend(self._menu, "unselectAllItems");
            objj_msgSend(self, "setSelected:", YES);
        }        else if (self._checkable)
        {
            objj_msgSend(self, "setChecked:", !self._isChecked);
        }        objj_msgSend(self._menu, "setSelectedItem:", self);
        objj_msgSend(self._menu, "close:", self);
        if (self._action && self._target)
        {
            objj_msgSend(CPApp, "sendAction:to:from:", self._action, self._target, self);
        }        self._menu._disabledMouse = NO;
        objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
    }, 200);
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("initialize"), function $CPMenuItem__initialize(self, _cmd)
{
    CPMenuItemDOMElementPrototype = ($("<div></div>")).addClass("cpmenu-item");
    CPMenuItemDOMElementPrototype.attr("role", "menuitem");
    CPMenuItemDOMElementPrototype.append(($("<div></div>")).addClass("cpmenu-item-icon"));
    CPMenuItemDOMElementPrototype.append(($("<label></label>")).addClass("cpmenu-item-label"));
}

), new objj_method(sel_getUid("menuItemWithTitle:"), function $CPMenuItem__menuItemWithTitle_(self, _cmd, aTitle)
{
    var m = objj_msgSend(objj_msgSend(CPMenuItem, "alloc"), "init");
    objj_msgSend(m, "setTitle:", aTitle);
    return m;
}

)]);
}var CPMenuItemCheckableKey = "CPMenuItemCheckableKey",
    CPMenuItemEnabledKey = "CPMenuItemEnabledKey",
    CPMenuItemIsCheckedKey = "CPMenuItemIsCheckedKey",
    CPMenuItemIsRadioKey = "CPMenuItemIsRadioKey",
    CPMenuItemSelectableKey = "CPMenuItemSelectableKey",
    CPMenuItemTagKey = "CPMenuItemTagKey",
    CPMenuItemIconKey = "CPMenuItemIconKey",
    CPMenuItemSubMenuKey = "CPMenuItemSubMenuKey",
    CPMenuItemTitleKey = "CPMenuItemTitleKey",
    CPMenuItemActionKey = "CPMenuItemActionKey",
    CPMenuItemTargetKey = "CPMenuItemTargetKey";
{
var the_class = objj_getClass("CPMenuItem")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPMenuItem\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPMenuItem__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPMenuItem").super_class }, "init");
    if (self)
    {
        self._tag = objj_msgSend(aCoder, "decodeIntForKey:", CPMenuItemTagKey);
        self._DOMElement = CPMenuItemDOMElementPrototype.clone(false);
        objj_msgSend(self, "setEnabled:", objj_msgSend(aCoder, "decodeBoolForKey:", CPMenuItemEnabledKey));
        objj_msgSend(self, "setCheckable:", objj_msgSend(aCoder, "decodeBoolForKey:", CPMenuItemCheckableKey));
        objj_msgSend(self, "setChecked:", objj_msgSend(aCoder, "decodeBoolForKey:", CPMenuItemIsCheckedKey));
        objj_msgSend(self, "setIsRadio:", objj_msgSend(aCoder, "decodeBoolForKey:", CPMenuItemIsRadioKey));
        objj_msgSend(self, "setSubmenu:", objj_msgSend(aCoder, "decodeObjectForKey:", CPMenuItemSubMenuKey));
        objj_msgSend(self, "setSelectable:", objj_msgSend(aCoder, "decodeBoolForKey:", CPMenuItemSelectableKey));
        objj_msgSend(self, "setIcon:", objj_msgSend(aCoder, "decodeObjectForKey:", CPMenuItemIconKey));
        objj_msgSend(self, "setAction:", objj_msgSend(aCoder, "decodeObjectForKey:", CPMenuItemActionKey));
        if (objj_msgSend(aCoder, "containsValueForKey:", CPMenuItemTargetKey))
            objj_msgSend(self, "setTarget:", objj_msgSend(aCoder, "decodeObjectForKey:", CPMenuItemTargetKey));
        objj_msgSend(self, "setTitle:", objj_msgSend(aCoder, "decodeObjectForKey:", CPMenuItemTitleKey));
        objj_msgSend(self, "_attachEvents");
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPMenuItem__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPMenuItem").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._checkable, CPMenuItemCheckableKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._enabled, CPMenuItemEnabledKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._isChecked, CPMenuItemIsCheckedKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._radio, CPMenuItemIsRadioKey);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._tag, CPMenuItemTagKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._selectable, CPMenuItemSelectableKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._icon, CPMenuItemIconKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._submenu, CPMenuItemSubMenuKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._title, CPMenuItemTitleKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._action, CPMenuItemActionKey);
    objj_msgSend(aCoder, "encodeConditionalObject:forKey:", self._target, CPMenuItemTargetKey);
}

)]);
}var CPMenuDOMElementPrototype = null;
var _CPFocusMenu = nil;
{var the_class = objj_allocateClassPair(CPObject, "CPMenu"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_DOMElement"), new objj_ivar("_position"), new objj_ivar("_title"), new objj_ivar("_highlightedItem"), new objj_ivar("_selectedItem"), new objj_ivar("_supermenu"), new objj_ivar("_menuItems"), new objj_ivar("_width"), new objj_ivar("_bodyTop"), new objj_ivar("_radio"), new objj_ivar("_delegate"), new objj_ivar("_upArrowVisible"), new objj_ivar("_downArrowVisible"), new objj_ivar("_isVisible"), new objj_ivar("_scrollTimerDown"), new objj_ivar("_scrollTimerUp"), new objj_ivar("_disabledMouse"), new objj_ivar("_ignoreMouseUp"), new objj_ivar("_separators")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("title"), function $CPMenu__title(self, _cmd)
{
    return self._title;
}

), new objj_method(sel_getUid("setTitle:"), function $CPMenu__setTitle_(self, _cmd, newValue)
{
    self._title = newValue;
}

), new objj_method(sel_getUid("selectedItem"), function $CPMenu__selectedItem(self, _cmd)
{
    return self._selectedItem;
}

), new objj_method(sel_getUid("setSelectedItem:"), function $CPMenu__setSelectedItem_(self, _cmd, newValue)
{
    self._selectedItem = newValue;
}

), new objj_method(sel_getUid("supermenu"), function $CPMenu__supermenu(self, _cmd)
{
    return self._supermenu;
}

), new objj_method(sel_getUid("setSupermenu:"), function $CPMenu__setSupermenu_(self, _cmd, newValue)
{
    self._supermenu = newValue;
}

), new objj_method(sel_getUid("width"), function $CPMenu__width(self, _cmd)
{
    return self._width;
}

), new objj_method(sel_getUid("_setWidth:"), function $CPMenu___setWidth_(self, _cmd, newValue)
{
    self._width = newValue;
}

), new objj_method(sel_getUid("delegate"), function $CPMenu__delegate(self, _cmd)
{
    return self._delegate;
}

), new objj_method(sel_getUid("setDelegate:"), function $CPMenu__setDelegate_(self, _cmd, newValue)
{
    self._delegate = newValue;
}

), new objj_method(sel_getUid("init"), function $CPMenu__init(self, _cmd)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPMenu").super_class }, "init");
    if (self)
    {
        self._DOMElement = CPMenuDOMElementPrototype.clone(false);
        objj_msgSend(self, "_attachEvents");
        self._menuItems = [];
        self._title = "";
        self._position = CGPointMake(0, 0);
        self._highlightedItem = null;
        self._selectedItem = null;
        self._supermenu = null;
        self._separators = objj_msgSend(CPIndexSet, "indexSet");
        self._upArrowVisible = NO;
        self._downArrowVisible = NO;
        self._isVisible = NO;
        self._disabledMouse = NO;
        self._ignoreMouseUp = NO;
        self._bodyTop = 0.0;
        self._scrollTimerUp = null;
        self._scrollTimerDown = null;
        objj_msgSend(self, "_setBodyTop:", 5.0);
        objj_msgSend(self, "_showDownArrow:", NO);
        objj_msgSend(self, "_showUpArrow:", NO);
        objj_msgSend(self, "setWidth:", 125.0);
        objj_msgSend(self, "hide");
    }
    return self;
}

), new objj_method(sel_getUid("_attachEvents"), function $CPMenu___attachEvents(self, _cmd)
{
    var up = self._DOMElement.children(".cpmenu-scrollup");
    up.bind({mouseover:     function(event)
    {
        event.stopPropagation();
        event.preventDefault();
        if (!self._disabledMouse)
        {
            if (self._scrollTimerUp)
            {
                clearTimeout(self._scrollTimerUp);
                self._scrollTimerUp = null;
            }            var sUp =             function()
            {
                objj_msgSend(self, "_scrollUpBody:", 2.0);
                if (self._scrollTimerUp)
                {
                    self._scrollTimerUp = setTimeout(sUp, 2);
                }            };
            self._scrollTimerUp = setTimeout(sUp, 2);
        }    }, mouseout:     function(event)
    {
        if (self._scrollTimerUp)
        {
            clearTimeout(self._scrollTimerUp);
        }        self._scrollTimerUp = null;
    }});
    var down = self._DOMElement.children(".cpmenu-scrolldown");
    down.bind({mouseover:     function(event)
    {
        event.preventDefault();
        event.stopPropagation();
        if (!self._disabledMouse)
        {
            if (self._scrollTimerDown)
            {
                clearTimeout(self._scrollTimerDown);
                self._scrollTimerDown = null;
            }            var sDown =             function()
            {
                objj_msgSend(self, "_scrollDownBody:", 2.0);
                if (self._scrollTimerDown)
                {
                    self._scrollTimerDown = setTimeout(sDown, 2);
                }            };
            self._scrollTimerDown = setTimeout(sDown, 2);
        }    }, mouseout:     function(event)
    {
        if (self._scrollTimerDown)
        {
            clearTimeout(self._scrollTimerDown);
        }        self._scrollTimerDown = null;
    }});
    self._DOMElement.bind({mouseenter:     function(evt)
    {
        evt.stopPropagation();
        self._disabledMouse = NO;
    }, mouseleave:     function(evt)
    {
        evt.stopPropagation();
        if (self._highlightedItem)
            if (!objj_msgSend(self._highlightedItem, "submenu"))
                objj_msgSend(self, "setHighlightedMenuItem:", nil);
    }, keydown:     function(evt)
    {
        evt.stopPropagation();
        evt.preventDefault();
        objj_msgSend(self, "keyDown:", evt);
        self._disabledMouse = NO;
    }, keyup:     function(evt)
    {
        evt.stopPropagation();
        evt.preventDefault();
    }, blur:     function(evt)
    {
        var count = self._menuItems.length,
            index = 0;
        for (; index < count; index++)
        {
            var submenu = objj_msgSend(self._menuItems[index], "submenu");
            if (submenu)
            {
                if (submenu === _CPFocusMenu)
                    return;
            }        }        objj_msgSend(self, "close:", nil);
    }});
    self._DOMElement.on("mouseWheel",     function(evt)
    {
        if (evt.deltaY != 0)
        {
            if (evt.deltaY < 0 && self._downArrowVisible)
                objj_msgSend(self, "_scrollDownBody:", 8.0 * ABS(deltaY));
            else if (evt.deltaY > 0 && self._upArrowVisible)
                objj_msgSend(self, "_scrollUpBody:", 8.0 * ABS(deltaY));
        }    });
}

), new objj_method(sel_getUid("_adjustMenuHeight"), function $CPMenu___adjustMenuHeight(self, _cmd)
{
    if (self._menuItems.length > 0)
    {
        var h = objj_msgSend(self, "menuHeight");
        self._DOMElement.css("height", MIN(h, ($(window)).height() - 5 - MAX(0, self._position.y - 2)));
        objj_msgSend(self, "_checkIfNeedsScrolling");
    }
}

), new objj_method(sel_getUid("_checkIfNeedsScrolling"), function $CPMenu___checkIfNeedsScrolling(self, _cmd)
{
    var bodyEl = self._DOMElement.children(".cpmenu-body");
    var end = self._bodyTop + bodyEl.height();
    if (end > ROUND(self._DOMElement.height() - 5.0))
    {
        if (!self._downArrowVisible)
            objj_msgSend(self, "_showDownArrow:", YES);
    }
    else
    {
        objj_msgSend(self, "_showDownArrow:", NO);
        self._scrollTimerDown = null;
    }
    if (self._bodyTop < 5)
    {
        if (!self._upArrowVisible)
        {
            objj_msgSend(self, "_showUpArrow:", YES);
        }
    }
    else
    {
        self._scrollTimerUp = null;
        objj_msgSend(self, "_showUpArrow:", NO);
    }
    if (self._bodyTop < ROUND(self._DOMElement.height() - 5.0 - bodyEl.height()))
        objj_msgSend(self, "_setBodyTop:", self._DOMElement.height() - 5.0 - bodyEl.height());
    if (self._bodyTop > 5)
        objj_msgSend(self, "_setBodyTop:", 5);
}

), new objj_method(sel_getUid("_showDownArrow:"), function $CPMenu___showDownArrow_(self, _cmd, aFlag)
{
    if (aFlag)
    {
        self._downArrowVisible = YES;
        (self._DOMElement.children(".cpmenu-scrolldown")).show();
    }
    else
    {
        self._downArrowVisible = NO;
        (self._DOMElement.children(".cpmenu-scrolldown")).hide();
    }
}

), new objj_method(sel_getUid("_showUpArrow:"), function $CPMenu___showUpArrow_(self, _cmd, aFlag)
{
    if (aFlag)
    {
        self._upArrowVisible = YES;
        (self._DOMElement.children(".cpmenu-scrollup")).show();
    }
    else
    {
        self._upArrowVisible = NO;
        (self._DOMElement.children(".cpmenu-scrollup")).hide();
    }
}

), new objj_method(sel_getUid("_scrollUpBody:"), function $CPMenu___scrollUpBody_(self, _cmd, unit)
{
    objj_msgSend(self, "_setBodyTop:", self._bodyTop + unit);
    objj_msgSend(self, "_checkIfNeedsScrolling");
}

), new objj_method(sel_getUid("_scrollDownBody:"), function $CPMenu___scrollDownBody_(self, _cmd, unit)
{
    if (self._position.y - unit >= 0)
        objj_msgSend(self, "setPosition:", CGPointMake(self._position.x, self._position.y - unit));
    else
        objj_msgSend(self, "_setBodyTop:", self._bodyTop - unit);
    objj_msgSend(self, "_checkIfNeedsScrolling");
}

), new objj_method(sel_getUid("_setBodyTop:"), function $CPMenu___setBodyTop_(self, _cmd, bt)
{
    self._bodyTop = bt;
    (self._DOMElement.children(".cpmenu-body")).css("top", self._bodyTop);
}

), new objj_method(sel_getUid("setIsRadio:"), function $CPMenu__setIsRadio_(self, _cmd, aFlag)
{
    self._radio = aFlag;
    var count = self._menuItems.length,
        index = 0;
    for (; index < count; index++)
        objj_msgSend(self._menuItems[index], "setIsRadio:", self._radio);
    if (count > 0)
        self._selectedItem = self._menuItems[0];
}

), new objj_method(sel_getUid("setWidth:"), function $CPMenu__setWidth_(self, _cmd, w)
{
    self._width = w;
    self._DOMElement.css("width", w);
}

), new objj_method(sel_getUid("width"), function $CPMenu__width(self, _cmd)
{
    return self._width;
}

), new objj_method(sel_getUid("setHighlightedMenuItem:"), function $CPMenu__setHighlightedMenuItem_(self, _cmd, aMenuItem)
{
    if (self._highlightedItem)
        objj_msgSend(self._highlightedItem, "setHighlighted:", NO);
    if (aMenuItem)
    {
        if (objj_msgSend(self._menuItems, "containsObject:", aMenuItem))
        {
            self._highlightedItem = aMenuItem;
            objj_msgSend(self._highlightedItem, "setHighlighted:", YES);
            _CPFocusMenu = self;
            self._DOMElement.makeKey();
            if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("menu:willHighlightItem:")))
                objj_msgSend(self._delegate, "performSelector:withObjects:", sel_getUid("menu:willHighlightItem:"), self, self._highlightedItem);
        }
    }
    else
        self._highlightedItem = null;
}

), new objj_method(sel_getUid("fadeIn:sender:"), function $CPMenu__fadeIn_sender_(self, _cmd, fadeTime, sender)
{
    if (!$.contains(document.body, (self._DOMElement.get())[0]))
        ($("body")).append(self._DOMElement);
    self._ignoreMouseUp = YES;
    objj_msgSend(self, "setHighlightedMenuItem:", Nil);
    setTimeout(    function()
    {
        self._ignoreMouseUp = NO;
    }, 400);
    objj_msgSend(self, "_setBodyTop:", 5.0);
    self._disabledMouse = NO;
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("menuWillShow:")))
        objj_msgSend(self._delegate, "performSelector:withObject:", sel_getUid("menuWillShow:"), self);
    self._DOMElement.fadeIn(fadeTime,     function()
    {
        _CPFocusMenu = self;
        self._isVisible = YES;
        objj_msgSend(CPApp._keyWindow, "resignKeyWindow");
        self._DOMElement.makeKey();
    });
    objj_msgSend(self, "_adjustMenuHeight");
}

), new objj_method(sel_getUid("show:"), function $CPMenu__show_(self, _cmd, sender)
{
    objj_msgSend(self, "fadeIn:sender:", 0, sender);
}

), new objj_method(sel_getUid("close:"), function $CPMenu__close_(self, _cmd, sender)
{
    var count = self._menuItems.length,
        index = 0;
    objj_msgSend(self, "hide");
    for (; index < count; index++)
        objj_msgSend(self._menuItems[index], "closeSubmenu");
    if (objj_msgSend(self._supermenu, "isVisible") && _CPFocusMenu != self._supermenu)
        objj_msgSend(self._supermenu, "close:", self);
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("menuDidClose:")))
        objj_msgSend(self._delegate, "performSelector:withObject:", sel_getUid("menuDidClose:"), self);
    if (_CPFocusMenu === self)
        _CPFocusMenu = null;
}

), new objj_method(sel_getUid("hide"), function $CPMenu__hide(self, _cmd)
{
    self._DOMElement.hide();
    var count = self._menuItems.length,
        index = 0;
    for (; index < count; index++)
    {
        objj_msgSend(self._menuItems[index], "hideSubmenu");
        self._menuItems[index]._DOMElement.removeClass("highlight");
    }
    self._isVisible = NO;
}

), new objj_method(sel_getUid("isVisible"), function $CPMenu__isVisible(self, _cmd)
{
    return self._isVisible;
}

), new objj_method(sel_getUid("setPosition:"), function $CPMenu__setPosition_(self, _cmd, aPoint)
{
    if (self._position && aPoint && CGPointEqualToPoint(self._position, aPoint))
        return;
    self._position = CPMakePoint(MIN(aPoint.x, ($(document)).width() - self._DOMElement.width()), aPoint.y);
    self._DOMElement.css({left: self._position.x, top: MAX(0, self._position.y)});
    objj_msgSend(self, "_adjustMenuHeight");
}

), new objj_method(sel_getUid("rootMenu"), function $CPMenu__rootMenu(self, _cmd)
{
    if (self._supermenu)
        return objj_msgSend(self._supermenu, "rootMenu");
    return self;
}

), new objj_method(sel_getUid("unselectAllItems"), function $CPMenu__unselectAllItems(self, _cmd)
{
    var count = self._menuItems.length,
        index = 0;
    for (; index < count; index++)
        objj_msgSend(self._menuItems[index], "setSelected:", NO);
}

), new objj_method(sel_getUid("highlightFirstItem"), function $CPMenu__highlightFirstItem(self, _cmd)
{
    if (self._menuItems.length > 0)
    {
        objj_msgSend(self, "setHighlightedMenuItem:", self._menuItems[0]);
        _CPFocusMenu = self;
        self._DOMElement.makeKey();
    }
}

), new objj_method(sel_getUid("indexOfHighlightedMenuItem"), function $CPMenu__indexOfHighlightedMenuItem(self, _cmd)
{
    if (self._highlightedItem)
        return objj_msgSend(self._menuItems, "indexOfObject:inRange:", self._highlightedItem, nil);
    return CPNotFound;
}

), new objj_method(sel_getUid("insertMenuItem:atIndex:"), function $CPMenu__insertMenuItem_atIndex_(self, _cmd, aMenuItem, anIndex)
{
    if (anIndex > -1 && aMenuItem)
    {
        objj_msgSend(aMenuItem, "setSupermenu:", self);
        objj_msgSend(aMenuItem, "setIsRadio:", self._radio);
        if (self._radio && !self._selectedItem)
            self._selectedItem = aMenuItem;
        if (anIndex < self._menuItems.length)
        {
            objj_msgSend(self._menuItems, "insertObject:atIndex:", aMenuItem, anIndex);
            aMenuItem._DOMElement.insertBefore(self._menuItems[anIndex]._DOMElement);
        }
        else
        {
            objj_msgSend(self._menuItems, "addObject:", aMenuItem);
            (self._DOMElement.children(".cpmenu-body")).append(aMenuItem._DOMElement);
        }
    }
}

), new objj_method(sel_getUid("addItem:"), function $CPMenu__addItem_(self, _cmd, aMenuItem)
{
    objj_msgSend(self, "insertMenuItem:atIndex:", aMenuItem, self._menuItems.length);
}

), new objj_method(sel_getUid("numberOfItems"), function $CPMenu__numberOfItems(self, _cmd)
{
    return self._menuItems.length;
}

), new objj_method(sel_getUid("addSeparator"), function $CPMenu__addSeparator(self, _cmd)
{
    objj_msgSend(self, "insertSeparatorAtIndex:", self._menuItems.length);
}

), new objj_method(sel_getUid("insertSeparatorAtIndex:"), function $CPMenu__insertSeparatorAtIndex_(self, _cmd, anIndex)
{
    if (anIndex > -1)
    {
        var menuSeparator = ($("<div></div>")).addClass("cpmenu-item-separator");
        if (anIndex < self._menuItems.length)
        {
            menuSeparator.insertBefore(self._menuItems[anIndex]._DOMElement);
        }
        else
        {
            (self._DOMElement.children(".cpmenu-body")).append(menuSeparator);
        }
        objj_msgSend(self._separators, "addIndex:", anIndex);
    }
}

), new objj_method(sel_getUid("itemAtIndex:"), function $CPMenu__itemAtIndex_(self, _cmd, anIndex)
{
    if (anIndex > -1 && anIndex < self._menuItems.length)
        return self._menuItems[anIndex];
    return nil;
}

), new objj_method(sel_getUid("itemWithTitle:"), function $CPMenu__itemWithTitle_(self, _cmd, aString)
{
    var count = self._menuItems.length,
        index = 0;
    for (; index < count; index++)
    {
        if (objj_msgSend(self._menuItems[index], "title") === aString)
            return self._menuItems[index];
    }
    return nil;
}

), new objj_method(sel_getUid("indexOfItem:"), function $CPMenu__indexOfItem_(self, _cmd, aMenuItem)
{
    return objj_msgSend(self._menuItems, "indexOfObject:inRange:", aMenuItem, nil);
}

), new objj_method(sel_getUid("selectItemAtIndex:"), function $CPMenu__selectItemAtIndex_(self, _cmd, anIndex)
{
    var item = objj_msgSend(self, "itemAtIndex:", anIndex);
    if (item)
    {
        objj_msgSend(self._selectedItem, "setSelected:", NO);
        objj_msgSend(item, "setSelected:", YES);
        self._selectedItem = item;
        objj_msgSend(self, "setHighlightedMenuItem:", item);
    }
}

), new objj_method(sel_getUid("selectItemWithTitle:"), function $CPMenu__selectItemWithTitle_(self, _cmd, aString)
{
    var item = objj_msgSend(self, "itemWithTitle:", aString);
    if (item)
    {
        objj_msgSend(self._selectedItem, "setSelected:", NO);
        objj_msgSend(item, "setSelected:", YES);
        self._selectedItem = item;
        objj_msgSend(self, "setHighlightedMenuItem:", item);
    }
}

), new objj_method(sel_getUid("scrollMenuToHighlightedItem"), function $CPMenu__scrollMenuToHighlightedItem(self, _cmd)
{
    if (self._highlightedItem)
    {
        var p = (self._highlightedItem._DOMElement.position()).top;
        var bodyEl = self._DOMElement.children(".cpmenu-body");
        if (p + 25 > self._DOMElement.height() - 5 - self._downArrowVisible * 14)
        {
            var moveby = p + 30 - self._DOMElement.height() + self._downArrowVisible * 14;
            if (self._position.y - moveby >= 0)
                objj_msgSend(self, "setPosition:", CGPointMake(self._position.x, self._position.y - moveby));
            else
                objj_msgSend(self, "_setBodyTop:", -p - 25);
        }
        else
            objj_msgSend(self, "_setBodyTop:", 5);
    }
}

), new objj_method(sel_getUid("scrollMenuToTop"), function $CPMenu__scrollMenuToTop(self, _cmd)
{
    objj_msgSend(self, "_setBodyTop:", 0.0);
    objj_msgSend(self, "_showUpArrow:", NO);
}

), new objj_method(sel_getUid("itemArray"), function $CPMenu__itemArray(self, _cmd)
{
    return self._menuItems;
}

), new objj_method(sel_getUid("menuHeight"), function $CPMenu__menuHeight(self, _cmd)
{
    if (self._menuItems.length > 0)
    {
        var itemHeight = self._menuItems[0]._DOMElement.height() + 1;
        return self._menuItems.length * itemHeight + objj_msgSend(self._separators, "count") * 6 + 9;
    }
    return objj_msgSend(self._separators, "count") * 6 + 9;
}

), new objj_method(sel_getUid("removeAllItems"), function $CPMenu__removeAllItems(self, _cmd)
{
    $.each(self._menuItems,     function(index, item)
    {
        item._DOMElement.remove();
    });
    objj_msgSend(self._menuItems, "removeAllObjects");
}

), new objj_method(sel_getUid("keyDown:"), function $CPMenu__keyDown_(self, _cmd, theEvent)
{
    self._disabledMouse = YES;
    var KC = theEvent.which;
    if (KC === CPDownArrowKeyCode)
    {
        var index = objj_msgSend(self, "indexOfHighlightedMenuItem");
        if (index < self._menuItems.length - 1)
        {
            index++;
            var nextItem = self._menuItems[index];
            while (!objj_msgSend(nextItem, "isEnabled") && index < self._menuItems.length)
            {
                index++;
                nextItem = self._menuItems[index];
            }
            objj_msgSend(self, "setHighlightedMenuItem:", nextItem);
            objj_msgSend(self, "scrollMenuToHighlightedItem");
            return;
        }
    }
    else if (KC === CPUpArrowKeyCode)
    {
        var index = objj_msgSend(self, "indexOfHighlightedMenuItem");
        if (index < 0)
        {
            var nextItem = objj_msgSend(self._menuItems, "lastObject");
            objj_msgSend(self, "setHighlightedMenuItem:", nextItem);
            return;
        }
        if (index > 0)
        {
            index--;
            var nextItem = self._menuItems[index];
            while (!objj_msgSend(nextItem, "isEnabled") && index > -1)
            {
                index--;
                nextItem = self._menuItems[index];
            }
            objj_msgSend(self, "setHighlightedMenuItem:", nextItem);
            objj_msgSend(self, "scrollMenuToHighlightedItem");
            return;
        }
    }
    else if (KC === CPRightArrowKeyCode)
    {
        if (self._highlightedItem)
        {
            if (objj_msgSend(self._highlightedItem, "submenu"))
            {
                objj_msgSend(self._highlightedItem, "_showSubmenu:", YES);
                return;
            }
        }
        if (objj_msgSend(self._supermenu, "isKindOfClass:", objj_msgSend(_CPMenuBar, "class")))
            objj_msgSend(self._supermenu, "keyDown:", theEvent);
    }
    else if (KC === CPLeftArrowKeyCode)
    {
        if (objj_msgSend(self._supermenu, "isKindOfClass:", objj_msgSend(_CPMenuBar, "class")))
            objj_msgSend(self._supermenu, "keyDown:", theEvent);
        else
        {
            if (self._supermenu)
            {
                _CPFocusMenu = self._supermenu;
                self._supermenu._DOMElement.makeKey();
                objj_msgSend(self, "hide");
            }
        }
    }
    else if (KC === CPReturnKeyCode)
    {
        if (self._highlightedItem)
        {
            objj_msgSend(self._highlightedItem, "triggerAction");
            return;
        }
    }
    else if (KC === CPEscapeKeyCode)
    {
        objj_msgSend(objj_msgSend(self, "rootMenu"), "close:", self);
    }
    else
    {
        var keyChar = (String.fromCharCode(theEvent.which)).toUpperCase();
        var count = self._menuItems.length,
            sindex = objj_msgSend(self, "indexOfHighlightedMenuItem"),
            index = sindex + 1,
            pass = 0;
        while (index != sindex && pass < 2)
        {
            if (self._menuItems[index])
            {
                var firstCharTitle = objj_msgSend(objj_msgSend(self._menuItems[index], "title"), "characterAtIndex:", 0).toUpperCase();
                if (keyChar === firstCharTitle && self._menuItems[index] !== self._highlightedItem)
                {
                    objj_msgSend(self, "setHighlightedMenuItem:", self._menuItems[index]);
                    objj_msgSend(self, "scrollMenuToHighlightedItem");
                    return;
                }
            }
            index++;
            if (index >= count)
            {
                index = 0;
                pass++;
            }
        }
    }
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("initialize"), function $CPMenu__initialize(self, _cmd)
{
    CPMenuDOMElementPrototype = ($("<div></div>")).addClass("cpmenu");
    CPMenuDOMElementPrototype.attr({role: "menu", tabIndex: 1});
    CPMenuDOMElementPrototype.css({overflow: "visible", zIndex: 10000});
    CPMenuDOMElementPrototype.append(($("<div></div>")).addClass("cpmenu-body"));
    var up = ($("<div></div>")).addClass("cpmenu-scrollup");
    up.append(($("<div></div>")).addClass("cpmenu-scrollup-img"));
    CPMenuDOMElementPrototype.append(up);
    var down = ($("<div></div>")).addClass("cpmenu-scrolldown");
    down.append(($("<div></div>")).addClass("cpmenu-scrolldown-img"));
    CPMenuDOMElementPrototype.append(down);
}

), new objj_method(sel_getUid("menuBarVisible"), function $CPMenu__menuBarVisible(self, _cmd)
{
    return _CPMenuBarVisible;
}

), new objj_method(sel_getUid("menuBarHeight"), function $CPMenu__menuBarHeight(self, _cmd)
{
    return 28.0;
}

), new objj_method(sel_getUid("setMenuBarVisible:"), function $CPMenu__setMenuBarVisible_(self, _cmd, aFlag)
{
    if (_CPMenuBarVisible === aFlag)
        return;
    _CPMenuBarVisible = aFlag;
    if (_CPMenuBarVisible)
    {
        if (!CPApp._mainMenu)
            CPApp._mainMenu = objj_msgSend(objj_msgSend(_CPMenuBar, "alloc"), "init");
        ($("body")).append(CPApp._mainMenu._DOMElement);
    }
    else
    {
        if (CPApp._mainMenu)
            CPApp._mainMenu._DOMElement.remove();
    }
    objj_msgSend(CPApp._windows[0], "_adjustContentViewSize");
}

), new objj_method(sel_getUid("menuWithTitle:"), function $CPMenu__menuWithTitle_(self, _cmd, aTitle)
{
    var a = objj_msgSend(objj_msgSend(CPMenu, "alloc"), "init");
    objj_msgSend(a, "setTitle:", aTitle);
    return a;
}

)]);
}var CPMenuPositionKey = "CPMenuPositionKey",
    CPMenuTitleKey = "CPMenuTitleKey",
    CPMenuItemsKey = "CPMenuItemsKey",
    CPMenuWidthKey = "CPMenuWidthKey",
    CPMenuRadioKey = "CPMenuRadioKey",
    CPMenuSeparatorsKey = "CPMenuSeparatorsKey",
    CPMenuDelegateKey = "CPMenuDelegateKey";
{
var the_class = objj_getClass("CPMenu")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPMenu\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPMenu__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPMenu").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        self._DOMElement = CPMenuDOMElementPrototype.clone(false);
        self._menuItems = [];
        objj_msgSend(self, "_attachEvents");
        var items = objj_msgSend(aCoder, "decodeObjectForKey:", CPMenuItemsKey),
            count = items.length,
            index = 0;
        for (; index < count; index++)
        {
            objj_msgSend(self, "addItem:", items[index]);
        }
        var sep = objj_msgSend(aCoder, "decodeObjectForKey:", CPMenuSeparatorsKey);
        var idxes = [];
        objj_msgSend(sep, "getIndexes:maxCount:inIndexRange:", idxes, -1, nil);
        var count = idxes.length;
        index = 0;
        for (; index < count; index++)
        {
            objj_msgSend(self, "insertSeparatorAtIndex:", idxes[index]);
        }
        objj_msgSend(self, "setPosition:", objj_msgSend(aCoder, "decodePointForKey:", CPMenuPositionKey));
        objj_msgSend(self, "setTitle:", objj_msgSend(aCoder, "decodeObjectForKey:", CPMenuTitleKey));
        objj_msgSend(self, "setWidth:", objj_msgSend(aCoder, "decodeDoubleForKey:", CPMenuWidthKey));
        objj_msgSend(self, "setIsRadio:", objj_msgSend(aCoder, "decodeBoolForKey:", CPMenuRadioKey));
        self._upArrowVisible = NO;
        self._downArrowVisible = NO;
        self._isVisible = NO;
        self._disabledMouse = NO;
        self._bodyTop = 0.0;
        self._scrollTimerUp = null;
        self._scrollTimerDown = null;
        objj_msgSend(self, "_setBodyTop:", 5.0);
        objj_msgSend(self, "_showDownArrow:", NO);
        objj_msgSend(self, "_showUpArrow:", NO);
        objj_msgSend(self, "setDelegate:", objj_msgSend(aCoder, "decodeObjectForKey:", CPMenuDelegateKey));
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPMenu__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPMenu").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodePoint:forKey:", self._position, CPMenuPositionKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._title, CPMenuTitleKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._menuItems, CPMenuItemsKey);
    objj_msgSend(aCoder, "encodeDouble:forKey:", self._width, CPMenuWidthKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._radio, CPMenuRadioKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._separators, CPMenuSeparatorsKey);
    objj_msgSend(aCoder, "encodeConditionalObject:forKey:", self._delegate, CPMenuDelegateKey);
}

)]);
}var CPWindowDOMElementPrototype = nil;
var CPCancelButton = 0,
    CPOKButton = 1;
function __CPBrowserSize()
{
    var e = window,
        a = 'inner';
    if (!('innerWidth' in window))
    {
        a = 'client';
        e = document.documentElement || document.body;
    }
    return CPMakeSize(e[a + 'Width'], e[a + 'Height']);
}
var CPBorderlessWindowMask = 1 << 0,
    CPStaticWindowMask = 1 << 1,
    CPClosableWindowMask = 1 << 2,
    CPResizableWindowMask = 1 << 3,
    CPTexturedBackgroundWindowMask = 1 << 4,
    CPBorderlessBridgeWindowMask = 1 << 5,
    CPHUDBackgroundWindowMask = 1 << 6;
var CPWindowWillCloseNotification = "CPWindowWillCloseNotification",
    CPWindowDidBecomeKeyNotification = "CPWindowDidBecomeKeyNotification",
    CPWindowDidResignKeyNotification = "CPWindowDidResignKeyNotification",
    CPWindowWillBeginSheetNotification = "CPWindowWillBeginSheetNotification",
    CPWindowDidEndSheetNotification = "CPWindowDidEndSheetNotification",
    CPWindowDidResizeNotification = "CPWindowDidResizeNotification",
    CPWindowDidMoveNotification = "CPWindowDidMoveNotification";
{var the_class = objj_allocateClassPair(CPResponder, "CPWindow"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_windowNumber"), new objj_ivar("_level"), new objj_ivar("_styleMask"), new objj_ivar("_title"), new objj_ivar("_isVisible"), new objj_ivar("_isMovable"), new objj_ivar("_isResizable"), new objj_ivar("_isClosable"), new objj_ivar("_isSheet"), new objj_ivar("contentView"), new objj_ivar("_initialFirstResponder"), new objj_ivar("_toolbar"), new objj_ivar("_frame"), new objj_ivar("_initFrame"), new objj_ivar("_minSize"), new objj_ivar("_maxSize"), new objj_ivar("_isModal"), new objj_ivar("_DOMElement"), new objj_ivar("_DOMWindowContentDiv"), new objj_ivar("_DOMWindowTitleBar"), new objj_ivar("_DOMWindowTitle"), new objj_ivar("_DOMWindowCloseBtn"), new objj_ivar("_DOMWindowModalOverlay"), new objj_ivar("_sheetContext"), new objj_ivar("_sheetAttached"), new objj_ivar("_autorecalculatesKeyViewLoop"), new objj_ivar("_keyViewLoopIsDirty"), new objj_ivar("_firstResponder"), new objj_ivar("_delegate")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("windowNumber"), function $CPWindow__windowNumber(self, _cmd)
{
    return self._windowNumber;
}

), new objj_method(sel_getUid("_setWindowNumber:"), function $CPWindow___setWindowNumber_(self, _cmd, newValue)
{
    self._windowNumber = newValue;
}

), new objj_method(sel_getUid("styleMask"), function $CPWindow__styleMask(self, _cmd)
{
    return self._styleMask;
}

), new objj_method(sel_getUid("_setStyleMask:"), function $CPWindow___setStyleMask_(self, _cmd, newValue)
{
    self._styleMask = newValue;
}

), new objj_method(sel_getUid("title"), function $CPWindow__title(self, _cmd)
{
    return self._title;
}

), new objj_method(sel_getUid("_setTitle:"), function $CPWindow___setTitle_(self, _cmd, newValue)
{
    self._title = newValue;
}

), new objj_method(sel_getUid("isVisible"), function $CPWindow__isVisible(self, _cmd)
{
    return self._isVisible;
}

), new objj_method(sel_getUid("_setIsVisible:"), function $CPWindow___setIsVisible_(self, _cmd, newValue)
{
    self._isVisible = newValue;
}

), new objj_method(sel_getUid("isMovable"), function $CPWindow__isMovable(self, _cmd)
{
    return self._isMovable;
}

), new objj_method(sel_getUid("_setIsMovable:"), function $CPWindow___setIsMovable_(self, _cmd, newValue)
{
    self._isMovable = newValue;
}

), new objj_method(sel_getUid("isResizable"), function $CPWindow__isResizable(self, _cmd)
{
    return self._isResizable;
}

), new objj_method(sel_getUid("_setIsResizable:"), function $CPWindow___setIsResizable_(self, _cmd, newValue)
{
    self._isResizable = newValue;
}

), new objj_method(sel_getUid("isClosable"), function $CPWindow__isClosable(self, _cmd)
{
    return self._isClosable;
}

), new objj_method(sel_getUid("_setIsClosable:"), function $CPWindow___setIsClosable_(self, _cmd, newValue)
{
    self._isClosable = newValue;
}

), new objj_method(sel_getUid("isSheet"), function $CPWindow__isSheet(self, _cmd)
{
    return self._isSheet;
}

), new objj_method(sel_getUid("setIsSheet:"), function $CPWindow__setIsSheet_(self, _cmd, newValue)
{
    self._isSheet = newValue;
}

), new objj_method(sel_getUid("contentView"), function $CPWindow__contentView(self, _cmd)
{
    return self.contentView;
}

), new objj_method(sel_getUid("setContentView:"), function $CPWindow__setContentView_(self, _cmd, newValue)
{
    self.contentView = newValue;
}

), new objj_method(sel_getUid("toolbar"), function $CPWindow__toolbar(self, _cmd)
{
    return self._toolbar;
}

), new objj_method(sel_getUid("_setToolbar:"), function $CPWindow___setToolbar_(self, _cmd, newValue)
{
    self._toolbar = newValue;
}

), new objj_method(sel_getUid("minSize"), function $CPWindow__minSize(self, _cmd)
{
    return self._minSize;
}

), new objj_method(sel_getUid("_setMinSize:"), function $CPWindow___setMinSize_(self, _cmd, newValue)
{
    self._minSize = newValue;
}

), new objj_method(sel_getUid("maxSize"), function $CPWindow__maxSize(self, _cmd)
{
    return self._maxSize;
}

), new objj_method(sel_getUid("_setMaxSize:"), function $CPWindow___setMaxSize_(self, _cmd, newValue)
{
    self._maxSize = newValue;
}

), new objj_method(sel_getUid("modal"), function $CPWindow__modal(self, _cmd)
{
    return self._isModal;
}

), new objj_method(sel_getUid("setModal:"), function $CPWindow__setModal_(self, _cmd, newValue)
{
    self._isModal = newValue;
}

), new objj_method(sel_getUid("firstResponder"), function $CPWindow__firstResponder(self, _cmd)
{
    return self._firstResponder;
}

), new objj_method(sel_getUid("_setFirstResponder:"), function $CPWindow___setFirstResponder_(self, _cmd, newValue)
{
    self._firstResponder = newValue;
}

), new objj_method(sel_getUid("delegate"), function $CPWindow__delegate(self, _cmd)
{
    return self._delegate;
}

), new objj_method(sel_getUid("_setDelegate:"), function $CPWindow___setDelegate_(self, _cmd, newValue)
{
    self._delegate = newValue;
}

), new objj_method(sel_getUid("_init"), function $CPWindow___init(self, _cmd)
{
    self._isModal = NO;
    self._isMovable = YES;
    self._isVisible = NO;
    self._isClosable = YES;
    self._sheetAttached = NO;
    self._keyViewLoopIsDirty = YES;
    self._initialFirstResponder = nil;
    self._nextResponder = nil;
    self._autorecalculatesKeyViewLoop = YES;
    self._firstResponder = self;
    self._DOMWindowModalOverlay = ($("<div></div>")).addClass("cpmodal-overlay");
    self._DOMWindowModalOverlay.bind("mousedown click mouseout mouseover mousemove",     function(evt)
    {
        evt.stopPropagation();
        evt.preventDefault();
    });
    _toolbarOverlay = nil;
    self._windowNumber = objj_msgSend(CPApp._windows, "count");
    CPApp._windows[self._windowNumber] = self;
    if (self._styleMask & CPBorderlessBridgeWindowMask)
    {
        if (CPApp._mainWindow)
            return NO;
        CPApp._mainWindow = self;
        CPApp._keyWindow = self;
        self._isVisible = YES;
        self.contentView._DOMElement.attr("role", "application");
        self.contentView._DOMElement.attr("id", "rootView");
        self.contentView._DOMElement.attr("tabIndex", "0");
        var CPWindowToolbarAndContentDiv = ($("<div></div>")).attr("id", "CPWindowToolbarAndContent");
        ($("body")).append(CPWindowToolbarAndContentDiv);
        objj_msgSend(self, "_adjustContentViewSize");
    }
    else
    {
        self._minSize = CPMakeSize(60.0, 60.0);
        self._maxSize = CPMakeSize(Number.MAX_VALUE, Number.MAX_VALUE);
        self._DOMElement = CPWindowDOMElementPrototype.clone(false);
        self._DOMElement.css({left: self._initFrame.origin.x, top: self._initFrame.origin.y, width: self._initFrame.size.width, height: self._initFrame.size.height});
        self._frame = self._initFrame;
        self._DOMElement.bind("click mousedown",         function(evt)
        {
            evt.stopPropagation();
            evt.preventDefault();
            if (evt.type === "mousedown")
                objj_msgSend(self, "makeKeyAndOrderFront:", nil);
        });
        self._DOMWindowTitleBar = ($("<div></div>")).addClass("cpwindow-titlebar");
        self._DOMWindowTitle = ($("<div></div>")).addClass("cpwindow-title");
        self._DOMWindowCloseBtn = ($("<div></div>")).addClass("cpwindow-titlebar-close");
        self._DOMWindowCloseBtn.attr({tabIndex: 0, role: "button", "aria-label": "window close"});
        self._DOMWindowCloseBtn.bind({mousedown:         function(evt)
        {
            evt.stopPropagation();
            evt.preventDefault();
        }, click:         function(evt)
        {
            evt.stopPropagation();
            evt.preventDefault();
            if (self._isClosable && !self._sheetAttached)
                objj_msgSend(self, "orderOut:", self);
        }, keydown:         function(evt)
        {
            if (evt.which === CPReturnKeyCode && !self._sheetAttached)
                objj_msgSend(self, "orderOut:", self);
        }});
        self._DOMWindowTitleBar.append(self._DOMWindowTitle);
        self._DOMWindowTitleBar.append(self._DOMWindowCloseBtn);
        self._DOMWindowContentDiv = (($("<div></div>")).css({position: "absolute"})).addClass("cpwindow-content");
        self._DOMWindowContentDiv.append(self.contentView._DOMElement);
        self._DOMWindowContentDiv.attr("tabindex", 0);
        self._DOMElement.append(self._DOMWindowContentDiv);
        ($("#CPWindowToolbarAndContent")).append(self._DOMElement);
        objj_msgSend(self, "_adjustContentViewSize");
        objj_msgSend(self.contentView, "setBackgroundColor:", objj_msgSend(CPColor, "colorWithWhite:alpha:", 0.9, 1.0));
        objj_msgSend(self, "setVisible:", NO);
        objj_msgSend(self, "setStyleMask:", self._styleMask);
    }
    objj_msgSend(CPDOMEventDispatcher, "addEventDispatchersForWindow:", self);
    return YES;
}

), new objj_method(sel_getUid("setDelegate:"), function $CPWindow__setDelegate_(self, _cmd, aDelegate)
{
    var defaultCenter = objj_msgSend(CPNotificationCenter, "defaultCenter");
    objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, CPWindowWillCloseNotification, self);
    objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, CPWindowDidResignKeyNotification, self);
    objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, CPWindowDidBecomeKeyNotification, self);
    objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, CPWindowDidMoveNotification, self);
    objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, CPWindowDidResizeNotification, self);
    objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, CPWindowWillBeginSheetNotification, self);
    objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, CPWindowDidEndSheetNotification, self);
    self._delegate = aDelegate;
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("windowWillClose:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("windowWillClose:"), CPWindowWillCloseNotification, self);
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("windowDidResignKey:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("windowDidResignKey:"), CPWindowDidResignKeyNotification, self);
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("windowDidBecomeKey:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("windowDidBecomeKey:"), CPWindowDidBecomeKeyNotification, self);
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("windowDidMove:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("windowDidMove:"), CPWindowDidMoveNotification, self);
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("windowDidResize:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("windowDidResize:"), CPWindowDidResizeNotification, self);
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("windowWillBeginSheet:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("windowWillBeginSheet:"), CPWindowWillBeginSheetNotification, self);
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("windowDidEndSheet:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("windowDidEndSheet:"), CPWindowDidEndSheetNotification, self);
}

), new objj_method(sel_getUid("initWithContentRect:styleMask:"), function $CPWindow__initWithContentRect_styleMask_(self, _cmd, aRect, aStyleMask)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPWindow").super_class }, "init");
    if (self)
    {
        self._styleMask = aStyleMask;
        self._initFrame = objj_msgSend(self, "_frameRectForContentRect:", aRect);
        self.contentView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", aRect);
        objj_msgSend(self.contentView, "_setWindow:", self);
        objj_msgSend(self.contentView, "setNextResponder:", self);
        objj_msgSend(self, "_init");
    }
    return self;
}

), new objj_method(sel_getUid("setContentView:"), function $CPWindow__setContentView_(self, _cmd, aView)
{
    if (aView === self.contentView)
        return;
    if (self.contentView)
        self.contentView._DOMElement.detach();
    self.contentView = aView;
    objj_msgSend(self.contentView, "setNextResponder:", self);
    if (CPApp._mainWindow === self)
    {
        ($("#CPWindowToolbarAndContent")).append(self.contentView._DOMElement);
    }
    else
    {
        if (self.contentView)
            self._DOMWindowContentDiv.append(self.contentView._DOMElement);
    }
    objj_msgSend(self, "_adjustContentViewSize");
}

), new objj_method(sel_getUid("setStyleMask:"), function $CPWindow__setStyleMask_(self, _cmd, styleMask)
{
    self._styleMask = styleMask;
    objj_msgSend(self, "setResizable:", self._styleMask & CPResizableWindowMask);
    objj_msgSend(self, "setClosable:", self._styleMask & CPClosableWindowMask);
    objj_msgSend(self, "setMovable:", !(self._styleMask & CPStaticWindowMask));
    if (self._styleMask & CPHUDBackgroundWindowMask)
    {
        self._DOMElement.addClass("hud");
        self.contentView._DOMElement.css("background", "transparent");
        self.contentView._DOMElement.css("background-color", "none");
    }
    else
    {
        self._DOMElement.removeClass("hud");
        objj_msgSend(self.contentView, "setBackgroundColor:", objj_msgSend(self.contentView, "backgroundColor"));
    }
    if (self._styleMask & CPBorderlessWindowMask)
    {
        self._DOMWindowTitleBar.detach();
        objj_msgSend(self, "setFrame:", objj_msgSend(self, "_frameRectForContentRect:", objj_msgSend(self.contentView, "frame")));
    }
    else
    {
        self._DOMElement.append(self._DOMWindowTitleBar);
        objj_msgSend(self, "setFrame:", objj_msgSend(self, "_frameRectForContentRect:", objj_msgSend(self.contentView, "frame")));
    }
    objj_msgSend(self, "_adjustContentViewSize");
}

), new objj_method(sel_getUid("setMinSize:"), function $CPWindow__setMinSize_(self, _cmd, aSize)
{
    self._minSize = CPMakeSize(aSize.width, aSize.height + objj_msgSend(self, "titleBarHeight"));
    objj_msgSend(self, "setResizable:", objj_msgSend(self, "isResizable"));
}

), new objj_method(sel_getUid("setMaxSize:"), function $CPWindow__setMaxSize_(self, _cmd, aSize)
{
    self._maxSize = CPMakeSize(aSize.width, aSize.height + objj_msgSend(self, "titleBarHeight"));
    objj_msgSend(self, "setResizable:", objj_msgSend(self, "isResizable"));
}

), new objj_method(sel_getUid("setVisible:"), function $CPWindow__setVisible_(self, _cmd, visible)
{
    if (visible == self._isVisible)
        return;
    self._isVisible = visible;
    if (self._isVisible)
    {
        self._DOMElement.show();
    }
    else
    {
        self._DOMElement.hide();
    }
}

), new objj_method(sel_getUid("setClosable:"), function $CPWindow__setClosable_(self, _cmd, closable)
{
    self._isClosable = closable;
    if (self._DOMWindowCloseBtn)
    {
        if (self._isClosable)
            self._DOMWindowCloseBtn.show();
        else
            self._DOMWindowCloseBtn.hide();
    }
}

), new objj_method(sel_getUid("setResizable:"), function $CPWindow__setResizable_(self, _cmd, isResizable)
{
    self._isResizable = isResizable;
    self._DOMElement.resizable();
    if (self._isResizable)
    {
        self._DOMElement.resizable({maxHeight: self._maxSize.height, minHeight: self._minSize.height, maxWidth: self._maxSize.width, minWidth: self._minSize.width, resize:         function()
        {
            objj_msgSend(self, "setFrameSize:", CGSizeMake(self._DOMElement.width(), self._DOMElement.height()));
            _CPWindowIsResizing = YES;
        }, stop:         function()
        {
            objj_msgSend(self, "setFrameSize:", CGSizeMake(self._DOMElement.width(), self._DOMElement.height()));
            objj_msgSend(self._toolbar, "layout");
            objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
            _CPWindowIsResizing = NO;
        }});
    }
    else
    {
        self._DOMElement.resizable("destroy");
    }
}

), new objj_method(sel_getUid("setMovable:"), function $CPWindow__setMovable_(self, _cmd, movable)
{
    self._isMovable = movable;
    self._DOMElement.draggable();
    if (self._isMovable)
    {
        self._DOMElement.draggable({containment: "parent", handle: self._DOMWindowTitle, drag:         function()
        {
            var offset = self._DOMElement.offset();
            objj_msgSend(self, "setFrameOrigin:", CGPointMake(offset.left, offset.top));
            _CPWindowIsMoving = YES;
        }, stop:         function()
        {
            var offset = self._DOMElement.offset();
            objj_msgSend(self, "setFrameOrigin:", CGPointMake(offset.left, offset.top));
            _CPWindowIsMoving = NO;
        }});
    }
    else
    {
        self._DOMElement.draggable("destroy");
    }
}

), new objj_method(sel_getUid("initialFirstResponder"), function $CPWindow__initialFirstResponder(self, _cmd)
{
    return self._initialFirstResponder;
}

), new objj_method(sel_getUid("setInitialFirstResponder:"), function $CPWindow__setInitialFirstResponder_(self, _cmd, aView)
{
    self._initialFirstResponder = aView;
}

), new objj_method(sel_getUid("makeFirstResponder:"), function $CPWindow__makeFirstResponder_(self, _cmd, aResponder)
{
    if (self._firstResponder === aResponder)
        return YES;
    if (!objj_msgSend(self._firstResponder, "resignFirstResponder"))
        return NO;
    if (!aResponder || !objj_msgSend(aResponder, "acceptsFirstResponder") || !objj_msgSend(aResponder, "becomeFirstResponder"))
    {
        self._firstResponder = self;
        return NO;
    }
    self._firstResponder = aResponder;
    return YES;
}

), new objj_method(sel_getUid("setToolbar:"), function $CPWindow__setToolbar_(self, _cmd, aToolbar)
{
    if (self._toolbar === aToolbar)
        return;
    objj_msgSend(objj_msgSend(aToolbar, "window"), "setToolbar:", nil);
    objj_msgSend(self._toolbar, "setWindow:", nil);
    self._toolbar = aToolbar;
    objj_msgSend(self._toolbar, "setWindow:", self);
    objj_msgSend(self, "_noteToolbarChanged");
}

), new objj_method(sel_getUid("_noteToolbarChanged"), function $CPWindow___noteToolbarChanged(self, _cmd)
{
    var toolbar = objj_msgSend(self, "toolbar");
    if (toolbar !== nil)
    {
        if (self === CPApp._mainWindow)
            ($("#CPWindowToolbarAndContent")).append(toolbar._itemsView._DOMElement);
        else
        {
            self._DOMWindowContentDiv.append(toolbar._itemsView._DOMElement);
            if (self._DOMWindowTitleBar)
                self._DOMWindowTitleBar.addClass("unified");
        }
        objj_msgSend(self, "_adjustContentViewSize");
        objj_msgSend(toolbar, "layout");
    }
    else
    {
        if (self._DOMWindowTitleBar)
            self._DOMWindowTitleBar.removeClass("unified");
    }
}

), new objj_method(sel_getUid("toggleToolbarShown:"), function $CPWindow__toggleToolbarShown_(self, _cmd, aSender)
{
    var toolbar = objj_msgSend(self, "toolbar");
    objj_msgSend(toolbar, "setVisible:", !objj_msgSend(toolbar, "isVisible"));
    objj_msgSend(self, "_adjustContentViewSize");
}

), new objj_method(sel_getUid("_frameRectForContentRect:"), function $CPWindow___frameRectForContentRect_(self, _cmd, aContentRect)
{
    var frameRect = CGRectMakeCopy(aContentRect),
        titleBarHeight = objj_msgSend(self, "titleBarHeight");
    var toolBarHeight = 0;
    if (self._toolbar && objj_msgSend(self._toolbar, "isVisible"))
    {
        toolBarHeight = objj_msgSend(self._toolbar, "height");
    }
    frameRect.origin.y = Math.max(0, frameRect.origin.y - (titleBarHeight + toolBarHeight));
    frameRect.size.height += titleBarHeight + toolBarHeight;
    return frameRect;
}

), new objj_method(sel_getUid("_contentRectForFrameRect:"), function $CPWindow___contentRectForFrameRect_(self, _cmd, aFrame)
{
    var toolBarHeight = 0;
    if (self._toolbar && objj_msgSend(self._toolbar, "isVisible"))
        toolBarHeight = objj_msgSend(self._toolbar, "height");
    var h = aFrame.size.height - toolBarHeight - objj_msgSend(self, "titleBarHeight");
    return CGRectMake(0, toolBarHeight, aFrame.size.width, h);
}

), new objj_method(sel_getUid("titleBarHeight"), function $CPWindow__titleBarHeight(self, _cmd)
{
    if (self === CPApp._mainWindow || self._styleMask & CPBorderlessWindowMask)
    {
        return 0;
    }
    return 27.0;
}

), new objj_method(sel_getUid("_adjustContentViewSize"), function $CPWindow___adjustContentViewSize(self, _cmd)
{
    if (self === CPApp._mainWindow)
    {
        var menuBarHeight = 0;
        var toolBarHeight = -1;
        if (self._toolbar && objj_msgSend(self._toolbar, "isVisible"))
        {
            toolBarHeight = objj_msgSend(self._toolbar, "height");
        }
        if (objj_msgSend(CPMenu, "menuBarVisible"))
            menuBarHeight = objj_msgSend(CPMenu, "menuBarHeight");
        var sz = __CPBrowserSize();
        ($("#CPWindowToolbarAndContent")).css({"position": "absolute", "top": menuBarHeight, "left": 0, "width": sz.width, "height": sz.height - menuBarHeight});
        var w = sz.width;
        var h = sz.height - toolBarHeight - menuBarHeight;
        objj_msgSend(self.contentView, "setFrame:", CPMakeRect(0, toolBarHeight, w, h));
        if (self._toolbar)
            objj_msgSend(self._toolbar._itemsView, "setFrame:", CPMakeRect(0, 0, w, toolBarHeight));
    }
    else
    {
        if (self._toolbar)
            objj_msgSend(self._toolbar._itemsView, "setFrame:", CPMakeRect(0, 0, self._frame.size.width, objj_msgSend(self._toolbar, "height")));
        self._DOMWindowContentDiv.css({top: objj_msgSend(self, "titleBarHeight"), left: 0, width: self._frame.size.width, height: self._frame.size.height - objj_msgSend(self, "titleBarHeight")});
        objj_msgSend(self.contentView, "setFrame:", objj_msgSend(self, "_contentRectForFrameRect:", self._frame));
    }
}

), new objj_method(sel_getUid("setFrameSize:"), function $CPWindow__setFrameSize_(self, _cmd, aSize)
{
    if (self._DOMElement)
    {
        self._DOMElement.css({width: aSize.width, height: aSize.height});
        self._frame.size = CGSizeCreateCopy(aSize);
        objj_msgSend(self, "_adjustContentViewSize");
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPWindowDidResizeNotification, self);
    }
}

), new objj_method(sel_getUid("setFrameOrigin:"), function $CPWindow__setFrameOrigin_(self, _cmd, aPoint)
{
    if (self._DOMElement)
    {
        self._DOMElement.css({"top": aPoint.y - objj_msgSend(self, "titleBarHeight") - 1, "left": aPoint.x});
        self._frame.origin = CGPointCreateCopy(aPoint);
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPWindowDidMoveNotification, self);
    }
}

), new objj_method(sel_getUid("setFrame:"), function $CPWindow__setFrame_(self, _cmd, aFrame)
{
    objj_msgSend(self, "setFrameSize:", aFrame.size);
    objj_msgSend(self, "setFrameOrigin:", aFrame.origin);
}

), new objj_method(sel_getUid("frame"), function $CPWindow__frame(self, _cmd)
{
    if (self === CPApp._mainWindow)
    {
        var sz = __CPBrowserSize();
        return CGRectMake(0, 0, sz.width, sz.height);
    }
    if (self._DOMElement)
        return CGRectCreateCopy(self._frame);
    return CGRectMakeZero();
}

), new objj_method(sel_getUid("center"), function $CPWindow__center(self, _cmd)
{
    var f = objj_msgSend(self, "frame");
    objj_msgSend(self, "setFrameOrigin:", CPMakePoint((($(window)).width() - f.size.width) / 2.0, (($(window)).height() - f.size.height) / 2.0 - 50));
}

), new objj_method(sel_getUid("setTitle:"), function $CPWindow__setTitle_(self, _cmd, title)
{
    self._title = title;
    if (self._title)
    {
        self._DOMWindowTitle.text(self._title);
    }
}

), new objj_method(sel_getUid("setAlphaValue:"), function $CPWindow__setAlphaValue_(self, _cmd, alphaValue)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPWindow").super_class }, "setAlphaValue:", alphaValue);
    objj_msgSend(self.contentView, "setAlphaValue:", alphaValue);
}

), new objj_method(sel_getUid("orderFront:"), function $CPWindow__orderFront_(self, _cmd, aSender)
{
    if (self === CPApp._mainWindow)
    {
        if (!document.getElementById("rootView"))
            ($('#CPWindowToolbarAndContent')).append(self.contentView._DOMElement);
        return;
    }
    var appWindows = objj_msgSend(CPApp, "windows");
    for (var aWindowNumber in appWindows)
    {
        var aWindow = appWindows[aWindowNumber];
        if (aWindow._DOMElement)
            aWindow._DOMElement.css("zIndex", 999);
    }
    self._DOMElement.css("zIndex", 1000);
    if (self._isModal)
        ($('#CPWindowToolbarAndContent')).append(self._DOMWindowModalOverlay);
    objj_msgSend(self, "setVisible:", YES);
    objj_msgSend(self._toolbar, "layout");
}

), new objj_method(sel_getUid("isKeyWindow"), function $CPWindow__isKeyWindow(self, _cmd)
{
    return CPApp._keyWindow === self;
}

), new objj_method(sel_getUid("becomeKeyWindow"), function $CPWindow__becomeKeyWindow(self, _cmd)
{
    if (!objj_msgSend(self, "isKeyWindow"))
    {
        CPApp._keyWindow = self;
        objj_msgSend(self._firstResponder, "becomeFirstResponder");
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPWindowDidBecomeKeyNotification, self);
    }
    if (!objj_msgSend(self._firstResponder, "swallowsKey"))
        objj_msgSend(CPDOMEventDispatcher, "DOMFocusKeyWindow:", YES);
}

), new objj_method(sel_getUid("canBecomeKeyWindow"), function $CPWindow__canBecomeKeyWindow(self, _cmd)
{
    return YES;
}

), new objj_method(sel_getUid("isKeyWindow"), function $CPWindow__isKeyWindow(self, _cmd)
{
    return objj_msgSend(CPApp, "keyWindow") == self;
}

), new objj_method(sel_getUid("makeKeyAndOrderFront:"), function $CPWindow__makeKeyAndOrderFront_(self, _cmd, aSender)
{
    objj_msgSend(self, "orderFront:", self);
    objj_msgSend(self, "makeKeyWindow");
}

), new objj_method(sel_getUid("makeKeyWindow"), function $CPWindow__makeKeyWindow(self, _cmd)
{
    if (CPApp._keyWindow !== self)
        objj_msgSend(objj_msgSend(CPApp, "keyWindow"), "resignKeyWindow");
    objj_msgSend(self, "becomeKeyWindow");
}

), new objj_method(sel_getUid("resignKeyWindow"), function $CPWindow__resignKeyWindow(self, _cmd)
{
    if (CPApp._keyWindow === self)
    {
        objj_msgSend(self._firstResponder, "resignFirstResponder");
        objj_msgSend(CPDOMEventDispatcher, "DOMFocusKeyWindow:", NO);
        CPApp._keyWindow = nil;
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPWindowDidResignKeyNotification, self);
    }
}

), new objj_method(sel_getUid("mouseDown:"), function $CPWindow__mouseDown_(self, _cmd, theEvent)
{
    objj_msgSend(self, "makeKeyAndOrderFront:", nil);
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPWindow").super_class }, "mouseDown:", theEvent);
}

), new objj_method(sel_getUid("mouseUp:"), function $CPWindow__mouseUp_(self, _cmd, theEvent)
{
    objj_msgSend(self, "makeKeyWindow");
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPWindow").super_class }, "mouseUp:", theEvent);
}

), new objj_method(sel_getUid("orderOut:"), function $CPWindow__orderOut_(self, _cmd, aSender)
{
    if (self === CPApp._mainWindow)
    {
        return;
    }
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPWindowWillCloseNotification, self);
    if (self._DOMWindowModalOverlay)
        self._DOMWindowModalOverlay.detach();
    if (_toolbarOverlay)
        _toolbarOverlay.detach();
    objj_msgSend(self, "setVisible:", NO);
    if (CPApp._keyWindow === self)
        objj_msgSend(CPApp._mainWindow, "makeKeyWindow");
}

), new objj_method(sel_getUid("_attachSheet:modalDelegate:didEndSelector:contextInfo:"), function $CPWindow___attachSheet_modalDelegate_didEndSelector_contextInfo_(self, _cmd, aSheet, modalDelegate, aSelector, contextInfo)
{
    if (!self._sheetAttached)
    {
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPWindowWillBeginSheetNotification, self);
        aSheet._sheetContext = {};
        aSheet._sheetContext.initStyleMask = objj_msgSend(aSheet, "styleMask");
        aSheet._sheetContext.didEndSelector = aSelector;
        aSheet._sheetContext.modalDelegate = modalDelegate;
        aSheet._sheetContext.contextInfo = contextInfo;
        aSheet._sheetContext.window = self;
        aSheet._isSheet = YES;
        self._sheet = aSheet;
        self._sheetAttached = YES;
        objj_msgSend(aSheet, "setStyleMask:", CPBorderlessWindowMask | CPStaticWindowMask);
        aSheet._DOMElement.detach();
        aSheet._DOMElement.appendTo(self.contentView._DOMElement);
        var frame = objj_msgSend(self, "frame"),
            sframe = objj_msgSend(aSheet, "frame");
        var cv = objj_msgSend(aSheet, "contentView");
        objj_msgSend(aSheet, "setFrameOrigin:", CGPointMake((frame.size.width - sframe.size.width) / 2, -sframe.size.height));
        objj_msgSend(aSheet, "orderFront:", nil);
        self.contentView._DOMElement.append(aSheet._DOMWindowModalOverlay);
        if (self._toolbar)
            aSheet._toolbarOverlay = ($("<div></div>")).addClass("cpmodal-overlay");
        if (aSheet._toolbarOverlay)
            self._toolbar._itemsView._DOMElement.append(aSheet._toolbarOverlay);
        cv._DOMElement.addClass("cpwindow-sheet");
        cv._DOMElement.append(($("<div></div>")).addClass("cpwindow-sheet-topshadow"));
        aSheet._DOMElement.animate({top: 0}, 250,         function()
        {
            objj_msgSend(aSheet, "setFrameOrigin:", CGPointMake((frame.size.width - sframe.size.width) / 2, 0));
            aSheet._isVisible = YES;
            if (self._DOMElement)
                self._DOMElement.css("overflow", "visible");
            if (self._DOMWindowContentDiv)
                self._DOMWindowContentDiv.css("overflow", "visible");
            self.contentView._DOMElement.css("overflow", "visible");
            objj_msgSend(aSheet, "makeKeyWindow");
        });
    }
}

), new objj_method(sel_getUid("_detachSheet"), function $CPWindow___detachSheet(self, _cmd)
{
    if (self._sheetContext && self._sheetContext.window)
    {
        self._sheetContext.window.contentView._DOMElement.css("overflow", "hidden");
        if (self._sheetContext.window._DOMWindowContentDiv)
            self._sheetContext.window._DOMWindowContentDiv.css("overflow", "hidden");
        if (self._sheetContext.window._DOMElement)
            self._sheetContext.window._DOMElement.css("overflow", "hidden");
        var cvframe = objj_msgSend(self.contentView, "frame");
        self._DOMElement.animate({top: -cvframe.size.height}, 250,         function()
        {
            objj_msgSend(self, "setFrameOrigin:", CGPointMake(0, -cvframe.size.height));
            objj_msgSend(self, "orderOut:", nil);
            objj_msgSend(self, "setStyleMask:", self._sheetContext.initStyleMask);
            (self.contentView._DOMElement.children(".cpwindow-sheet-topshadow")).detach();
            self._DOMElement.detach();
            ($("#CPWindowToolbarAndContent")).append(self._DOMElement);
            self._sheetContext.window._sheetAttached = NO;
            self._sheetContext.window._sheet = nil;
            self._isSheet = NO;
            var target = self._sheetContext.modalDelegate;
            var action = self._sheetContext.didEndSelector;
            var returnCode = self._sheetContext.returnCode;
            var contextInfo = self._sheetContext.contextInfo;
            objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPWindowDidEndSheetNotification, self._sheetContext.window);
            if (action)
                objj_msgSend(target, "performSelector:withObjects:", action, self, returnCode, contextInfo);
            objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
            self._sheetContext = null;
        });
        CPApp._keyWindow = CPApp._mainWindow;
    }
}

), new objj_method(sel_getUid("hitTest:"), function $CPWindow__hitTest_(self, _cmd, aPoint)
{
    var view = objj_msgSend(self.contentView, "hitTest:", aPoint);
    if (!view && self._toolbar)
        view = objj_msgSend(self._toolbar._itemsView, "hitTest:", aPoint);
    return view;
}

), new objj_method(sel_getUid("_dirtyKeyViewLoop"), function $CPWindow___dirtyKeyViewLoop(self, _cmd)
{
    if (self._autorecalculatesKeyViewLoop)
        self._keyViewLoopIsDirty = YES;
}

), new objj_method(sel_getUid("_hasKeyViewLoop:"), function $CPWindow___hasKeyViewLoop_(self, _cmd, theViews)
{
    var i,
        count = objj_msgSend(theViews, "count");
    for (i = 0; i < count; ++i)
    {
        var view = theViews[i];
        if (objj_msgSend(view, "nextKeyView") || objj_msgSend(view, "previousKeyView"))
            return YES;
    }
    for (i = 0; i < count; ++i)
    {
        var subviews = objj_msgSend(theViews[i], "subviews");
        if (objj_msgSend(subviews, "count") && objj_msgSend(self, "_hasKeyViewLoop:", subviews))
            return YES;
    }
    return NO;
}

), new objj_method(sel_getUid("recalculateKeyViewLoop"), function $CPWindow__recalculateKeyViewLoop(self, _cmd)
{
    objj_msgSend(self, "_doRecalculateKeyViewLoop");
}

), new objj_method(sel_getUid("_viewsSortedByPosition"), function $CPWindow___viewsSortedByPosition(self, _cmd)
{
    var views = objj_msgSend(CPArray, "arrayWithObject:", self.contentView);
    views = views.concat(objj_msgSend(self, "_subviewsSortedByPosition:", objj_msgSend(self.contentView, "subviews")));
    if (self._toolbar)
    {
        views = views.concat(objj_msgSend(self, "_subviewsSortedByPosition:", objj_msgSend(self._toolbar._itemsView, "subviews")));
    }
    return views;
}

), new objj_method(sel_getUid("_subviewsSortedByPosition:"), function $CPWindow___subviewsSortedByPosition_(self, _cmd, theSubviews)
{
    theSubviews = objj_msgSend(theSubviews, "copy");
    objj_msgSend(theSubviews, "sortUsingFunction:context:", keyViewComparator, nil);
    var sortedViews = [];
    for (var i = 0, count = objj_msgSend(theSubviews, "count"); i < count; ++i)
    {
        var view = theSubviews[i],
            subviews = objj_msgSend(view, "subviews");
        sortedViews.push(view);
        if (objj_msgSend(subviews, "count"))
            sortedViews = sortedViews.concat(objj_msgSend(self, "_subviewsSortedByPosition:", subviews));
    }
    return sortedViews;
}

), new objj_method(sel_getUid("_doRecalculateKeyViewLoop"), function $CPWindow___doRecalculateKeyViewLoop(self, _cmd)
{
    var views = objj_msgSend(self, "_viewsSortedByPosition");
    for (var index = 0, count = objj_msgSend(views, "count"); index < count; ++index)
        objj_msgSend(views[index], "setNextKeyView:", views[(index + 1) % count]);
    self._keyViewLoopIsDirty = NO;
}

), new objj_method(sel_getUid("setAutorecalculatesKeyViewLoop:"), function $CPWindow__setAutorecalculatesKeyViewLoop_(self, _cmd, shouldRecalculate)
{
    if (self._autorecalculatesKeyViewLoop === shouldRecalculate)
        return;
    self._autorecalculatesKeyViewLoop = shouldRecalculate;
}

), new objj_method(sel_getUid("autorecalculatesKeyViewLoop"), function $CPWindow__autorecalculatesKeyViewLoop(self, _cmd)
{
    return self._autorecalculatesKeyViewLoop;
}

), new objj_method(sel_getUid("selectNextKeyView:"), function $CPWindow__selectNextKeyView_(self, _cmd, sender)
{
    if (self._keyViewLoopIsDirty)
        objj_msgSend(self, "_doRecalculateKeyViewLoop");
    var nextValidKeyView = nil;
    if (objj_msgSend(self._firstResponder, "isKindOfClass:", objj_msgSend(CPView, "class")))
        nextValidKeyView = objj_msgSend(self._firstResponder, "nextValidKeyView");
    if (nextValidKeyView)
        objj_msgSend(self, "makeFirstResponder:", nextValidKeyView);
}

), new objj_method(sel_getUid("selectPreviousKeyView:"), function $CPWindow__selectPreviousKeyView_(self, _cmd, sender)
{
    if (self._keyViewLoopIsDirty)
        objj_msgSend(self, "_doRecalculateKeyViewLoop");
    var previousValidKeyView = nil;
    if (objj_msgSend(self._firstResponder, "isKindOfClass:", objj_msgSend(CPView, "class")))
        previousValidKeyView = objj_msgSend(self._firstResponder, "previousValidKeyView");
    if (!previousValidKeyView)
    {
        if (objj_msgSend(self._initialFirstResponder, "acceptsFirstResponder"))
            previousValidKeyView = self._initialFirstResponder;
        else
            previousValidKeyView = objj_msgSend(self._initialFirstResponder, "previousValidKeyView");
    }
    if (previousValidKeyView)
        objj_msgSend(self, "makeFirstResponder:", previousValidKeyView);
}

), new objj_method(sel_getUid("selectKeyViewFollowingView:"), function $CPWindow__selectKeyViewFollowingView_(self, _cmd, aView)
{
    if (self._keyViewLoopIsDirty)
        objj_msgSend(self, "_doRecalculateKeyViewLoop");
    var nextValidKeyView = objj_msgSend(aView, "nextValidKeyView");
    if (objj_msgSend(nextValidKeyView, "isKindOfClass:", objj_msgSend(CPView, "class")))
        objj_msgSend(self, "makeFirstResponder:", nextValidKeyView);
}

), new objj_method(sel_getUid("selectKeyViewPrecedingView:"), function $CPWindow__selectKeyViewPrecedingView_(self, _cmd, aView)
{
    if (self._keyViewLoopIsDirty)
        objj_msgSend(self, "_doRecalculateKeyViewLoop");
    var previousValidKeyView = objj_msgSend(aView, "previousValidKeyView");
    if (objj_msgSend(previousValidKeyView, "isKindOfClass:", objj_msgSend(CPView, "class")))
        objj_msgSend(self, "makeFirstResponder:", previousValidKeyView);
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("initialize"), function $CPWindow__initialize(self, _cmd)
{
    CPWindowDOMElementPrototype = ($("<div></div>")).addClass("cpwindow");
    CPWindowDOMElementPrototype.css({position: "absolute", zIndex: 10000});
}

)]);
}var CPWindowContentViewKey = "CPWindowContentViewKey",
    CPWindowTitleKey = "CPWindowTitleKey",
    CPWindowStyleMaskKey = "CPWindowStyleMaskKey",
    CPWindowMinSizeKey = "CPWindowMinSizeKey",
    CPWindowMaxSizeKey = "CPWindowMaxSizeKey",
    CPWindowInitFrameKey = "CPWindowInitFrameKey";
{
var the_class = objj_getClass("CPWindow")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPWindow\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPWindow__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPWindow").super_class }, "init");
    if (self)
    {
        self._initFrame = objj_msgSend(aCoder, "decodeRectForKey:", CPWindowInitFrameKey);
        self.contentView = objj_msgSend(aCoder, "decodeObjectForKey:", CPWindowContentViewKey);
        objj_msgSend(self.contentView, "_setWindow:", self);
        objj_msgSend(self.contentView, "setNextResponder:", self);
        objj_msgSend(self, "_init");
        self._minSize = objj_msgSend(aCoder, "decodeSizeForKey:", CPWindowMinSizeKey);
        self._maxSize = objj_msgSend(aCoder, "decodeSizeForKey:", CPWindowMaxSizeKey);
        objj_msgSend(self, "setTitle:", objj_msgSend(aCoder, "decodeObjectForKey:", CPWindowTitleKey));
        objj_msgSend(self, "setStyleMask:", objj_msgSend(aCoder, "decodeIntForKey:", CPWindowStyleMaskKey));
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPWindow__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPWindow").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", self.contentView, CPWindowContentViewKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._title, CPWindowTitleKey);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._styleMask, CPWindowStyleMaskKey);
    objj_msgSend(aCoder, "encodeSize:forKey:", self._minSize, CPWindowMinSizeKey);
    objj_msgSend(aCoder, "encodeSize:forKey:", self._maxSize, CPWindowMaxSizeKey);
    objj_msgSend(aCoder, "encodeRect:forKey:", self._initFrame, CPWindowInitFrameKey);
}

)]);
}var keyViewComparator = function(lhs, rhs, context)
{
    var lhsBounds = objj_msgSend(lhs, "convertRect:toView:", objj_msgSend(lhs, "bounds"), nil),
        rhsBounds = objj_msgSend(rhs, "convertRect:toView:", objj_msgSend(rhs, "bounds"), nil),
        lhsY = CGRectGetMinY(lhsBounds),
        rhsY = CGRectGetMinY(rhsBounds),
        lhsX = CGRectGetMinX(lhsBounds),
        rhsX = CGRectGetMinX(rhsBounds),
        intersectsVertically = MIN(CGRectGetMaxY(lhsBounds), CGRectGetMaxY(rhsBounds)) - MAX(lhsY, rhsY);
    if (intersectsVertically > 0)
    {
        if (lhsX < rhsX)
            return CPOrderedAscending;
        if (lhsX === rhsX)
            return CPOrderedSame;
        return CPOrderedDescending;
    }    if (lhsY < rhsY)
        return CPOrderedAscending;
    if (lhsY === rhsY)
        return CPOrderedSame;
    return CPOrderedDescending;
};
kCGColorSpaceModelUnknown = -1;
kCGColorSpaceModelMonochrome = 0;
kCGColorSpaceModelRGB = 1;
kCGColorSpaceModelCMYK = 2;
kCGColorSpaceModelLab = 3;
kCGColorSpaceModelDeviceN = 4;
kCGColorSpaceModelIndexed = 5;
kCGColorSpaceModelPattern = 6;
kCGColorSpaceGenericGray = "CGColorSpaceGenericGray";
kCGColorSpaceGenericRGB = "CGColorSpaceGenericRGB";
kCGColorSpaceGenericCMYK = "CGColorSpaceGenericCMYK";
kCGColorSpaceGenericRGBLinear = "CGColorSpaceGenericRGBLinear";
kCGColorSpaceGenericRGBHDR = "CGColorSpaceGenericRGBHDR";
kCGColorSpaceAdobeRGB1998 = "CGColorSpaceAdobeRGB1998";
kCGColorSpaceSRGB = "CGColorSpaceSRGB";
var _CGNamedColorSpaces = {};
function CGColorSpaceCreateCalibratedGray(aWhitePoint, aBlackPoint, gamma)
{
    return {model: kCGColorSpaceModelMonochrome, count: 1, base: NULL};
}
function CGColorSpaceCreateCalibratedRGB(aWhitePoint, aBlackPoint, gamma)
{
    return {model: kCGColorSpaceModelRGB, count: 1, base: NULL};
}
function CGColorSpaceCreateICCBased(aComponentCount, range, profile, alternate)
{
    return NULL;
}
function CGColorSpaceCreateLab(aWhitePoint, aBlackPoint, aRange)
{
    return NULL;
}
function CGColorSpaceCreateDeviceCMYK()
{
    return CGColorSpaceCreateWithName(kCGColorSpaceGenericCMYK);
}
function CGColorSpaceCreateDeviceGray()
{
    return CGColorSpaceCreateWithName(kCGColorSpaceGenericGray);
}
function CGColorSpaceCreateDeviceRGB()
{
    return CGColorSpaceCreateWithName(kCGColorSpaceGenericRGB);
}
function CGColorSpaceCreateWithPlatformColorSpace()
{
    return NULL;
}
function CGColorSpaceCreateIndexed(aBaseColorSpace, lastIndex, colorTable)
{
    return NULL;
}
function CGColorSpaceCreatePattern(aBaseColorSpace)
{
    if (aBaseColorSpace)
        return {model: kCGColorSpaceModelPattern, count: aBaseColorSpace.count, base: aBaseColorSpace};
    return {model: kCGColorSpaceModelPattern, count: 0, base: NULL};
}
function CGColorSpaceCreateWithName(aName)
{
    var colorSpace = _CGNamedColorSpaces[aName];
    if (colorSpace)
        return colorSpace;
    switch(aName) {
        case kCGColorSpaceGenericGray:
            return _CGNamedColorSpaces[aName] = {model: kCGColorSpaceModelMonochrome, count: 1, base: NULL};
        case kCGColorSpaceGenericRGB:
            return _CGNamedColorSpaces[aName] = {model: kCGColorSpaceModelRGB, count: 3, base: NULL};
        case kCGColorSpaceGenericCMYK:
            return _CGNamedColorSpaces[aName] = {model: kCGColorSpaceModelCMYK, count: 4, base: NULL};
        case kCGColorSpaceGenericRGBLinear:
            return _CGNamedColorSpaces[aName] = {model: kCGColorSpaceModelRGB, count: 3, base: NULL};
        case kCGColorSpaceGenericRGBHDR:
            return _CGNamedColorSpaces[aName] = {model: kCGColorSpaceModelRGB, count: 3, base: NULL};
        case kCGColorSpaceAdobeRGB1998:
            return _CGNamedColorSpaces[aName] = {model: kCGColorSpaceModelRGB, count: 3, base: NULL};
        case kCGColorSpaceSRGB:
            return _CGNamedColorSpaces[aName] = {model: kCGColorSpaceModelRGB, count: 3, base: NULL};
    }
    return NULL;
}
function CGColorSpaceCopyICCProfile(aColorSpace)
{
    return NULL;
}
function CGColorSpaceGetNumberOfComponents(aColorSpace)
{
    return aColorSpace.count;
}
function CGColorSpaceGetTypeID(aColorSpace)
{
}
function CGColorSpaceGetModel(aColorSpace)
{
    return aColorSpace.model;
}
function CGColorSpaceGetBaseColorSpace(aColorSpace)
{
}
function CGColorSpaceGetColorTableCount(aColorSpace)
{
}
function CGColorSpaceGetColorTable(aColorSpace)
{
}
function CGColorSpaceRelease(aColorSpace)
{
}
function CGColorSpaceRetain(aColorSpace)
{
    return aColorSpace;
}
function CGColorSpaceStandardizeComponents(aColorSpace, components)
{
    var count = aColorSpace.count;
{
    if (count > components.length)
    {
        components[count] = 1;
        return;
    }
    var component = components[count];
    if (component < 0)
        components[count] = 0;
    else if (component > 1)
        components[count] = 1;
    else
        components[count] = ROUND(component * 1000) / 1000;
}
    if (aColorSpace.base)
        aColorSpace = aColorSpace.base;
    switch(aColorSpace.model) {
        case kCGColorSpaceModelMonochrome:
        case kCGColorSpaceModelRGB:
        case kCGColorSpaceModelCMYK:
        case kCGColorSpaceModelDeviceN:
            while (count--)
            {
                if (count > components.length)
                {
                    components[count] = 1;
                    return;
                }
                var component = components[count];
                if (component < 0)
                    components[count] = 0;
                else if (component > 1)
                    components[count] = 1;
                else
                    components[count] = ROUND(component * 255) / 255;
            }
            break;
        case kCGColorSpaceModelIndexed:
        case kCGColorSpaceModelLab:
        case kCGColorSpaceModelPattern:
            break;
    }
}
var CFTypeGlobalCount = 0;
function CFHashCode(aCFObject)
{
    if (!aCFObject.hash)
        aCFObject.hash = ++CFTypeGlobalCount;
    return aCFObject;
}
kCGColorWhite = "kCGColorWhite";
kCGColorBlack = "kCGColorBlack";
kCGColorClear = "kCGColorClear";
var _CGColorMap = {};
function CGColorCreate(aColorSpace, components)
{
    if (!aColorSpace || !components)
        return NULL;
    var components = components.slice();
    CGColorSpaceStandardizeComponents(aColorSpace, components);
    var UID = CFHashCode(aColorSpace) + components.join("");
    if (_CGColorMap[UID])
        return _CGColorMap[UID];
    return _CGColorMap[UID] = {colorspace: aColorSpace, pattern: NULL, components: components};
}
function CGColorCreateCopy(aColor)
{
    return aColor;
}
function CGColorCreateGenericGray(gray, alpha)
{
    return CGColorCreate(CGColorSpaceCreateDeviceRGB(), [gray, gray, gray, alpha]);
}
function CGColorCreateGenericRGB(red, green, blue, alpha)
{
    return CGColorCreate(CGColorSpaceCreateDeviceRGB(), [red, green, blue, alpha]);
}
function CGColorCreateGenericCMYK(cyan, magenta, yellow, black, alpha)
{
    return CGColorCreate(CGColorSpaceCreateDeviceCMYK(), [cyan, magenta, yellow, black, alpha]);
}
function CGColorCreateCopyWithAlpha(aColor, anAlpha)
{
    if (!aColor)
        return aColor;
    var components = aColor.components.slice();
    if (anAlpha == components[components.length - 1])
        return aColor;
    components[components.length - 1] = anAlpha;
    if (aColor.pattern)
        return CGColorCreateWithPattern(aColor.colorspace, aColor.pattern, components);
    else
        return CGColorCreate(aColor.colorspace, components);
}
function CGColorCreateWithPattern(aColorSpace, aPattern, components)
{
    if (!aColorSpace || !aPattern || !components)
        return NULL;
    return {colorspace: aColorSpace, pattern: aPattern, components: components.slice()};
}
function CGColorEqualToColor(lhs, rhs)
{
    if (lhs == rhs)
        return true;
    if (!lhs || !rhs)
        return false;
    var lhsComponents = lhs.components,
        rhsComponents = rhs.components,
        lhsComponentCount = lhsComponents.length;
    if (lhsComponentCount != rhsComponents.length)
        return false;
    while (lhsComponentCount--)
        if (lhsComponents[lhsComponentCount] != rhsComponents[lhsComponentCount])
            return false;
    if (lhs.pattern != rhs.pattern)
        return false;
    if (CGColorSpaceEqualToColorSpace(lhs.colorspace, rhs.colorspace))
        return false;
    return true;
}
function CGColorGetAlpha(aColor)
{
    var components = aColor.components;
    return components[components.length - 1];
}
function CGColorGetColorSpace(aColor)
{
    return aColor.colorspace;
}
function CGColorGetComponents(aColor)
{
    return aColor.components;
}
function CGColorGetNumberOfComponents(aColor)
{
    return aColor.components.length;
}
function CGColorGetPattern(aColor)
{
    return aColor.pattern;
}
CPColorPatternIsVertical = YES;
CPColorPatternIsHorizontal = NO;
var _redComponent = 0,
    _greenComponent = 1,
    _blueComponent = 2,
    _alphaCompnent = 3;
var _hueComponent = 0,
    _saturationComponent = 1,
    _brightnessComponent = 2;
var cachedBlackColor,
    cachedRedColor,
    cachedGreenColor,
    cachedBlueColor,
    cachedYellowColor,
    cachedGrayColor,
    cachedLightGrayColor,
    cachedDarkGrayColor,
    cachedWhiteColor,
    cachedBrownColor,
    cachedCyanColor,
    cachedMagentaColor,
    cachedOrangeColor,
    cachedPurpleColor,
    cachedShadowColor,
    cachedClearColor;
{var the_class = objj_allocateClassPair(CPObject, "CPColor"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_components"), new objj_ivar("_patternImage"), new objj_ivar("_cssString")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("_initWithCSSString:"), function $CPColor___initWithCSSString_(self, _cmd, aString)
{
    if (aString.indexOf("rgb") == CPNotFound)
        return nil;
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPColor").super_class }, "init");
    var startingIndex = aString.indexOf("("),
        parts = (aString.substring(startingIndex + 1)).split(',');
    self._components = [parseInt(parts[0], 10) / 255.0, parseInt(parts[1], 10) / 255.0, parseInt(parts[2], 10) / 255.0, parts[3] ? parseFloat(parts[3], 10) : 1.0];
    objj_msgSend(self, "_initCSSStringFromComponents");
    return self;
}

), new objj_method(sel_getUid("_initWithRGBA:"), function $CPColor___initWithRGBA_(self, _cmd, components)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPColor").super_class }, "init");
    if (self)
    {
        self._components = components;
        objj_msgSend(self, "_initCSSStringFromComponents");
    }
    return self;
}

), new objj_method(sel_getUid("_initCSSStringFromComponents"), function $CPColor___initCSSStringFromComponents(self, _cmd)
{
    var hasAlpha = self._components[3] != 1.0;
    self._cssString = (hasAlpha ? "rgba(" : "rgb(") + parseInt(self._components[0] * 255.0) + ", " + parseInt(self._components[1] * 255.0) + ", " + parseInt(self._components[2] * 255.0) + (hasAlpha ? ", " + self._components[3] : "") + ")";
}

), new objj_method(sel_getUid("_initWithPatternImage:"), function $CPColor___initWithPatternImage_(self, _cmd, anImage)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPColor").super_class }, "init");
    if (self)
    {
        self._patternImage = anImage;
        self._cssString = "url(\"" + objj_msgSend(self._patternImage, "filename") + "\")";
        self._components = [0.0, 0.0, 0.0, 1.0];
    }
    return self;
}

), new objj_method(sel_getUid("patternImage"), function $CPColor__patternImage(self, _cmd)
{
    return self._patternImage;
}

), new objj_method(sel_getUid("alphaComponent"), function $CPColor__alphaComponent(self, _cmd)
{
    return self._components[3];
}

), new objj_method(sel_getUid("blueComponent"), function $CPColor__blueComponent(self, _cmd)
{
    return self._components[2];
}

), new objj_method(sel_getUid("greenComponent"), function $CPColor__greenComponent(self, _cmd)
{
    return self._components[1];
}

), new objj_method(sel_getUid("redComponent"), function $CPColor__redComponent(self, _cmd)
{
    return self._components[0];
}

), new objj_method(sel_getUid("components"), function $CPColor__components(self, _cmd)
{
    return self._components;
}

), new objj_method(sel_getUid("colorWithAlphaComponent:"), function $CPColor__colorWithAlphaComponent_(self, _cmd, anAlphaComponent)
{
    var components = self._components.slice();
    components[components.length - 1] = anAlphaComponent;
    return objj_msgSend(objj_msgSend(objj_msgSend(self, "class"), "alloc"), "_initWithRGBA:", components);
}

), new objj_method(sel_getUid("colorUsingColorSpaceName:"), function $CPColor__colorUsingColorSpaceName_(self, _cmd, aColorSpaceName)
{
    return self;
}

), new objj_method(sel_getUid("hsbComponents"), function $CPColor__hsbComponents(self, _cmd)
{
    var red = ROUND(self._components[_redComponent] * 255.0),
        green = ROUND(self._components[_greenComponent] * 255.0),
        blue = ROUND(self._components[_blueComponent] * 255.0);
    var max = MAX(red, green, blue),
        min = MIN(red, green, blue),
        delta = max - min;
    var brightness = max / 255.0,
        saturation = max != 0 ? delta / max : 0;
    var hue;
    if (saturation == 0)
    {
        hue = 0;
    }
    else
    {
        var rr = (max - red) / delta,
            gr = (max - green) / delta,
            br = (max - blue) / delta;
        if (red == max)
            hue = br - gr;
        else if (green == max)
            hue = 2 + rr - br;
        else
            hue = 4 + gr - rr;
        hue /= 6;
        if (hue < 0)
            hue++;
    }
    return [hue, saturation, brightness];
}

), new objj_method(sel_getUid("hueComponent"), function $CPColor__hueComponent(self, _cmd)
{
    return objj_msgSend(self, "hsbComponents")[0];
}

), new objj_method(sel_getUid("saturationComponent"), function $CPColor__saturationComponent(self, _cmd)
{
    return objj_msgSend(self, "hsbComponents")[1];
}

), new objj_method(sel_getUid("brightnessComponent"), function $CPColor__brightnessComponent(self, _cmd)
{
    return objj_msgSend(self, "hsbComponents")[2];
}

), new objj_method(sel_getUid("cssString"), function $CPColor__cssString(self, _cmd)
{
    return self._cssString;
}

), new objj_method(sel_getUid("hexString"), function $CPColor__hexString(self, _cmd)
{
    return rgbToHex(objj_msgSend(self, "redComponent"), objj_msgSend(self, "greenComponent"), objj_msgSend(self, "blueComponent"));
}

), new objj_method(sel_getUid("isEqual:"), function $CPColor__isEqual_(self, _cmd, aColor)
{
    if (!aColor)
        return NO;
    if (aColor === self)
        return YES;
    if (!objj_msgSend(aColor, "isKindOfClass:", CPColor))
        return NO;
    if (self._patternImage || objj_msgSend(aColor, "patternImage"))
        return objj_msgSend(self._patternImage, "isEqual:", objj_msgSend(aColor, "patternImage"));
    return ROUND(objj_msgSend(self, "redComponent") * 255.0) == ROUND(objj_msgSend(aColor, "redComponent") * 255.0) && ROUND(objj_msgSend(self, "greenComponent") * 255.0) == ROUND(objj_msgSend(aColor, "greenComponent") * 255.0) && ROUND(objj_msgSend(self, "blueComponent") * 255.0) == ROUND(objj_msgSend(aColor, "blueComponent") * 255.0) && objj_msgSend(self, "alphaComponent") == objj_msgSend(aColor, "alphaComponent");
}

), new objj_method(sel_getUid("description"), function $CPColor__description(self, _cmd)
{
    var description = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPColor").super_class }, "description"),
        patternImage = objj_msgSend(self, "patternImage");
    if (!patternImage)
        return description + " " + objj_msgSend(self, "cssString");
    description += " {\n";
    if (objj_msgSend(patternImage, "isThreePartImage") || objj_msgSend(patternImage, "isNinePartImage"))
    {
        var slices = objj_msgSend(patternImage, "imageSlices");
        if (objj_msgSend(patternImage, "isThreePartImage"))
            description += "    orientation: " + (objj_msgSend(patternImage, "isVertical") ? "vertical" : "horizontal") + ",\n";
        description += "    patternImage (" + slices.length + " part): [\n";
        for (var i = 0; i < slices.length; ++i)
        {
            var imgDescription = objj_msgSend(slices[i], "description") || "nil";
            description += imgDescription.replace(/^/mg, "        ") + ",\n";
        }
        description = description.substr(0, description.length - 2) + "\n    ]\n}";
    }
    else
        description += (objj_msgSend(patternImage, "description") || "nil").replace(/^/mg, "    ") + "\n}";
    return description;
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("colorWithRed:green:blue:alpha:"), function $CPColor__colorWithRed_green_blue_alpha_(self, _cmd, red, green, blue, alpha)
{
    return objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", [MAX(0.0, MIN(1.0, red)), MAX(0.0, MIN(1.0, green)), MAX(0.0, MIN(1.0, blue)), MAX(0.0, MIN(1.0, alpha))]);
}

), new objj_method(sel_getUid("colorWithCalibratedRed:green:blue:alpha:"), function $CPColor__colorWithCalibratedRed_green_blue_alpha_(self, _cmd, red, green, blue, alpha)
{
    return objj_msgSend(self, "colorWithRed:green:blue:alpha:", red, green, blue, alpha);
}

), new objj_method(sel_getUid("colorWithWhite:alpha:"), function $CPColor__colorWithWhite_alpha_(self, _cmd, white, alpha)
{
    return objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", [white, white, white, alpha]);
}

), new objj_method(sel_getUid("colorWithCalibratedWhite:alpha:"), function $CPColor__colorWithCalibratedWhite_alpha_(self, _cmd, white, alpha)
{
    return objj_msgSend(self, "colorWithWhite:alpha:", white, alpha);
}

), new objj_method(sel_getUid("colorWithHue:saturation:brightness:"), function $CPColor__colorWithHue_saturation_brightness_(self, _cmd, hue, saturation, brightness)
{
    return objj_msgSend(self, "colorWithHue:saturation:brightness:alpha:", hue, saturation, brightness, 1.0);
}

), new objj_method(sel_getUid("colorWithCalibratedHue:saturation:brightness:alpha:"), function $CPColor__colorWithCalibratedHue_saturation_brightness_alpha_(self, _cmd, hue, saturation, brightness, alpha)
{
    return objj_msgSend(self, "colorWithHue:saturation:brightness:alpha:", hue, saturation, brightness, alpha);
}

), new objj_method(sel_getUid("colorWithHue:saturation:brightness:alpha:"), function $CPColor__colorWithHue_saturation_brightness_alpha_(self, _cmd, hue, saturation, brightness, alpha)
{
    hue = MAX(MIN(hue, 1.0), 0.0);
    saturation = MAX(MIN(saturation, 1.0), 0.0);
    brightness = MAX(MIN(brightness, 1.0), 0.0);
    if (saturation === 0.0)
        return objj_msgSend(CPColor, "colorWithCalibratedWhite:alpha:", brightness, alpha);
    var f = hue * 360 % 60,
        p = brightness * (1 - saturation),
        q = brightness * (60 - saturation * f) / 60,
        t = brightness * (60 - saturation * (60 - f)) / 60,
        b = brightness;
    switch(FLOOR(hue * 6)) {
        case 0:
        case 6:
            return objj_msgSend(CPColor, "colorWithCalibratedRed:green:blue:alpha:", b, t, p, alpha);
        case 1:
            return objj_msgSend(CPColor, "colorWithCalibratedRed:green:blue:alpha:", q, b, p, alpha);
        case 2:
            return objj_msgSend(CPColor, "colorWithCalibratedRed:green:blue:alpha:", p, b, t, alpha);
        case 3:
            return objj_msgSend(CPColor, "colorWithCalibratedRed:green:blue:alpha:", p, q, b, alpha);
        case 4:
            return objj_msgSend(CPColor, "colorWithCalibratedRed:green:blue:alpha:", t, p, b, alpha);
        case 5:
            return objj_msgSend(CPColor, "colorWithCalibratedRed:green:blue:alpha:", b, p, q, alpha);
    }
}

), new objj_method(sel_getUid("colorWithHexString:"), function $CPColor__colorWithHexString_(self, _cmd, hex)
{
    var rgba = hexToRGB(hex);
    return rgba ? objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", rgba) : null;
}

), new objj_method(sel_getUid("colorWithSRGBRed:green:blue:alpha:"), function $CPColor__colorWithSRGBRed_green_blue_alpha_(self, _cmd, red, green, blue, alpha)
{
    return objj_msgSend(self, "colorWithRed:green:blue:alpha:", red, green, blue, alpha);
}

), new objj_method(sel_getUid("blackColor"), function $CPColor__blackColor(self, _cmd)
{
    if (!cachedBlackColor)
        cachedBlackColor = objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", [0.0, 0.0, 0.0, 1.0]);
    return cachedBlackColor;
}

), new objj_method(sel_getUid("blueColor"), function $CPColor__blueColor(self, _cmd)
{
    if (!cachedBlueColor)
        cachedBlueColor = objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", [0.0, 0.0, 1.0, 1.0]);
    return cachedBlueColor;
}

), new objj_method(sel_getUid("darkGrayColor"), function $CPColor__darkGrayColor(self, _cmd)
{
    if (!cachedDarkGrayColor)
        cachedDarkGrayColor = objj_msgSend(CPColor, "colorWithCalibratedWhite:alpha:", 1.0 / 3.0, 1.0);
    return cachedDarkGrayColor;
}

), new objj_method(sel_getUid("grayColor"), function $CPColor__grayColor(self, _cmd)
{
    if (!cachedGrayColor)
        cachedGrayColor = objj_msgSend(CPColor, "colorWithCalibratedWhite:alpha:", 0.5, 1.0);
    return cachedGrayColor;
}

), new objj_method(sel_getUid("greenColor"), function $CPColor__greenColor(self, _cmd)
{
    if (!cachedGreenColor)
        cachedGreenColor = objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", [0.0, 1.0, 0.0, 1.0]);
    return cachedGreenColor;
}

), new objj_method(sel_getUid("lightGrayColor"), function $CPColor__lightGrayColor(self, _cmd)
{
    if (!cachedLightGrayColor)
        cachedLightGrayColor = objj_msgSend(CPColor, "colorWithCalibratedWhite:alpha:", 2.0 / 3.0, 1.0);
    return cachedLightGrayColor;
}

), new objj_method(sel_getUid("redColor"), function $CPColor__redColor(self, _cmd)
{
    if (!cachedRedColor)
        cachedRedColor = objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", [1.0, 0.0, 0.0, 1.0]);
    return cachedRedColor;
}

), new objj_method(sel_getUid("whiteColor"), function $CPColor__whiteColor(self, _cmd)
{
    if (!cachedWhiteColor)
        cachedWhiteColor = objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", [1.0, 1.0, 1.0, 1.0]);
    return cachedWhiteColor;
}

), new objj_method(sel_getUid("yellowColor"), function $CPColor__yellowColor(self, _cmd)
{
    if (!cachedYellowColor)
        cachedYellowColor = objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", [1.0, 1.0, 0.0, 1.0]);
    return cachedYellowColor;
}

), new objj_method(sel_getUid("brownColor"), function $CPColor__brownColor(self, _cmd)
{
    if (!cachedBrownColor)
        cachedBrownColor = objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", [0.6, 0.4, 0.2, 1.0]);
    return cachedBrownColor;
}

), new objj_method(sel_getUid("cyanColor"), function $CPColor__cyanColor(self, _cmd)
{
    if (!cachedCyanColor)
        cachedCyanColor = objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", [0.0, 1.0, 1.0, 1.0]);
    return cachedCyanColor;
}

), new objj_method(sel_getUid("magentaColor"), function $CPColor__magentaColor(self, _cmd)
{
    if (!cachedMagentaColor)
        cachedMagentaColor = objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", [1.0, 0.0, 1.0, 1.0]);
    return cachedMagentaColor;
}

), new objj_method(sel_getUid("orangeColor"), function $CPColor__orangeColor(self, _cmd)
{
    if (!cachedOrangeColor)
        cachedOrangeColor = objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", [1.0, 0.5, 0.0, 1.0]);
    return cachedOrangeColor;
}

), new objj_method(sel_getUid("purpleColor"), function $CPColor__purpleColor(self, _cmd)
{
    if (!cachedPurpleColor)
        cachedPurpleColor = objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", [0.5, 0.0, 0.5, 1.0]);
    return cachedPurpleColor;
}

), new objj_method(sel_getUid("shadowColor"), function $CPColor__shadowColor(self, _cmd)
{
    if (!cachedShadowColor)
        cachedShadowColor = objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", [0.0, 0.0, 0.0, 1.0 / 3.0]);
    return cachedShadowColor;
}

), new objj_method(sel_getUid("clearColor"), function $CPColor__clearColor(self, _cmd)
{
    if (!cachedClearColor)
        cachedClearColor = objj_msgSend(self, "colorWithCalibratedWhite:alpha:", 0.0, 0.0);
    return cachedClearColor;
}

), new objj_method(sel_getUid("alternateSelectedControlColor"), function $CPColor__alternateSelectedControlColor(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", [0.22, 0.46, 0.84, 1.0]);
}

), new objj_method(sel_getUid("secondarySelectedControlColor"), function $CPColor__secondarySelectedControlColor(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithRGBA:", [0.83, 0.83, 0.83, 1.0]);
}

), new objj_method(sel_getUid("colorWithPatternImage:"), function $CPColor__colorWithPatternImage_(self, _cmd, anImage)
{
    return objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithPatternImage:", anImage);
}

), new objj_method(sel_getUid("colorWithCSSString:"), function $CPColor__colorWithCSSString_(self, _cmd, aString)
{
    return objj_msgSend(objj_msgSend(CPColor, "alloc"), "_initWithCSSString:", aString);
}

)]);
}{
var the_class = objj_getClass("CPColor")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPColor\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("set"), function $CPColor__set(self, _cmd)
{
    objj_msgSend(self, "setFill");
    objj_msgSend(self, "setStroke");
}

), new objj_method(sel_getUid("setFill"), function $CPColor__setFill(self, _cmd)
{
    var ctx = objj_msgSend(objj_msgSend(CPGraphicsContext, "currentContext"), "graphicsPort");
    CGContextSetFillColor(ctx, self);
}

), new objj_method(sel_getUid("setStroke"), function $CPColor__setStroke(self, _cmd)
{
    var ctx = objj_msgSend(objj_msgSend(CPGraphicsContext, "currentContext"), "graphicsPort");
    CGContextSetStrokeColor(ctx, self);
}

)]);
}{
var the_class = objj_getClass("CPColor")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPColor\"");
var meta_class = the_class.isa;class_addMethods(meta_class, [new objj_method(sel_getUid("randomColor"), function $CPColor__randomColor(self, _cmd)
{
    return objj_msgSend(CPColor, "colorWithRed:green:blue:alpha:", RAND(), RAND(), RAND(), 1.0);
}

)]);
}var CPColorComponentsKey = "CPColorComponentsKey",
    CPColorPatternImageKey = "CPColorPatternImageKey";
{
var the_class = objj_getClass("CPColor")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPColor\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPColor__initWithCoder_(self, _cmd, aCoder)
{
    if (objj_msgSend(aCoder, "containsValueForKey:", CPColorPatternImageKey))
        return objj_msgSend(self, "_initWithPatternImage:", objj_msgSend(aCoder, "decodeObjectForKey:", CPColorPatternImageKey));
    return objj_msgSend(self, "_initWithRGBA:", objj_msgSend(aCoder, "decodeObjectForKey:", CPColorComponentsKey));
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPColor__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPColor").super_class }, "encodeWithCoder:", aCoder);
    if (self._patternImage)
        objj_msgSend(aCoder, "encodeObject:forKey:", self._patternImage, CPColorPatternImageKey);
    else
        objj_msgSend(aCoder, "encodeObject:forKey:", self._components, CPColorComponentsKey);
}

)]);
}var hexCharacters = "0123456789ABCDEF";
var hexToRGB = function(hex)
{
    if (hex.length == 3)
        hex = hex.charAt(0) + hex.charAt(0) + hex.charAt(1) + hex.charAt(1) + hex.charAt(2) + hex.charAt(2);
    if (hex.length != 6)
        return null;
    hex = hex.toUpperCase();
    for (var i = 0; i < hex.length; i++)
        if (hexCharacters.indexOf(hex.charAt(i)) == -1)
            return null;
    var red = (hexCharacters.indexOf(hex.charAt(0)) * 16 + hexCharacters.indexOf(hex.charAt(1))) / 255.0,
        green = (hexCharacters.indexOf(hex.charAt(2)) * 16 + hexCharacters.indexOf(hex.charAt(3))) / 255.0,
        blue = (hexCharacters.indexOf(hex.charAt(4)) * 16 + hexCharacters.indexOf(hex.charAt(5))) / 255.0;
    return [red, green, blue, 1.0];
};
var rgbToHex = function(r, g, b)
{
    return byteToHex(r) + byteToHex(g) + byteToHex(b);
};
var byteToHex = function(n)
{
    if (!n || isNaN(n))
        return "00";
    n = FLOOR(MIN(255, MAX(0, 256 * n)));
    return hexCharacters.charAt((n - n % 16) / 16) + hexCharacters.charAt(n % 16);
};
function CPColorWithImages()
{
    var slices = nil,
        numParts = 0,
        isVertical = false,
        imageFactory = CPImageInBundle,
        args = Array.prototype.slice.apply(arguments);
    if (typeof args[args.length - 1] === "function")
        imageFactory = args.pop();
    switch(args.length) {
        case 1:
            return imageFromSlices(args[0], isVertical, imageFactory);
        case 2:
            if (typeof args[0] === "string")
                return patternColorsFromPattern.call(this, args[0], args[1], imageFactory);
            return imageFromSlices(args[0], args[1], imageFactory);
        case 3:
        case 4:
            return objj_msgSend(CPColor, "colorWithPatternImage:", imageFactory(args[0], args[1], args[2], args[3]));
default:
            throw "ERROR: Invalid argument count: " + args.length;
    }
}
var imageFromSlices = function(slices, isVertical, imageFactory)
{
    var imageSlices = [];
    for (var i = 0; i < slices.length; ++i)
    {
        var slice = slices[i];
        imageSlices.push(slice ? imageFactory(slice[0], slice[1], slice[2], slice[3]) : nil);
    }    switch(slices.length) {
        case 3:
            return objj_msgSend(CPColor, "colorWithPatternImage:", objj_msgSend(objj_msgSend(CPThreePartImage, "alloc"), "initWithImageSlices:isVertical:", imageSlices, isVertical));
        case 9:
            return objj_msgSend(CPColor, "colorWithPatternImage:", objj_msgSend(objj_msgSend(CPNinePartImage, "alloc"), "initWithImageSlices:", imageSlices));
default:
            throw "ERROR: Invalid number of image slices: " + slices.length;
    }
};
var patternColorsFromPattern = function(pattern, attributes, imageFactory)
{
    if (pattern.match(/^.*\{[^}]+\}/))
    {
        var width = attributes["width"],
            height = attributes["height"],
            separator = attributes["separator"] || "-",
            orientation = attributes["orientation"],
            rightWidth,
            bottomHeight,
            centerWidthHeight,
            centerIsNil,
            numParts;
        if (pattern.indexOf("{position}") < 0)
            throw "ERROR: Pattern strings must have a {position} placeholder (\"" + pattern + "\")";
        if (orientation === undefined)
        {
            numParts = 9;
            if (attributes["centerIsNil"] !== undefined)
                centerIsNil = attributes["centerIsNil"];
        }        else
        {
            numParts = 3;
            isVertical = orientation === PatternIsVertical;
            if (isVertical)
            {
                if (attributes["centerHeight"])
                    centerWidthHeight = attributes["centerHeight"];
            }            else
            {
                if (attributes["centerWidth"])
                    centerWidthHeight = attributes["centerWidth"];
            }        }        if (attributes["rightWidth"])
            rightWidth = attributes["rightWidth"];
        if (attributes["bottomHeight"])
            bottomHeight = attributes["bottomHeight"];
        var positions = attributes["positions"] || "@",
            states = nil,
            styles = nil;
        if (numParts === 3)
        {
            if (positions === "@")
            {
                if (isVertical)
                    positions = ["top", "center", "bottom"];
                else
                    positions = ["left", "center", "right"];
            }            else if (positions === "#")
                positions = ["0", "1", "2"];
            else
                throw "ERROR: Invalid positions: " + positions;
        }        else
        {
            if (positions === "@" || positions === "abbrev")
                positions = ["top-left", "top", "top-right", "left", "center", "right", "bottom-left", "bottom", "bottom-right"];
            else if (positions === "full")
                positions = ["top-left", "top-center", "top-right", "center-left", "center-center", "center-right", "bottom-left", "bottom-center", "bottom-right"];
            else if (positions === "#")
                positions = ["0", "1", "2", "3", "4", "5", "6", "7", "8"];
            else
                throw "ERROR: Invalid positions: " + positions;
        }        if (pattern.indexOf("{state}") >= 0)
        {
            states = attributes["states"];
            if (!states)
                throw "ERROR: {state} placeholder in the pattern (\"" + pattern + "\") but no states item in the attributes";
        }        if (pattern.indexOf("{style}") >= 0)
        {
            styles = attributes["styles"];
            if (!styles)
                throw "ERROR: {style} placeholder in the pattern (\"" + pattern + "\") but no styles item in the attributes";
        }        var placeholder = "{position}",
            pos = pattern.indexOf(placeholder),
            i;
        for (i = 0; i < positions.length; ++i)
            positions[i] = pattern.replace(placeholder, pos === 0 ? positions[i] + separator : separator + positions[i]);
        var slices = positions,
            object = slices,
            key,
            sep;
        if (states)
        {
            placeholder = "{state}";
            pos = pattern.indexOf(placeholder);
            object = {};
            for (i = 0; i < states.length; ++i)
            {
                var state = states[i];
                key = state || "@";
                sep = state ? separator : "";
                object[key] = slices.slice(0);
                replacePlaceholderInArray(object[key], placeholder, pos === 0 ? state + sep : sep + state);
            }        }        if (styles)
        {
            placeholder = "{style}";
            pos = pattern.indexOf(placeholder);
            var styleObject = {};
            for (i = 0; i < styles.length; ++i)
            {
                var style = styles[i];
                key = style || "@";
                sep = style ? separator : "";
                if (states)
                {
                    styleObject[key] = cloneObject(object);
                    replacePlaceholderInObject(styleObject[key], placeholder, pos === 0 ? style + sep : sep + style);
                }                else
                {
                    styleObject[key] = slices.slice(0);
                    replacePlaceholderInArray(styleObject[key], placeholder, pos === 0 ? style + sep : sep + style);
                }            }            object = styleObject;
        }        if (styles || states)
        {
            if (numParts === 3)
                makeThreePartSlicesFromObject(object, width, height, centerWidthHeight, rightWidth, bottomHeight, isVertical);
            else
                makeNinePartSlicesFromObject(object, width, height, rightWidth, bottomHeight, centerIsNil);
            makeImagesFromObject(object, isVertical, imageFactory);
            return object;
        }        else
        {
            if (numParts === 3)
                makeThreePartSlicesFromArray(object, width, height, centerWidthHeight, rightWidth, bottomHeight, isVertical);
            else
                makeNinePartSlicesFromArray(object, width, height, rightWidth, bottomHeight, centerIsNil);
            return imageFromSlices(object, isVertical, imageFactory);
        }    }    else
        throw "ERROR: No placeholders in slice pattern (\"" + pattern + "\")";
};
var replacePlaceholderInArray = function(array, find, replacement)
{
    for (var i = 0; i < array.length; ++i)
        array[i] = array[i].replace(find, replacement);
};
var replacePlaceholderInObject = function(object, find, replacement)
{
    for (var key in object)
        if (object.hasOwnProperty(key))
            if (object[key].constructor === Array)
                replacePlaceholderInArray(object[key], find, replacement);
            else
                replacePlaceholderInObject(object[key], find, replacement);
};
var cloneObject = function(object)
{
    var clone = {};
    for (var key in object)
        if (object.hasOwnProperty(key))
            if (object[key].constructor === Array)
                clone[key] = object[key].slice(0);
            else if (typeof object[key] === "object")
                clone[key] = cloneObject(object[key]);
            else
                clone[key] = object[key];
    return clone;
};
var makeThreePartSlicesFromObject = function(object, width, height, centerWidthHeight, rightWidth, bottomHeight, isVertical)
{
    for (var key in object)
        if (object.hasOwnProperty(key))
            if (object[key].constructor === Array)
                makeThreePartSlicesFromArray(object[key], width, height, centerWidthHeight, rightWidth, bottomHeight, isVertical);
            else
                makeThreePartSlicesFromObject(object[key], width, height, centerWidthHeight, rightWidth, bottomHeight, isVertical);
};
var makeThreePartSlicesFromArray = function(array, width, height, centerWidthHeight, rightWidth, bottomHeight, isVertical)
{
    array[0] = [array[0], width, height];
    if (isVertical)
    {
        array[1] = [array[1], width, centerWidthHeight ? centerWidthHeight : 1.0];
        array[2] = [array[2], width, bottomHeight ? bottomHeight : height];
    }    else
    {
        array[1] = [array[1], centerWidthHeight ? centerWidthHeight : 1.0, height];
        array[2] = [array[2], rightWidth ? rightWidth : width, height];
    }};
var makeNinePartSlicesFromObject = function(object, width, height, rightWidth, bottomHeight, centerIsNil)
{
    for (var key in object)
        if (object.hasOwnProperty(key))
            if (object[key].constructor === Array)
                makeNinePartSlicesFromArray(object[key], width, height, rightWidth, bottomHeight, centerIsNil);
            else
                makeNinePartSlicesFromObject(object[key], width, height, rightWidth, bottomHeight, centerIsNil);
};
var makeNinePartSlicesFromArray = function(array, width, height, rightWidth, bottomHeight, centerIsNil)
{
    rightWidth = rightWidth ? rightWidth : width;
    bottomHeight = bottomHeight ? bottomHeight : height;
    array[0] = [array[0], width, height];
    array[1] = [array[1], 1.0, height];
    array[2] = [array[2], rightWidth, height];
    array[3] = [array[3], width, 1.0];
    array[4] = centerIsNil ? nil : [array[4], 1.0, 1.0];
    array[5] = [array[5], rightWidth, 1.0];
    array[6] = [array[6], width, bottomHeight];
    array[7] = [array[7], 1.0, bottomHeight];
    array[8] = [array[8], rightWidth, bottomHeight];
};
var makeImagesFromObject = function(object, isVertical, imageFactory)
{
    for (var key in object)
        if (object.hasOwnProperty(key))
            if (object[key].constructor === Array)
                object[key] = imageFromSlices(object[key], isVertical, imageFactory);
            else
                makeImagesFromObject(object[key], isVertical, imageFactory);
};
var CPFontDefaultSystemFontFace = "Helvetica Neue, Arial, sans-serif",
    CPFontDefaultSystemFontSize = 12;
var _CPFonts = {},
    _CPFontSystemFontFace = CPFontDefaultSystemFontFace,
    _CPFontSystemFontSize = 12,
    _CPFontFallbackFaces = CPFontDefaultSystemFontFace.split(", "),
    _CPFontStripRegExp = new RegExp("(^\\s*[\"']?|[\"']?\\s*$)", "g");
{var the_class = objj_allocateClassPair(CPObject, "CPFont"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_name"), new objj_ivar("_size"), new objj_ivar("_lineHeight"), new objj_ivar("_isBold"), new objj_ivar("_isItalic"), new objj_ivar("_isUnderline"), new objj_ivar("_cssString")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("_initWithName:size:bold:italic:underline:"), function $CPFont___initWithName_size_bold_italic_underline_(self, _cmd, aName, aSize, isBold, isItalic, underline)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPFont").super_class }, "init");
    if (self)
    {
        self._name = (_CPFontNormalizedNameArray(aName)).join(", ");
        self._size = aSize;
        self._lineHeight = 1.0;
        self._isUnderline = underline;
        self._isBold = isBold;
        self._isItalic = isItalic;
        self._cssString = _CPFontCreateCSSString(self._name, self._size, self._isBold, self._isItalic);
        _CPFonts[self._cssString] = self;
    }
    return self;
}

), new objj_method(sel_getUid("defaultLineHeightForFont"), function $CPFont__defaultLineHeightForFont(self, _cmd)
{
    return self._lineHeight;
}

), new objj_method(sel_getUid("size"), function $CPFont__size(self, _cmd)
{
    return self._size;
}

), new objj_method(sel_getUid("cssString"), function $CPFont__cssString(self, _cmd)
{
    return self._cssString;
}

), new objj_method(sel_getUid("cssTextDecoration"), function $CPFont__cssTextDecoration(self, _cmd)
{
    var s = "";
    if (self._isUnderline)
    {
        s = "underline";
    }
    else
    {
        s = "none";
    }
    return s;
}

), new objj_method(sel_getUid("familyName"), function $CPFont__familyName(self, _cmd)
{
    return self._name;
}

), new objj_method(sel_getUid("isEqual:"), function $CPFont__isEqual_(self, _cmd, anObject)
{
    return objj_msgSend(anObject, "isKindOfClass:", objj_msgSend(CPFont, "class")) && objj_msgSend(anObject, "cssString") === self._cssString;
}

), new objj_method(sel_getUid("description"), function $CPFont__description(self, _cmd)
{
    return objj_msgSend(CPString, "stringWithFormat:", "%@ %@", objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPFont").super_class }, "description"), objj_msgSend(self, "cssString"));
}

), new objj_method(sel_getUid("copy"), function $CPFont__copy(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPFont, "alloc"), "_initWithName:size:bold:italic:", self._name, self._size, self._isBold, self._isItalic);
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("systemFontFace"), function $CPFont__systemFontFace(self, _cmd)
{
    return _CPFontSystemFontFace;
}

), new objj_method(sel_getUid("setSystemFontFace:"), function $CPFont__setSystemFontFace_(self, _cmd, aFace)
{
    _CPFontSystemFontFace = (_CPFontNormalizedNameArray(aFace)).join(", ");
}

), new objj_method(sel_getUid("systemFontSize"), function $CPFont__systemFontSize(self, _cmd)
{
    return _CPFontSystemFontSize;
}

), new objj_method(sel_getUid("setSystemFontSize:"), function $CPFont__setSystemFontSize_(self, _cmd, size)
{
    if (size > 0)
        _CPFontSystemFontSize = size;
}

), new objj_method(sel_getUid("fontWithName:size:"), function $CPFont__fontWithName_size_(self, _cmd, aName, aSize)
{
    return objj_msgSend(CPFont, "fontWithName:size:bold:italic:underline:", aName, aSize, NO, NO, NO);
}

), new objj_method(sel_getUid("fontWithName:size:italic:"), function $CPFont__fontWithName_size_italic_(self, _cmd, aName, aSize, italic)
{
    return objj_msgSend(CPFont, "fontWithName:size:bold:italic:underline:", aName, aSize, NO, italic, NO);
}

), new objj_method(sel_getUid("boldFontWithName:size:"), function $CPFont__boldFontWithName_size_(self, _cmd, aName, aSize)
{
    return objj_msgSend(CPFont, "fontWithName:size:bold:italic:underline:", aName, aSize, YES, NO, NO);
}

), new objj_method(sel_getUid("boldFontWithName:size:italic:"), function $CPFont__boldFontWithName_size_italic_(self, _cmd, aName, aSize, italic)
{
    return objj_msgSend(CPFont, "fontWithName:size:bold:italic:underline:", aName, aSize, YES, italic, NO);
}

), new objj_method(sel_getUid("systemFontOfSize:"), function $CPFont__systemFontOfSize_(self, _cmd, aSize)
{
    return objj_msgSend(CPFont, "fontWithName:size:bold:italic:underline:", _CPFontSystemFontFace, aSize, NO, NO, NO);
}

), new objj_method(sel_getUid("boldSystemFontOfSize:"), function $CPFont__boldSystemFontOfSize_(self, _cmd, aSize)
{
    return objj_msgSend(CPFont, "fontWithName:size:bold:italic:underline:", _CPFontSystemFontFace, aSize, YES, NO, NO);
}

), new objj_method(sel_getUid("fontWithName:size:bold:italic:underline:"), function $CPFont__fontWithName_size_bold_italic_underline_(self, _cmd, aName, aSize, isBold, isItalic, underline)
{
    return objj_msgSend(objj_msgSend(CPFont, "alloc"), "_initWithName:size:bold:italic:underline:", aName, aSize, isBold, isItalic, underline);
}

)]);
}var CPFontNameKey = "CPFontNameKey",
    CPFontSizeKey = "CPFontSizeKey",
    CPFontIsBoldKey = "CPFontIsBoldKey",
    CPFontIsItalicKey = "CPFontIsItalicKey",
    CPFontIsUnderlineKey = "CPFontIsUnderlineKey";
{
var the_class = objj_getClass("CPFont")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPFont\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPFont__initWithCoder_(self, _cmd, aCoder)
{
    var fontName = objj_msgSend(aCoder, "decodeObjectForKey:", CPFontNameKey);
    var size = objj_msgSend(aCoder, "decodeFloatForKey:", CPFontSizeKey),
        isBold = objj_msgSend(aCoder, "decodeBoolForKey:", CPFontIsBoldKey),
        isItalic = objj_msgSend(aCoder, "decodeBoolForKey:", CPFontIsItalicKey);
    isUnderline = objj_msgSend(aCoder, "decodeBoolForKey:", CPFontIsUnderlineKey);
    return objj_msgSend(self, "_initWithName:size:bold:italic:underline:", fontName, size, isBold, isItalic, isUnderline);
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPFont__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPFont").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._name, CPFontNameKey);
    objj_msgSend(aCoder, "encodeFloat:forKey:", self._size, CPFontSizeKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._isBold, CPFontIsBoldKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._isItalic, CPFontIsItalicKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._isUnderline, CPFontIsUnderlineKey);
}

)]);
}var DefaultFont = nil;
{
var the_class = objj_getClass("CPString")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPString\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("sizeWithFont:"), function $CPString__sizeWithFont_(self, _cmd, aFont)
{
    return objj_msgSend(self, "sizeWithFont:inWidth:", aFont, Nil);
}

), new objj_method(sel_getUid("sizeWithFont:inWidth:"), function $CPString__sizeWithFont_inWidth_(self, _cmd, aFont, aWidth)
{
    return objj_msgSend(CPString, "sizeOfString:withFont:forWidth:", self, aFont, aWidth);
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("sizeOfString:withFont:forWidth:"), function $CPString__sizeOfString_withFont_forWidth_(self, _cmd, aString, aFont, aWidth)
{
    if (!aFont)
    {
        if (!DefaultFont)
            DefaultFont = objj_msgSend(CPFont, "systemFontOfSize:", 12.0);
        aFont = DefaultFont;
    }
    var span = $("<div></div>");
    span.css({"float": "left", "padding": 0, "font": objj_msgSend(aFont, "cssString"), "text-decoration": objj_msgSend(aFont, "cssTextDecoration"), "display": "none"});
    if (aWidth)
    {
        span.css({width: Math.round(aWidth)});
    }
    var isIE = navigator.userAgent.indexOf("MSIE") != -1;
    span.html(aString);
    ($('body')).append(span);
    sz = CPMakeSize(($(span)).width() + 1, ($(span)).height() + 1 - isIE);
    span.remove();
    return sz;
}

)]);
}var _CPFontCreateCSSString = function(aName, aSize, isBold, isItalic)
{
    var properties = (isItalic ? "italic " : "") + (isBold ? "bold " : "") + aSize + "px ";
    return properties + _CPFontConcatNameWithFallback(aName);
};
var _CPFontConcatNameWithFallback = function(aName)
{
    var names = _CPFontNormalizedNameArray(aName),
        fallbackFaces = _CPFontFallbackFaces.slice(0);
    for (var i = 0; i < names.length; ++i)
    {
        for (var j = 0; j < fallbackFaces.length; ++j)
        {
            if (names[i].toLowerCase() === fallbackFaces[j].toLowerCase())
            {
                fallbackFaces.splice(j, 1);
                break;
            }        }        if (names[i].indexOf(" ") > 0)
            names[i] = '"' + names[i] + '"';
    }    return (names.concat(fallbackFaces)).join(", ");
};
var _CPFontNormalizedNameArray = function(aName)
{
    if (aName)
    {
        var names = aName.split(",");
        for (var i = 0; i < names.length; ++i)
            names[i] = names[i].replace(_CPFontStripRegExp, "");
        return names;
    }    return null;
};
{var the_class = objj_allocateClassPair(CPObject, "CPTheme"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("themeAttribute:forClass:"), function $CPTheme__themeAttribute_forClass_(self, _cmd, attr, theClass)
{
    var className = class_getName(theClass);
    if (objj_msgSend(self, "respondsToSelector:", CPSelectorFromString(className)))
    {
        var d = objj_msgSend(self, "performSelector:withObject:", CPSelectorFromString(className), nil);
        return objj_msgSend(d, "objectForKey:", attr);
    }
    return nil;
}

), new objj_method(sel_getUid("defaultThemeAttributesForClass:"), function $CPTheme__defaultThemeAttributesForClass_(self, _cmd, className)
{
    if (objj_msgSend(self, "respondsToSelector:", CPSelectorFromString(className)))
        return objj_msgSend(self, "performSelector:withObject:", CPSelectorFromString(className), nil);
    return null;
}

), new objj_method(sel_getUid("CPView"), function $CPTheme__CPView(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", 0.0, "border-width");
}

), new objj_method(sel_getUid("CPControl"), function $CPTheme__CPControl(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", CPLeftTextAlignment, "alignment", CPLineBreakByClipping, "line-break-mode", objj_msgSend(CPColor, "blackColor"), "text-color", objj_msgSend(CPColor, "whiteColor"), "alt-text-color", objj_msgSend(CPColor, "colorWithHexString:", "fafafa"), "text-shadow-color", objj_msgSend(CPColor, "colorWithHexString:", "3f3f3f"), "alt-text-shadow-color", objj_msgSend(CPFont, "systemFontOfSize:", 12.0), "font", CPNoImage, "image-position", CGSizeMake(15, 15), "image-size", CGSizeMake(0, 1), "text-shadow-offset");
}

), new objj_method(sel_getUid("CPTextField"), function $CPTheme__CPTextField(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", 2.0, "border-width", objj_msgSend(CPFont, "systemFontOfSize:", 13.0), "font", CGSizeMake(0, 1), "text-shadow-offset");
}

), new objj_method(sel_getUid("CPButton"), function $CPTheme__CPButton(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", 1.0, "border-width", objj_msgSend(CPFont, "boldSystemFontOfSize:", 13.0), "font");
}

), new objj_method(sel_getUid("CPCheckBox"), function $CPTheme__CPCheckBox(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", objj_msgSend(CPColor, "blackColor"), "alt-text-color", objj_msgSend(CPColor, "colorWithHexString:", "fafafa"), "alt-text-shadow-color", objj_msgSend(CPFont, "systemFontOfSize:", 12.0), "font", CGSizeMake(17, 17), "image-size", 0.0, "border-width");
}

), new objj_method(sel_getUid("CPRadio"), function $CPTheme__CPRadio(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", objj_msgSend(CPColor, "blackColor"), "alt-text-color", objj_msgSend(CPColor, "colorWithHexString:", "fafafa"), "alt-text-shadow-color", objj_msgSend(CPFont, "systemFontOfSize:", 12.0), "font", CGSizeMake(18, 18), "image-size", 0.0, "border-width");
}

), new objj_method(sel_getUid("CPPopUpButton"), function $CPTheme__CPPopUpButton(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", 0.0, "border-width", 25, "trigger-width", 25, "optimal-height", objj_msgSend(CPColor, "blackColor"), "alt-text-color", objj_msgSend(CPColor, "colorWithHexString:", "fafafa"), "alt-text-shadow-color");
}

), new objj_method(sel_getUid("CPBox"), function $CPTheme__CPBox(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", 1.0, "border-width", CGSizeMake(1, 1), "content-margin", 5, "corner-radius", objj_msgSend(CPColor, "colorWithHexString:", "8a8a8a"), "border-color");
}

), new objj_method(sel_getUid("CPSlider"), function $CPTheme__CPSlider(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", 6, "linear-dim", 28.0, "circular-dim");
}

), new objj_method(sel_getUid("CPStepper"), function $CPTheme__CPStepper(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", "iVBORw0KGgoAAAANSUhEUgAAAAYAAAAFCAYAAABmWJ3mAAAEJGlDQ1BJQ0MgUHJvZmlsZQAAOBGFVd9v21QUPolvUqQWPyBYR4eKxa9VU1u5GxqtxgZJk6XtShal6dgqJOQ6N4mpGwfb6baqT3uBNwb8AUDZAw9IPCENBmJ72fbAtElThyqqSUh76MQPISbtBVXhu3ZiJ1PEXPX6yznfOec7517bRD1fabWaGVWIlquunc8klZOnFpSeTYrSs9RLA9Sr6U4tkcvNEi7BFffO6+EdigjL7ZHu/k72I796i9zRiSJPwG4VHX0Z+AxRzNRrtksUvwf7+Gm3BtzzHPDTNgQCqwKXfZwSeNHHJz1OIT8JjtAq6xWtCLwGPLzYZi+3YV8DGMiT4VVuG7oiZpGzrZJhcs/hL49xtzH/Dy6bdfTsXYNY+5yluWO4D4neK/ZUvok/17X0HPBLsF+vuUlhfwX4j/rSfAJ4H1H0qZJ9dN7nR19frRTeBt4Fe9FwpwtN+2p1MXscGLHR9SXrmMgjONd1ZxKzpBeA71b4tNhj6JGoyFNp4GHgwUp9qplfmnFW5oTdy7NamcwCI49kv6fN5IAHgD+0rbyoBc3SOjczohbyS1drbq6pQdqumllRC/0ymTtej8gpbbuVwpQfyw66dqEZyxZKxtHpJn+tZnpnEdrYBbueF9qQn93S7HQGGHnYP7w6L+YGHNtd1FJitqPAR+hERCNOFi1i1alKO6RQnjKUxL1GNjwlMsiEhcPLYTEiT9ISbN15OY/jx4SMshe9LaJRpTvHr3C/ybFYP1PZAfwfYrPsMBtnE6SwN9ib7AhLwTrBDgUKcm06FSrTfSj187xPdVQWOk5Q8vxAfSiIUc7Z7xr6zY/+hpqwSyv0I0/QMTRb7RMgBxNodTfSPqdraz/sDjzKBrv4zu2+a2t0/HHzjd2Lbcc2sG7GtsL42K+xLfxtUgI7YHqKlqHK8HbCCXgjHT1cAdMlDetv4FnQ2lLasaOl6vmB0CMmwT/IPszSueHQqv6i/qluqF+oF9TfO2qEGTumJH0qfSv9KH0nfS/9TIp0Wboi/SRdlb6RLgU5u++9nyXYe69fYRPdil1o1WufNSdTTsp75BfllPy8/LI8G7AUuV8ek6fkvfDsCfbNDP0dvRh0CrNqTbV7LfEEGDQPJQadBtfGVMWEq3QWWdufk6ZSNsjG2PQjp3ZcnOWWing6noonSInvi0/Ex+IzAreevPhe+CawpgP1/pMTMDo64G0sTCXIM+KdOnFWRfQKdJvQzV1+Bt8OokmrdtY2yhVX2a+qrykJfMq4Ml3VR4cVzTQVz+UoNne4vcKLoyS+gyKO6EHe+75Fdt0Mbe5bRIf/wjvrVmhbqBN97RD1vxrahvBOfOYzoosH9bq94uejSOQGkVM6sN/7HelL4t10t9F4gPdVzydEOx83Gv+uNxo7XyL/FtFl8z9ZAHF4bBsrEwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAHVJREFUCB1jYGBgYPz//z+QYtDas2dPAIgNwkxA4n9YWBgzUGL2lStXZgBpDZAqsKyiomKqurr6/8DAwP8nTpyYCtbByMgoys7OXiEhIcFw7949ht27d0cC1Tsyy8rKVvLy8vozMzP/ZWVlZbxx4wankpKSOABsNy1XjAAkvgAAAABJRU5ErkJggg==", "up-image", "iVBORw0KGgoAAAANSUhEUgAAAAYAAAAFCAYAAABmWJ3mAAAEJGlDQ1BJQ0MgUHJvZmlsZQAAOBGFVd9v21QUPolvUqQWPyBYR4eKxa9VU1u5GxqtxgZJk6XtShal6dgqJOQ6N4mpGwfb6baqT3uBNwb8AUDZAw9IPCENBmJ72fbAtElThyqqSUh76MQPISbtBVXhu3ZiJ1PEXPX6yznfOec7517bRD1fabWaGVWIlquunc8klZOnFpSeTYrSs9RLA9Sr6U4tkcvNEi7BFffO6+EdigjL7ZHu/k72I796i9zRiSJPwG4VHX0Z+AxRzNRrtksUvwf7+Gm3BtzzHPDTNgQCqwKXfZwSeNHHJz1OIT8JjtAq6xWtCLwGPLzYZi+3YV8DGMiT4VVuG7oiZpGzrZJhcs/hL49xtzH/Dy6bdfTsXYNY+5yluWO4D4neK/ZUvok/17X0HPBLsF+vuUlhfwX4j/rSfAJ4H1H0qZJ9dN7nR19frRTeBt4Fe9FwpwtN+2p1MXscGLHR9SXrmMgjONd1ZxKzpBeA71b4tNhj6JGoyFNp4GHgwUp9qplfmnFW5oTdy7NamcwCI49kv6fN5IAHgD+0rbyoBc3SOjczohbyS1drbq6pQdqumllRC/0ymTtej8gpbbuVwpQfyw66dqEZyxZKxtHpJn+tZnpnEdrYBbueF9qQn93S7HQGGHnYP7w6L+YGHNtd1FJitqPAR+hERCNOFi1i1alKO6RQnjKUxL1GNjwlMsiEhcPLYTEiT9ISbN15OY/jx4SMshe9LaJRpTvHr3C/ybFYP1PZAfwfYrPsMBtnE6SwN9ib7AhLwTrBDgUKcm06FSrTfSj187xPdVQWOk5Q8vxAfSiIUc7Z7xr6zY/+hpqwSyv0I0/QMTRb7RMgBxNodTfSPqdraz/sDjzKBrv4zu2+a2t0/HHzjd2Lbcc2sG7GtsL42K+xLfxtUgI7YHqKlqHK8HbCCXgjHT1cAdMlDetv4FnQ2lLasaOl6vmB0CMmwT/IPszSueHQqv6i/qluqF+oF9TfO2qEGTumJH0qfSv9KH0nfS/9TIp0Wboi/SRdlb6RLgU5u++9nyXYe69fYRPdil1o1WufNSdTTsp75BfllPy8/LI8G7AUuV8ek6fkvfDsCfbNDP0dvRh0CrNqTbV7LfEEGDQPJQadBtfGVMWEq3QWWdufk6ZSNsjG2PQjp3ZcnOWWing6noonSInvi0/Ex+IzAreevPhe+CawpgP1/pMTMDo64G0sTCXIM+KdOnFWRfQKdJvQzV1+Bt8OokmrdtY2yhVX2a+qrykJfMq4Ml3VR4cVzTQVz+UoNne4vcKLoyS+gyKO6EHe+75Fdt0Mbe5bRIf/wjvrVmhbqBN97RD1vxrahvBOfOYzoosH9bq94uejSOQGkVM6sN/7HelL4t10t9F4gPdVzydEOx83Gv+uNxo7XyL/FtFl8z9ZAHF4bBsrEwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAHpJREFUCB1jlJWVbRYSEqrh5ub++///f6a/f/8ytrW17WB6/PjxpJ8/f95jZWVl/vbtG6Ovr+97Z2fnLiagqtdAiY4XL14wKCkpMbi6ui5nYGDYzwCUYAgNDWUGco5OmDDhBZCvARJjYQQCIOMvkErV0dFRAyq4AcQMANdZOCvimbEfAAAAAElFTkSuQmCC", "down-image");
}

), new objj_method(sel_getUid("CPScroller"), function $CPTheme__CPScroller(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", 21.0, "minimum-scroller-knob-size", 9, "default-points-per-scroll", 15.0, "scroller-buttons-width", 11.0, "scroller-buttons-height");
}

), new objj_method(sel_getUid("CPScrollView"), function $CPTheme__CPScrollView(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", 15.0, "scroller-thickness");
}

), new objj_method(sel_getUid("CPSegmentedControl"), function $CPTheme__CPSegmentedControl(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", objj_msgSend(CPFont, "boldSystemFontOfSize:", 12.0), "font");
}

), new objj_method(sel_getUid("CPToolbar"), function $CPTheme__CPToolbar(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAPCAYAAADd/14OAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAU1JREFUKM9jsLS0XGFmZib1//9/BnyYwdfX97+7u/suCwsLHbwKExMT/4Owt7f3eSsrKzecCrOysv6XlZX9T01N/e/v7//E1tY2wcTEhAVDYWZm5rGampr/FRUV/4Hs/yEhIZ8cHByaTE1N+VAUxsbGcpWWlh6rra39X1VV9T83N/d/RETEX2dn59nm5uZKcIUgAuhGTqDiwyDF1dXV/wsLC/8DDfjv4eGxG+huR6BTBOFGAxXzAN36vK6u7j/IKSUlJf+TkpL++/j4bLUBArjCoKCg3oKCgv8gU2GKgfyzkZGRIU5OTjJgRUBGb0xMzH+g9WBFIMVA07cBQ0IP7kaQoqioKLC7QKYA8a/i4uLpQKdIovg6PDwcrgjokU9A6yqApnNihGN6ejpYUWVl5T1g0EQBNTLjjBlgYJ/LyMiwwRvXycnJe4CO1iGUegAs+F709mxc3QAAAABJRU5ErkJggg==", "overflow-arrow-image");
}

), new objj_method(sel_getUid("CPDatePicker"), function $CPTheme__CPDatePicker(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAJCAYAAAD+WDajAAAD8GlDQ1BJQ0MgUHJvZmlsZQAAKJGNVd1v21QUP4lvXKQWP6Cxjg4Vi69VU1u5GxqtxgZJk6XpQhq5zdgqpMl1bhpT1za2021Vn/YCbwz4A4CyBx6QeEIaDMT2su0BtElTQRXVJKQ9dNpAaJP2gqpwrq9Tu13GuJGvfznndz7v0TVAx1ea45hJGWDe8l01n5GPn5iWO1YhCc9BJ/RAp6Z7TrpcLgIuxoVH1sNfIcHeNwfa6/9zdVappwMknkJsVz19HvFpgJSpO64PIN5G+fAp30Hc8TziHS4miFhheJbjLMMzHB8POFPqKGKWi6TXtSriJcT9MzH5bAzzHIK1I08t6hq6zHpRdu2aYdJYuk9Q/881bzZa8Xrx6fLmJo/iu4/VXnfH1BB/rmu5ScQvI77m+BkmfxXxvcZcJY14L0DymZp7pML5yTcW61PvIN6JuGr4halQvmjNlCa4bXJ5zj6qhpxrujeKPYMXEd+q00KR5yNAlWZzrF+Ie+uNsdC/MO4tTOZafhbroyXuR3Df08bLiHsQf+ja6gTPWVimZl7l/oUrjl8OcxDWLbNU5D6JRL2gxkDu16fGuC054OMhclsyXTOOFEL+kmMGs4i5kfNuQ62EnBuam8tzP+Q+tSqhz9SuqpZlvR1EfBiOJTSgYMMM7jpYsAEyqJCHDL4dcFFTAwNMlFDUUpQYiadhDmXteeWAw3HEmA2s15k1RmnP4RHuhBybdBOF7MfnICmSQ2SYjIBM3iRvkcMki9IRcnDTthyLz2Ld2fTzPjTQK+Mdg8y5nkZfFO+se9LQr3/09xZr+5GcaSufeAfAww60mAPx+q8u/bAr8rFCLrx7s+vqEkw8qb+p26n11Aruq6m1iJH6PbWGv1VIY25mkNE8PkaQhxfLIF7DZXx80HD/A3l2jLclYs061xNpWCfoB6WHJTjbH0mV35Q/lRXlC+W8cndbl9t2SfhU+Fb4UfhO+F74GWThknBZ+Em4InwjXIyd1ePnY/Psg3pb1TJNu15TMKWMtFt6ScpKL0ivSMXIn9QtDUlj0h7U7N48t3i8eC0GnMC91dX2sTivgloDTgUVeEGHLTizbf5Da9JLhkhh29QOs1luMcScmBXTIIt7xRFxSBxnuJWfuAd1I7jntkyd/pgKaIwVr3MgmDo2q8x6IdB5QH162mcX7ajtnHGN2bov71OU1+U0fqqoXLD0wX5ZM005UHmySz3qLtDqILDvIL+iH6jB9y2x83ok898GOPQX3lk3Itl0A+BrD6D7tUjWh3fis58BXDigN9yF8M5PJH4B8Gr79/F/XRm8m241mw/wvur4BGDj42bzn+Vmc+NL9L8GcMn8F1kAcXjEKMJAAAAACXBIWXMAAAsTAAALEwEAmpwYAAAA5ElEQVQYlU2Ov0rDUBxGv+/ea5PbiIMKDZFsDk46iM5BH0DrIrioWRwrZHPLQ/goznkHO4vgUsQOpR20vX9+LhU88zlwICIAwKqqjIhARGDtdpkXe8+mbVslIhGAJ2mKonzIi51HrfU+1yXyPD+32eZTkqRnvSSFdw7sZdnhYHcw6vftdZLaTCkFEN6tVsqcHp8Mf5bLGlCIMQhIR2AjakNd39+Nqc2rD66IQUqQWilCRER3Xfd9Nbwcf04mL/PFYua8PyDVVoiBBKBFJGBN0zRHb+8fo6/p9ObvliTVf+m2ri9+AZpHXcHKEf6jAAAAAElFTkSuQmCC", "left-arrow", "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAJCAYAAAD+WDajAAAD8GlDQ1BJQ0MgUHJvZmlsZQAAKJGNVd1v21QUP4lvXKQWP6Cxjg4Vi69VU1u5GxqtxgZJk6XpQhq5zdgqpMl1bhpT1za2021Vn/YCbwz4A4CyBx6QeEIaDMT2su0BtElTQRXVJKQ9dNpAaJP2gqpwrq9Tu13GuJGvfznndz7v0TVAx1ea45hJGWDe8l01n5GPn5iWO1YhCc9BJ/RAp6Z7TrpcLgIuxoVH1sNfIcHeNwfa6/9zdVappwMknkJsVz19HvFpgJSpO64PIN5G+fAp30Hc8TziHS4miFhheJbjLMMzHB8POFPqKGKWi6TXtSriJcT9MzH5bAzzHIK1I08t6hq6zHpRdu2aYdJYuk9Q/881bzZa8Xrx6fLmJo/iu4/VXnfH1BB/rmu5ScQvI77m+BkmfxXxvcZcJY14L0DymZp7pML5yTcW61PvIN6JuGr4halQvmjNlCa4bXJ5zj6qhpxrujeKPYMXEd+q00KR5yNAlWZzrF+Ie+uNsdC/MO4tTOZafhbroyXuR3Df08bLiHsQf+ja6gTPWVimZl7l/oUrjl8OcxDWLbNU5D6JRL2gxkDu16fGuC054OMhclsyXTOOFEL+kmMGs4i5kfNuQ62EnBuam8tzP+Q+tSqhz9SuqpZlvR1EfBiOJTSgYMMM7jpYsAEyqJCHDL4dcFFTAwNMlFDUUpQYiadhDmXteeWAw3HEmA2s15k1RmnP4RHuhBybdBOF7MfnICmSQ2SYjIBM3iRvkcMki9IRcnDTthyLz2Ld2fTzPjTQK+Mdg8y5nkZfFO+se9LQr3/09xZr+5GcaSufeAfAww60mAPx+q8u/bAr8rFCLrx7s+vqEkw8qb+p26n11Aruq6m1iJH6PbWGv1VIY25mkNE8PkaQhxfLIF7DZXx80HD/A3l2jLclYs061xNpWCfoB6WHJTjbH0mV35Q/lRXlC+W8cndbl9t2SfhU+Fb4UfhO+F74GWThknBZ+Em4InwjXIyd1ePnY/Psg3pb1TJNu15TMKWMtFt6ScpKL0ivSMXIn9QtDUlj0h7U7N48t3i8eC0GnMC91dX2sTivgloDTgUVeEGHLTizbf5Da9JLhkhh29QOs1luMcScmBXTIIt7xRFxSBxnuJWfuAd1I7jntkyd/pgKaIwVr3MgmDo2q8x6IdB5QH162mcX7ajtnHGN2bov71OU1+U0fqqoXLD0wX5ZM005UHmySz3qLtDqILDvIL+iH6jB9y2x83ok898GOPQX3lk3Itl0A+BrD6D7tUjWh3fis58BXDigN9yF8M5PJH4B8Gr79/F/XRm8m241mw/wvur4BGDj42bzn+Vmc+NL9L8GcMn8F1kAcXjEKMJAAAAACXBIWXMAAAsTAAALEwEAmpwYAAAA50lEQVQYlTXOMUvDQByG8ffuf3cx6NJQMEQq1lpRCkFRcc038BsInZ2zZ3LLUFA3V8Fv4KKrs7O7pOBom5zivS72mX/DgzTbuo3jZEASJFEUhQGgSAJ7+wccjsbvWTa4AmBWqKoqrQ4nOY21+PYdvO9e2sXXddM0zwCgJvnRr3UugDAhBPiuXSyX7eP8cz5T+fEprbUk8APSai0KCFiLosqISBARRSgnWmN9I35NN9Ob8e7Ok9Ei2roIxshHP+ndnZ+d3Jdl2QCAiZzz/aT3MBpuz+q6fsN/SinB5XR6sdonCQBCUpHEH8nCXnoQx8OdAAAAAElFTkSuQmCC", "right-arrow");
}

), new objj_method(sel_getUid("CPButtonBar"), function $CPTheme__CPButtonBar(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", "iVBORw0KGgoAAAANSUhEUgAAAAsAAAAMCAYAAAC0qUeeAAAAK0lEQVQoz2P4//8/AzIGgv8wjCE3SBQjSxKBaaX4PxpAczOq3CANZ3zOBAD2LyPrrDPrsgAAAABJRU5ErkJggg==", "plus-image", "iVBORw0KGgoAAAANSUhEUgAAAAsAAAAECAAAAAB9kZovAAAADklEQVQIW2NgIAL8RwAAQe4K9jsMoRAAAAAASUVORK5CYII=", "minus-image", "iVBORw0KGgoAAAANSUhEUgAAABYAAAAOCAQAAACBOCRGAAABJ0lEQVQokWNggAFmIO5n+A/EDAzcDHiAJEMD4wEGVqBSEORj72VYh1Mtxy6QIqBysGKWzWB6Dw7FpVuhZsIhxx+juzgU//esvc3wX+dj3/W3hyde0/nI8afo5v9W7Gr7IabV7fnv/p/rv2vdHqj5/WDZaVBeBdRgCLztD+FeC4A7BwhuVvH+Yvgv8+19HFgy7jFEijcFopg/FcIHioNM4q2/xPB/9v7/LBCDs//vT3nI8lf4OkM0MITjgfR/4/c/DvzPhmj+Fpjw6L8FwtXHGP8Cg+4fcngw3oR7n+l/FpIPTe6BpIOfQZSBQobzj+EzXEHX6v+8/M63Moji/yG1t12eferDoRiovPxdzH9mkFdB3vofsnzWf1acioEKWCBehXjrvwY2NQAEI6SNiWcsuAAAAABJRU5ErkJggg==", "action-image");
}

), new objj_method(sel_getUid("CPColorPanel"), function $CPTheme__CPColorPanel(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAHQUlEQVRYw8WXfYwcZR3Hn5nZebt933vbu0sL7Xny0lILRCWtWk1jqpEEDOBrU2NJDYiBGiREQ9JYwx/8gZQEbTHRQsSoDbFKTMSkWBpCwMar7RFb6bWV3vV6L7t7u7Nv8z7j7/c8z8xOK5DSkLjJN8/s7Ox8P7/v7/dMdkXyf36JV3LRV8wvCndbG1Z+z9py5w5n3Z4HvNWHHvbLp3/sD1f2+MPV/f7wmZe8VYePOGt/NmV9/p6zzm2rKtYW6UMB2GhvvL4qVh+7kJp5+Zj6+sE5+dxDbamxORTJhChKA5Io9UuiMB5Kzc+G8vnv+urrBwRp5pAgVn9iWZ+46aoBvmTtSH3Gvn37rDT/4pTyr90tybwhTQZIgYySDCmTNBkkffCeCY+HQSNEh1UTndWafOqHKXH+oF3d+KB59gt9Hwjg3vbjhVlpac+k8vYvWpK7Jg83zZEhuHmBqCQPa55opEjfJ6XR86ghooZlIrmdccU58XTKm9nbOfHV4SsC2NX8TeGUMvfMdKr6QJYMS0NkJVQ8SBRAUKhJMTaPjpkK8YqAKTdPSBc8zRxJdd/ZJlvTz7b+vrP8vgDP1l+R31TO7Z6UF75ZgphRWHmeVl+i1auXGBWpkhAIpoRgbqEyoCKoROTlk3fIxuQTjTd/mnlPgBPy/LYj6sX789S0DJUPUGUhgQzpB/NcIuZCQvmEckS0c1A5mmdBaQ4D7btwdKu8PPWddwXY2frL9X/V5r+fIsVUEXqehorTYJoFAEwhR4esRFuh0lkoxkomIPtoBgAIQQEyDMKGJExdVM+88mD7dztuuQRgl/GadC7VvWtWEtcM4hTDzfrAHCc8zZXlaajxICaHr8AHM0cEB825aSRTB2mEuP1Eml+8JlU9v7V54BH6nBCfMI5roaCPTin+t3Qw0MEYpUG1fVT9NH5sAyaByfTiLnJY1gbZg+pNqLobAcDu64LMPgbR1Wgq8vRbXxM6wkcowKP59dacFNyyIOoTBTBS4jhLVHqcBAIwaXHV0RBCKmEBKs/y2EEmAHR55WjcVUEKpAAzcqE2Ii3NbYhbMJ1KbSbcVIZVoRNfSkCwNFgrhiiMetkQSl6OVR9VHlWMpqgOqC3DCiDtFJFOT2+OASpS3xqsWoKbpbhkrmjgIpA03xV6YisqWD1W3eVVo0lH42bMkLTAvIUQEr1GulC9MQYwhPxK9TIAdlyMFSWDoBk6FwPUHL8n4uChuaWzqGm1qZ6aCCAxc0OiYMJcezgGCIRcEQ2FhMSEpEQqCgVhuwQTUbwsr1pmJk2JrS2RqSmARKySkAZhK5wTGkG69xxA8quUEG0xC2SjIAFLZedMlcm6XPy6CEBohoZP6QgJk4JzAcjn8kAOqg73XWZyMGIcOge2ngtp4DD6oACOA1jxsRxGa4GtcD4khW4MkDeCWbypBwpAPj/2uCkeR8Y2mHZr0M4K+MI5C7+Dw4VtoCAoSNcFIGyPl+lB+XAc5OnnYWakEgMMdPyTFjeOQFy4uc3f25ExqAPmzSVWfQTgNLDfOPU6e/DYqDQDQSGEm+4BwTVB/4pTMcB1nn84RJNkzMvM3Fpmwqq7VfCpMAirydtQZyB+U+YQGk+DJ4IgCISJoDiQ99HrDscAKyXvH4Pd4LxRvdTUqjETNGyj+RKvnsNaXCam1YDpbuGe13kSOnsYIUQkbA88D4LCaMVfUX4tBnDawsxNkvMCmpjc3OSRY9UdFFTe5NXbRs88hoBznsFTQLW1Hkj0ZMTV0Ii7duJF4qhnYoDHN+X8a1X/wJjvn60usr7SyGvMkPadx49mdpNVjddFLbAM1pawqTLzdqIduKJ5TSHBYHnRX9H/XPaprzuX/B74+e2Zqc1D9tPQ+6C+2Bu4VpXF3uLnHIPFb/PoowSilrj4pIsh+KMYIZq4U7TQ/vT4M+nntx59119E68rur24btJ9vLEBSS6zvuN2w9wiClaPi6OtcjV4K+HmAAC29l0ITVFOJs37sD+7a4t73/En20JZC59Zr3B/d2O/+qXaRkPo867sRDR6vPo6+/r8QOAuOAbdtAERTpz1Hc2+8dMhbm3sk/9inau/7q/jJ7dmFiRH3vmtz3gsGJLE0A4XAV5wm256xWb0HYiZnocFmwceHUwUAlnXij6YPequ0HelfbvjPFf0v+P3u9MLYkHffunHnBzoJzjfmEwNo9HqfnAE6hHx3mHCtvSCQQFYW3DXqLn8sda/+55vf+UD/jA49p3feeFl9cnjA//INE+4eVQwuGjCIOB/tRbY1o51CBW3qAqgJn1thWLVWe3v9gfAO5ejAbvXV8fpV/zc8Nqn8s78UPDo65n1u/Sed7UMj3q81PTgWuOFF3w4Nz6KaD9TgOCl7vxU+7twfjvqbglLwsPKWevRD+Xf8x79pzkuT6ul9h9X9+/8tb9s3K936VEUc21URCzurYuHbNXH0zlnp5k1vy9/42BF13/hx+eTgq6p5Jff+L6Dd6W7yJbiGAAAAAElFTkSuQmCC", "colorwheel-toolbar-image", "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAGzUlEQVR4XsWXW4wcxRWGT/Vtunummdldr722ZewQxziSIyWBp4jECuANa/NAhDA8RM7FSiSTCHgJyovNQ14sESElCCRHJCgE5YWHRMImscMiBxKsJCiRAjLCF2LjRLu+rHdndqZ7uru6Kud0HUrOaDGSX5jRp796anf+v06drpkRWmv4JB+C9brszmbExdc/2DKm4y8Nyyt3eTrb6ul8KlI6iQFEU0C/4zbmExGd7rgTryWN4RuhjE/dN/13eT1zrfXHB9h2bNttXlnsycqr9wmnf3MLAG4CH/GgCQLoOgaNY4lKKPCyeH51c9XLYw3v+R073j1xQwHuePPrfrc799h8fu7h3Fnc1IEAxiGCNvho6hAjARSZc4gMIsjBl8lcQ615LlStJ+/c/dfllQJ4K5nvOvbdyZOL7zw9Jz94wHOk04IOmgT49PHpohoaABBYqhqfoL/UJbjVYK1Mz+5Py9VfPPrLO/d97TuvXRj1clgt3/7Dgcl/53Mv/LdaejASHacNk/W6PYjQvIm0ICB4TIyOCbeKAfIOEoPqX9w17J5/8fAz92+8boAnTvwi+Fdx7qen9cI9CYxBC4nr1bfRJEGD+P9CNJjAYM19jeZFEwkByhaSgOhe+Ipaeu+Zw88+3PnIAP9cOPPY2/rybmM6BhG2WohgBZAEPIjZhINY+DVWUcZsHpEiHOjiezv14pnHVwxw/5GDt/1Nzu9zRMulPQ/r1SW1cVwH6NBqr90KS2AVS6/QrGSKCDVkWngdCHnuH3tf2b9rO9uaJvzmkZ95p9SVb1xxxKYJoH4HNCM0BlGIxnFV49M/1W3mIQIBvNKoEilBSA/NHDQTqICqAXKFKgGqBNzFK6urYH7vkSce+gsASOeRP/0mBif81JnB8u4AbqK9ZniPaRtMFRCqDM3FDPeCbbwmmkWGsoGmSM5aBDhGygiG596/183F5+xJOPPKs9+alXPPd/i+biJxjbYaASBUBYWq6oOohaAlUkGkJTh5DpAigyFAlqIiKWmG2kcdAPSRxQXwtm3/4cyhV39Sb8GFSk1DvY8CXN4XHwks2mwHQyH8uvwub0EFjioBCi59SWWXTGkY+hjKwzHq0IXq/H/uAgAToKu9W835BuAyHqtvsEFCAETzoUMBBPhaonGORoAoNCDTgJRMyRCV8BCnnqsudzfbJhzoaMoXYAM4jDuCxyGiOoSCBpkjQhbGvKiuWW2B6hjz1CFjuqaxme9nYzaAVmHiuK79YBAjODaAxR7DXlUZ82FhTCzCaCqM6UAgYBRf04UObQAoA4DKhRt5CApQSPMeEikLxAcorqEk7JgBsAEwbV8BJFwC0MBoo4qpEMkUmptVuODRbVbirEQqBaAQbfUatEHV75LbAM2huLgkYW0lrJmlItBMCkSb4DlPep5pUFf6IIrAVEIipTRhFAcilEYqE0AW4ETBkg3QLsXpSyl8XvHqauW7SQIqk+O1QwvBVEKYigZUCUweUIBcEhyiMkjJISqExro+nMSaVWdtgJuFO3u6Xz1QCpxnM8nmBeJpNkeAqxl45rbPaV4h0gWHbz0gLSXD1ZChCSEpTAjuho3H7YfR2obzRtIfXkp7ON/HAMto3EdQiSGBcxkWLUVorhxYoCDtU9fTIRMgDROiCPhIZiSSuVA0O11natUfbYBioE59uhX9NuuxMZvnfaRHmAApjZfZdJQUoBrQYRMgPmKDcADWQQDBpo3HdOm/bQO8+OguuS72fzVRVXO9JVoNGbExKptD1uXVZhzSYgKUiE4/rIJvyDlEibrsQdVuL/lT44d2vvTjoe0B4nc/uufEzOOHfz77jjqA/oKaTNR7zs2M0CP0+VZ3TQ/4gCi85uPAKx2EjLkpM+6JtCDV7u3rXpg5emB2xW9En10fPrV1DF4eLAKkXVo5gpoRPVohY/ed4DFvQ5lxFbKAYHNk2Qd9y+Rxf/PEwY/8SvbUo3f3bl3nPLKhrV/vXQXoU5DeaOONlH4khFE6djnEwJjD2vZb0eZVP5h57vtzKwdgXnry3vMbJv09a5ri9ykG6F4GyJbNyuXABjGmTM6K2B5RmQfQRfN+AM5483i0vrNn+si+k9f/Ws4c//XO81Or2w/dst4/GIC6RFuSdY2xRHLb/SPlT/k1+ttFAcr1Ft2NzadbazoP7nhz77s39Ntwy5ZXvxxU+feyhXSnlzXGExeg7QEkSAvjNwHRALFELVErgCAsexPjjaMdERyafn969sZ/GzJ3fOFYqAZi60Ss7h4uFF/1Mv0Zv1TjTa3D2ATIk4ZztR06Z9vj3p+TNDi6vtM+uf2t2wcf9+P0E/95/j+Z5cksdC7U4wAAAABJRU5ErkJggg==", "colorwheel-toolbar-image-highlight", "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAElBMVEX///9ycnL////1AAAq/wAAAP9LuqjfAAAAAXRSTlMAQObYZgAAAF9JREFUeF6djsENwDAMAr2C2YCs4BWygvdfpUorxVF51Or94AFnv3B/RdAPDAMcBQ0BRtEoZENexEPl/AY8xBZgic0FOB8ahWzIi3ionRdgie1lGnIDZjYK2ZAX8fjmAnTrM80J8Uf9AAAAAElFTkSuQmCC", "slider-toolbar-image", "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAAD///9QUFCysrKrAAAdsgAAALK1Th7fAAAAAnRSTlMAAHaTzTgAAABmSURBVHhejZHBDYAwDAOzAivEG7grdIWu0P1HQIBUF/wg97yHc1Li+FAQEZmxkwnmRqCBTTDQwS4Kwjb8ijrEW+YNuIVdgAobF+B4KAjbsCvW4XUpQIWtZQbmApyzIGzDrljH/7NP2V9QOcU6+SgAAAAASUVORK5CYII=", "slider-toolbar-image-highlight");
}

), new objj_method(sel_getUid("CPColorWell"), function $CPTheme__CPColorWell(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", 1.0, "border-width");
}

), new objj_method(sel_getUid("CPDateField"), function $CPTheme__CPDateField(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", 2.0, "border-width", objj_msgSend(CPFont, "systemFontOfSize:", 14.0), "font");
}

), new objj_method(sel_getUid("CPAlert"), function $CPTheme__CPAlert(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", "iVBORw0KGgoAAAANSUhEUgAAADUAAAAuCAYAAACI91EoAAAHQElEQVR42tWXa1CTVxrHu+MMO93hU7/t8JWZnVl3VrutsgEUaF21skuVlmpBXAVEUFGk3IsgoEVb09qii6tCRVfxjmC5ykU0iHIz3AViuIabEIEEkjdvkv8+ZxmZZgQ2AZWEmd8cnsM5z3l+vCcvD++8rS9Z8ZEPiHfpW8v/6i06LCAUg4/PgkaOcLN0ofeIkYn+agAKqIabXorZWqxUV2FCypgkD0AH0UQ8w3hXCboLE3IsUogKX05ooW8AdLeh5y8A2psAxHhem87EXC1OqrMgXqToKQBAQtwPxDGwEfprmHxeCvq5hJ6kleVcu4J4z+H6SwBKAc0p6NVJ00DzE4BCyFtuoiP/UJRlPKH8Q9YdeXEytZyE6MrpJ48SR34FE0sFrxKB1ilpvY3ZS1GhSfKnNwDdHWBSCL0y8VUmvgW0tzAqycKz3NjLZi0kzY21JTgdLwJUKdApEon4GUgg4ZMA7qOvIgW0x9FspSS/xOaMSrMAzVXoxo9ANxY3B4mA+gIUsjzQPvGznNglZih00LWv8hygK4J+/Dh0Lw4SMXOiHzsG8LkYasgA7Q80K6H2OzFWbdkxEuVgPqA8C93IQSLaCGIAxb/AjZeA9g9QHmuzkWrJio4aaswA1LehkydA+zzCWEjsEKC6iqGmK2jN/jrJLISeZkXbtNyOVmoURcALIbSDEUTYNJr+UFxJ9cbReA82spjN/4pw6OXHoFMVgXJxxOL3hU2ZkSnDrdcBRRq0A5HQ9ocYkHbSE/YOTtNQzOYNGYig/WcxIrmB5syoxe0LmzMjlxNaqPOgH4qHVnaACDbAd4e7gRTFr6xh+3SDcYAqG90Vp0E5F68vbLwZIZI/uwm8OAG+9wD4nqBX8PPZbCBF8UzraH8wMPIdFLI7oLySplsRVosgFO7Zw17hisvQ9oaD79w9I+GhOwykKJ5tLeUJBcbS0C++iPobYW+3L6y/HmZddy1MpuzPBAYSwHdQUdKAGUn+fq+BFMWzrmV59H2x0MgzQfmVdM7b6wvrroUm9YkvACPJ4Dv3QSPZOSu3LgUbSFHM5mdHugcYFmKw8RKeXP3q7fSF4qtf2RKcdjQD2u5QaNr9oGnzmZXy3P0GUo/yg9n8HPhC23UAGE9He/Fx0Flvvi+szQjJGWpKBwYOUwH0m326fU66qw2luqv2sfm5afUFZLGQSy6CzhM/uRLy5vrCmoxgV8k9ISBPAd8eCE3TNsJ7TrgWfzg5uTAhNrKYzf9f+LZdwPAJdD46BTrX940IVV/eb1V1ab9kVJoKXWcouMat4Bo8jcALnp6fMik2sti4fZRfJ92Pid5U0LkyOv/194WP/xMU1V2ZPHXtmreDq9tsNOEhW5gUG03ax24C+uLQU51MYvteb19YeTHI5vGFICXXfwq6tgBwYjr0iYfRJH/3TybFRhYbj/gLaJ/6QTuUDKqBI15fX/gwfc/l3tofga5QqElIXeNuErfOT0nRyGLTePIF0BmCPvGPqEjf+3r6wor0Pcvrs6OBoaPgG72hrtpEbDSJrgo/3L4ejJ7HO03ey87T1HsBg4fRcjcRVM/C+8Lyn3eLBuq+ha7VH+pKOuTRP0yGq/WAps0fXM3nLDadyk+ho2sobxWC6pE8PL/bagFCgZ6tJQlATwQ01XQVHm5YLOj8TUBXCKTlSXiQFjC/vlCUFmD9IDVANtb+DbT0GlaVfwKVaP3iQefzdVug7k4A1aWk+kzvCx+k7krqKE8EJIFQV/wdqvtr58Vo8VoEbp364+uzxRnDhWx+npRvgJ66mO7Kwyg7529aX3j/nL8twfG90dDUbKSEa6Aq+3heXBd+bNAmXUxi8/NlDTRVbkBvKMRZYaAaje8L753xz+mpioO+2XtKqNRl3uSfdzOQyjzjtqB8TE7XsBmDdbGgOsVlZ/2XGCG007UhJwzo2ksf0PWYLHHCZPECoCctPPY5tnqtxzcJ7pio+YzNLwi1aC0g3YXmwkhQvZ5zCpX+28+q5LSfZLgxEnztxqkkd1ctjKJV0LR9Ce0A+3/Ji+LVC89JOfhqN4w2h4PqlVHds/eFxSk+UW33IoG2bVCXuWCy0MFsUZc608fjS0jKIknMN2lmodM+NkUpPkqVJAiainWYLLDHZL7AfKH6uPI14Dv2gGrniFf6wt8UnNzxk7Q8HPoGd3rEJJRnZ/5Qnfo61oaFg+pPZx7TQkuXeizJ/sG7eKg2CFqyn8hbiYlcC4Dq5B98hBfi3bhzwruKefxPzMPDY8mKFc7WpyI3CquvbQUncgXKXCwGnjqN2hteOP31pjPMg/m84+zsbCUQrP79Bys+dInyW/PL8QOfKL8P2QBLQRiyQRXj/7e7jvYr1zEP5jMtJXBcvXLZ+x+6L/3Tsm1/XPrn7ZYCq3fZ+3/57K8Oq+xeSk1fP3t7JxuBwNnW0dHpDw4Oqy0GVi+rm9X/8vpNvyjs7Ox+KxCse5dMf2dpsLpZ/S9fFP8FSEOu9biiCiIAAAAASUVORK5CYII=", "warning-icon", "iVBORw0KGgoAAAANSUhEUgAAADUAAAAuCAYAAACI91EoAAAIuklEQVR4Xu2Za4xdVRmG33329ZwzlzNnbp1LLzDt0HaAFgbBCTXcGksaQeCHGkC0AWoLCDExIAmR1D9eYqWg0sYGKZY2VvyjUqtFA42jpFh7EzrQ0nZm2jlzOff73muvtbeLnZVS509n7zOD/PBN3uy1k3P2rOe83/r23rMkzLKe2HWiC8BNwldxX8Y9Dx9rVPgo9wHuwefvWz6BWdSsQH3z1Xc1APdyfz1qqDfNa4qgLRZFfViHoavQFBmu60KSJJg2hUUoChUTU7kyJrMVVCz6JwA7fnr/lXs+FVCP/er4egDf7e1q6lrY3oRIREfZZCgTxgEcWDYDdVwOBQ4FqEoIuhxCWJMR0UKI6goK5QqGJ7I4M54/C+DZnz1w9c7/CdQjLx9ZDODXSxc09y+cFwdDCNmKjaJJPRgOwg04/MiHFxSSADkkcQMqP+pqCA2GgnidBodSjIxncGoscwDAAy+uu2b0E4Pa8NK/bgewq/+K7ng8Vo/JvIkCh6kSR6SCGUqkJ0sIqzIvVxnzGg2kMnkcPpmYAHDPtgf7355zqPXb33kMwJYbV/TINhRMcKCqxTyYWqXw5KKGgo6YAYeYOPjeMAHwjV88fP2OOYN6cNvb31m+qP377S1NSFUYUgUThDozSMZfcroqo63BQKMuYTyZwclzyUde2jCwddah1v188N6e7pZd8ztaMVYgyJcJbA40V9KUEGJ1GuZxHzg0xAB88eVHV+2dNaivvfDWcgCHBq5ZFp4sU+RLFtgMy40xhrHhUeTSGcSa4+hatACyLGMmUuQQmuoNxHXg4NH3s5Ck/lcev/nsJb+HS+j+5/4qM0p3r1h2eThZYcgUqmBs5gmNvP8+ruuU0XdNF94byeGfQ0NYtGzZjH+QVI4BsQj6Fs9vOv7B8E4Aq2pO6t4f/3njkoUdL2qxZkykiqAcyI9W6lNY+9keaJoGQgj2HTyNI2Yb/EhVZXS21KMwNYnhsan7dn97ze7ASX35h3/UGKXPhBtjSHAgy7LhV7cMLEI8HoeqqqCU4vOfAQ69mYMfMcq8H7Q9FgMbSTzL57Vnz1NrWSAoapMHLlvQ2Zkt26iaFpwAbTsSicAwDIRCIW8tKZrulZVflSsmCoaKjrZ47/mJ5N0AfhsIilH6kNHQiKlcCbZtI4gyRQud7ZJo15J3zhiFXzEGZPk8WnhadPT8+kBQdz77mwW6od1QsYFq1YIb8GaUyJTRJx5mXX4cz1ZAKUMQlZmJhjoDjuveyucX//2mL2V8QVFirW1ob0OxWAG1bQSUd4N2HMcrP37EGIdklCKo8nw+zc1N8uTE5G0AXvMHRe0bZd1AsWqCMoagGs95UODyjlMFUtP1yhUL0XAU1CY3+YZyGLuCuRKIZYHVAJUqeWX3MVTRrikpwm0oqjc/32uKMedyQl0QQsSkgmmyhP9KKlmyQYNCibRpWAVjrMc3lOPQGGUMNrVRi1JFCovYCIfDKFUtpEsmapHkSLApg8Nogy+oVRufl3m8MiGiVGoQ4x6dyKGhvg7nJnM1X0+SJO+HZoyqvqAGtz7BBh7ezKhNZUoZatW5ZB7LLu/ACIejlNUORSgYJ/O/pmy7SIkd44mJNRVco8mi12wS2UqtSXm3BkZsUGoXfENRan1I7ep1jut4E6pFZ1JVnBhJ4nSyAspqg1IkBTapgNrWWd9QNrE+tC0O5ciiWwXX4NC4Z6GakyIWASXWKf9QZvVgtZj7SigSFyXzKZGqolLIgJiVf/iGMgvJfYVs43OxaDOY4wReVw5jyI8nwFOHqhto7OhCSJYDNwkpJCGXHGfl9Pm/BHlJlJfc8a1DbT1Xr6xYNPC6oukJrFvTh8XdrTibSGP73mNQWzsRRIqiIKxKmDr97zdPvb5lNQDH76sHs6vFnZVccmUo2gJC7EBpbbzzWtyzut97872eEDTWRbB5/5lAKWmajFI6AVLJ7xRA8AuF1NDffynJ+lMtPY1tbsAuuHrgSu/NV1EUr+HcfMNy/GjfyUApgZrIJ8dOTx7d/1otGwRS5+fuf7Kpu/cHcn0bqtWq77Re2LAaawb6Lrx6/O3ISTy0ZZ/fjuc9ZpFsAvnEqY2Jwd3bavlvkps6tn8rZP2rcUXvk0Nh3w+439s1CFXXceu1i/HmkdPYtOMAGGW+yk5VVLBSBvmpc+9woFdmZYMgfuXqVXrz/Dfii64yqoTVet/yB6SqMBQX6eF3i9Xk8M25E28drhlKSGm+7u7HG7t6N6v1rTAJBROPT3MJJMsyIrqC9NnjjJazD2aO/OFVAGw2Nwgi8f67nmnoXPK09hGY7cC2fXRE351Ogya7IIUkCuMfPp09/LstAMy52PWoa1zxhSdCenRTfGGfTKDCsqzZAxNNQdd1KI6J7OiQ7ZilJ/PH924HUJ7L/alo3dLb7pKjsa2xriX1rt4I0zThiKeOGtLxgAzDAKpZ5MdPT9FSen35g7feAFD5JHYSdWNh/7VqU/f2utYFfWpDK2xHAiHEN5xYO165KaAg+UmUU2PvkPTIo9b5Y8cBkLnYdJOEp58r3M3h3lvWhdTIY9HW7natoQ2uYnhrjTHmAQrI6Yl4INzeTVWyy7AKSVRSY+cdUv5J9dSBPQDSoim4wkLiPCiUAAhdZHnaWOWOSbLWobT13iHp0dtVo65Pq49Dr28BP4ekhgFZu7A7D2rBtatwLQ5STHGnQa3yEdcq7bcnP3gdDpsAUOC2BZQjLMYX7AaCEgDKRVaFFW6N2+Bu5I5zt3LHJcXokVRjKULyQk4Rh4so4Gr4WBanK3PKDBw6wgFPuJScBZDhTnJnufPcpig9ym0LUwj7ePYLLJfb4i651ExwUwAJ7hh33bS/Y4tOlhMgk+KcwKeCQrkidnEE5bamlV9BTE4XyUW467mjYmyIzwqBiRQqAqYoxqaXogC8RPm5c9UoIOAkASjGokwFuLA0/YcSdi4qK1ecs4vGmItGEeS70kyuP32il/jM//UfzD6TIRlOVE8AAAAASUVORK5CYII=", "informational-icon", "iVBORw0KGgoAAAANSUhEUgAAADUAAAAuCAYAAACI91EoAAAFpklEQVRo3sWZW2gcVRjHv+zmfjFpkt00LyZpbDfWFB+qoC/19lClggR8KZX6LBQKFYpPE1YsoTG4UhERCr77UqE10BZtRQleqCE300uabRITcyFNdnc2uzuzM+P3n56GTSmaOXM2XfhzWMj5/7/ffOecmZ0ESMHnZlerxnIUSFNRT8CvwWSkVat/vjPaefQVihx7lSJHD3kXz8N8+MDviUJNAOhAZ7Q59BSV3J4jY/QuGeNx7+J5mA8f+E34BJOGGtu3W2vo7oiGQrXkLK2SsaaTpWelhfnwgR984b+jUCN7d2u7uvdEw6E6sldWydQz5Ng2OY4jL54PH/jBF/7I2RGo4b0tWmN3ezTcVEN5dCiVJduyybYd/2If+MEX/shBXlGhbjzTojU918FAtWSu3CcjzUB8hW2+0srEfvCFP3KQh9yiQP3RGdaa9nOHGmvIWGYgXWGHHtcx7DPOQR5yka8U6tc9Ya352fZoS2O1ZyAjb9PYSop+mFl1R3z3CoZc5KMOJVBDHSEt1NUWDe+qptzyGuU8dmg4aVK+5zh1nTvvjn8mTE8dQx5ykY86UI8vqJ/bm7VwpC3a0iAHBDWfOE0HT52m9kOvuWPo5Eeel+JDMNSBelCXFNT1tmatJfJ0NNxQRVnetNl0hizLIos3shd1vPk2VVVVbarzyDuePZCLfNSBelAX6vMMxSdRtDVU7xrl0vKHQllZGZWWllIgEHDHILwlDw/UgXpQF+rzDGXhhpjYYKMcXyn5Uy67vLjFF99lvSwXLOfWhfokoIiMDb4RSiy5QmVm4luhZuO+/FAP6rIcIqlOqbgPmYsL7mMQPhhz96aV3MckO8Xttv0rz50phLL+nlXiKw+FK+JTztzMFigHy0+Br/SeUvHIQ3P3tkCVzM8q8ZXbU26bbd8y/5kny8i5noauk7G0qMQX9UkuPwUyLUrGH+yrFB8SSjwtyT2VFz8DVEiPT7tQ+t0pZZ552T2l5JRi5eIPYIyZuDJP6fuUklMKJ+D4CKVGh91Rlaf0ka7qR9/65UGa7HmLEj9eVeYpB2WTolOqWJJdfgrWfpbTR/UcDSUzNMIjvj/RJwrb8q+p0mra/8lZOnLhEnX3DdCtYLUSX/nHpJISIpafZXJAi9ILx9+nPS+9TAePvUcv9g/48nPrgWSgErYTm+GXi4GyCvYJSG/oyOHD7i/eyspKd9z3+hvSXqgD9aAu1OcZ6uMNo3dsPRFbMPO+wHJ/TVAwGHR/+WLM3LnlCwj1oC7UJ/PiJXUmY/aOrycZzKSS8nKppXjz1ElaunrZfaLAOHniA6klh3zUgXpQF+qTgXLB+rJm71hCZzCLAuXeO7YxN0e/v9tDF+ur3TE9Pe29Q+XokEWoA/X8F9B2oFyw/hx3LJGKzUuC+dpDnIdc5KOO/wPaLpQLNmDkeyeSemye37DuBNgmEOchF/nbAfIC5YJ9ZjJYijvGN9BABYPx5lf6zwEh+MIfOchD7naBvEK5YJ+bVu+4LsCK0LHNDrE/cpDnBUgGygX7wrQZjJeirbZjmx2yAaTHkOMVyCtUifh7vGTNfJm3zwzr6XOzfHVxZQN8hR3bkVZAdAh+8IU/ckReQOQXBaqMVcmqQdh5y/76J13/5g5f5fK6OqqprZUW5sMHfvAVMDUir7RYUDCuEEH1rDCr+YLtXPxOT1/66v4axZIp+pR11oPw95iH+fCBH3yFf30BWLCYe+rRT+Y3x/n2iuN8eN1xtF8cp2/Icfq3K/w95mE+fMSS8/XxApVn4V1XGs+7rGXWDGuKdYN1jXWFNcj63oMGxbxrwmdK+C6LHORlWVYxoPCsb4oABK2zllgLBXCTrDHWqAeNiXkPYRaE73oBUF7kFwXKFlcsLwBzYrlsiAJ0cQQnPSgl5qWFT0b4miLHErlFgXocZKFsBXrUU+rzLxe0aj49Rpn1AAAAAElFTkSuQmCC", "critical-icon");
}

), new objj_method(sel_getUid("CPTableView"), function $CPTheme__CPTableView(self, _cmd)
{
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", "#5fabd1", "sourceListSelectionStartColor", "#3182D0", "sourceListSelectionEndColor", "#517fc8", "sourceListTopLineColor", "#23407c", "sourceListBottomLineColor", "#3879d9", "selectionColor", "#b5b5b5", "gridLineColor");
}

)]);
}var CPApp = nil;
var _CPTheme = null;
var _CPBeep = null;
var CPApplicationDidFinishLaunchingNotification = "CPApplicationDidFinishLaunchingNotification";
var CPApplicationWillTerminateNotification = "CPApplicationWillTerminateNotification";
{var the_class = objj_allocateClassPair(CPResponder, "CPApplication"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_delegate"), new objj_ivar("_windows"), new objj_ivar("_mainMenu"), new objj_ivar("_mainWindow"), new objj_ivar("_keyWindow")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPApplication__init(self, _cmd)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPApplication").super_class }, "init");
    CPApp = self;
    if (self)
    {
        self._windows = [];
    }
    return self;
}

), new objj_method(sel_getUid("mainMenu"), function $CPApplication__mainMenu(self, _cmd)
{
    if (!self._mainMenu)
        self._mainMenu = objj_msgSend(objj_msgSend(_CPMenuBar, "alloc"), "init");
    return self._mainMenu;
}

), new objj_method(sel_getUid("mainWindow"), function $CPApplication__mainWindow(self, _cmd)
{
    return self._mainWindow;
}

), new objj_method(sel_getUid("windows"), function $CPApplication__windows(self, _cmd)
{
    return self._windows;
}

), new objj_method(sel_getUid("windowWithWindowNumber:"), function $CPApplication__windowWithWindowNumber_(self, _cmd, windowNumber)
{
    return self._windows[windowNumber];
}

), new objj_method(sel_getUid("setDelegate:"), function $CPApplication__setDelegate_(self, _cmd, aDelegate)
{
    if (self._delegate == aDelegate)
        return;
    var defaultCenter = objj_msgSend(CPNotificationCenter, "defaultCenter"),
        delegateNotifications = [CPApplicationDidFinishLaunchingNotification, sel_getUid("applicationDidFinishLaunching:"), CPApplicationWillTerminateNotification, sel_getUid("applicationWillTerminate:")],
        count = objj_msgSend(delegateNotifications, "count");
    if (self._delegate)
    {
        var index = 0;
        for (; index < count; index += 2)
        {
            var notificationName = delegateNotifications[index],
                selector = delegateNotifications[index + 1];
            if (objj_msgSend(self._delegate, "respondsToSelector:", selector))
                objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, notificationName, self);
        }
    }
    self._delegate = aDelegate;
    var index = 0;
    for (; index < count; index += 2)
    {
        var notificationName = delegateNotifications[index],
            selector = delegateNotifications[index + 1];
        if (objj_msgSend(self._delegate, "respondsToSelector:", selector))
            objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, selector, notificationName, self);
    }
}

), new objj_method(sel_getUid("delegate"), function $CPApplication__delegate(self, _cmd)
{
    return self._delegate;
}

), new objj_method(sel_getUid("finishLaunching"), function $CPApplication__finishLaunching(self, _cmd)
{
    var delegateClassName = __CPInfo__.CPApplicationDelegateClass;
    if (delegateClassName != undefined && delegateClassName)
    {
        var delegateClass = objj_getClass(delegateClassName);
        if (delegateClass)
        {
            objj_msgSend(self, "setDelegate:", delegateClass);
            objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPApplicationDidFinishLaunchingNotification, self);
            objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
        }
        else
            CPLog.error("Could not find application delegate class called " + delegateClassName);
    }
    else
        CPLog.error("CPApplicationDelegateClass not defined in Info.json");
}

), new objj_method(sel_getUid("sendAction:to:from:"), function $CPApplication__sendAction_to_from_(self, _cmd, aSelector, target, sender)
{
    objj_msgSend(target, "performSelector:withObject:", aSelector, sender);
}

), new objj_method(sel_getUid("setTheme:"), function $CPApplication__setTheme_(self, _cmd, aTheme)
{
    _CPTheme = aTheme;
}

), new objj_method(sel_getUid("theme"), function $CPApplication__theme(self, _cmd)
{
    if (!_CPTheme)
        _CPTheme = objj_msgSend(objj_msgSend(CPTheme, "alloc"), "init");
    return _CPTheme;
}

), new objj_method(sel_getUid("keyWindow"), function $CPApplication__keyWindow(self, _cmd)
{
    return self._keyWindow;
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("sharedApplication"), function $CPApplication__sharedApplication(self, _cmd)
{
    if (!CPApp)
        CPApp = objj_msgSend(objj_msgSend(CPApplication, "alloc"), "init");
    return CPApp;
}

)]);
}{
var the_class = objj_getClass("CPApplication")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPApplication\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:"), function $CPApplication__beginSheet_modalForWindow_modalDelegate_didEndSelector_contextInfo_(self, _cmd, sheet, docWindow, modalDelegate, didEndSelector, contextInfo)
{
    objj_msgSend(docWindow, "_attachSheet:modalDelegate:didEndSelector:contextInfo:", sheet, modalDelegate, didEndSelector, contextInfo);
}

), new objj_method(sel_getUid("endSheet:"), function $CPApplication__endSheet_(self, _cmd, sheet)
{
    objj_msgSend(self, "endSheet:returnCode:", sheet, 0);
}

), new objj_method(sel_getUid("endSheet:returnCode:"), function $CPApplication__endSheet_returnCode_(self, _cmd, sheet, returnCode)
{
    if (!sheet._sheetContext)
        sheet._sheetContext = {};
    sheet._sheetContext.returnCode = returnCode;
    objj_msgSend(sheet, "_detachSheet");
}

)]);
}function CPApplicationMain()
{
    objj_msgSend(objj_msgSend(CPApplication, "sharedApplication"), "finishLaunching");
    return 0;
}
function CPBeep()
{
    _CPBeep = new Audio();
    _CPBeep.src = "themes/Beep.wav";
    _CPBeep.play();
}
function CGAffineTransformMake(a, b, c, d, tx, ty)
{
    return {a: a, b: b, c: c, d: d, tx: tx, ty: ty};
}
function CGAffineTransformMakeIdentity()
{
    return {a: 1.0, b: 0.0, c: 0.0, d: 1.0, tx: 0.0, ty: 0.0};
}
function CGAffineTransformMakeCopy(anAffineTransform)
{
    return {a: anAffineTransform.a, b: anAffineTransform.b, c: anAffineTransform.c, d: anAffineTransform.d, tx: anAffineTransform.tx, ty: anAffineTransform.ty};
}
function CGAffineTransformMakeScale(sx, sy)
{
    return {a: sx, b: 0.0, c: 0.0, d: sy, tx: 0.0, ty: 0.0};
}
function CGAffineTransformMakeTranslation(tx, ty)
{
    return {a: 1.0, b: 0.0, c: 0.0, d: 1.0, tx: tx, ty: ty};
}
function CGAffineTransformTranslate(aTransform, tx, ty)
{
    return CGAffineTransformMake(aTransform.a, aTransform.b, aTransform.c, aTransform.d, aTransform.tx + aTransform.a * tx + aTransform.c * ty, aTransform.ty + aTransform.b * tx + aTransform.d * ty);
}
function CGAffineTransformScale(aTransform, sx, sy)
{
    return CGAffineTransformMake(aTransform.a * sx, aTransform.b * sx, aTransform.c * sy, aTransform.d * sy, aTransform.tx, aTransform.ty);
}
function CGAffineTransformConcat(lhs, rhs)
{
    return CGAffineTransformMake(lhs.a * rhs.a + lhs.b * rhs.c, lhs.a * rhs.b + lhs.b * rhs.d, lhs.c * rhs.a + lhs.d * rhs.c, lhs.c * rhs.b + lhs.d * rhs.d, lhs.tx * rhs.a + lhs.ty * rhs.c + rhs.tx, lhs.tx * rhs.b + lhs.ty * rhs.d + rhs.ty);
}
function CGAffineTransformConcatTo(lhs, rhs, to)
{
    var tx = lhs.tx * rhs.a + lhs.ty * rhs.c + rhs.tx;
    to.ty = lhs.tx * rhs.b + lhs.ty * rhs.d + rhs.ty;
    to.tx = tx;
    var a = lhs.a * rhs.a + lhs.b * rhs.c,
        b = lhs.a * rhs.b + lhs.b * rhs.d,
        c = lhs.c * rhs.a + lhs.d * rhs.c;
    to.d = lhs.c * rhs.b + lhs.d * rhs.d;
    to.a = a;
    to.b = b;
    to.c = c;
}
function CGPointApplyAffineTransform(aPoint, aTransform)
{
    if (!aTransform)
        return aPoint;
    return {x: aPoint.x * aTransform.a + aPoint.y * aTransform.c + aTransform.tx, y: aPoint.x * aTransform.b + aPoint.y * aTransform.d + aTransform.ty};
}
function CGSizeApplyAffineTransform(aSize, aTransform)
{
    if (!aTransform)
        return aSize;
    return {width: aSize.width * aTransform.a + aSize.height * aTransform.c, height: aSize.width * aTransform.b + aSize.height * aTransform.d};
}
function CGAffineTransformIsIdentity(aTransform)
{
    return aTransform.a === 1.0 && aTransform.b === 0.0 && aTransform.c === 0.0 && aTransform.d === 1.0 && aTransform.tx === 0.0 && aTransform.ty === 0.0;
}
function CGAffineTransformEqualToTransform(lhs, rhs)
{
    return lhs.a === rhs.a && lhs.b === rhs.b && lhs.c === rhs.c && lhs.d === rhs.d && lhs.tx === rhs.tx && lhs.ty === rhs.ty;
}
function CGStringCreateWithCGAffineTransform(aTransform)
{
    return " [[ " + aTransform.a + ", " + aTransform.b + ", 0 ], [ " + aTransform.c + ", " + aTransform.d + ", 0 ], [ " + aTransform.tx + ", " + aTransform.ty + ", 1]]";
}
CGAffineTransformCreateCopy = CGAffineTransformMakeCopy;
function CGAffineTransformMakeRotation(anAngle)
{
    var sin = SIN(anAngle),
        cos = COS(anAngle);
    return CGAffineTransformMake(cos, sin, -sin, cos, 0.0, 0.0);
}
function CGAffineTransformRotate(aTransform, anAngle)
{
    var sin = SIN(anAngle),
        cos = COS(anAngle);
    return {a: aTransform.a * cos + aTransform.c * sin, b: aTransform.b * cos + aTransform.d * sin, c: aTransform.c * cos - aTransform.a * sin, d: aTransform.d * cos - aTransform.b * sin, tx: aTransform.tx, ty: aTransform.ty};
}
function CGAffineTransformInvert(aTransform)
{
    var determinant = 1 / (aTransform.a * aTransform.d - aTransform.b * aTransform.c);
    return {a: determinant * aTransform.d, b: -determinant * aTransform.b, c: -determinant * aTransform.c, d: determinant * aTransform.a, tx: determinant * (aTransform.c * aTransform.ty - aTransform.d * aTransform.tx), ty: determinant * (aTransform.b * aTransform.tx - aTransform.a * aTransform.ty)};
}
function CGRectApplyAffineTransform(aRect, anAffineTransform)
{
    var top = CGRectGetMinY(aRect),
        left = CGRectGetMinX(aRect),
        right = CGRectGetMaxX(aRect),
        bottom = CGRectGetMaxY(aRect),
        topLeft = CGPointApplyAffineTransform(CGPointMake(left, top), anAffineTransform),
        topRight = CGPointApplyAffineTransform(CGPointMake(right, top), anAffineTransform),
        bottomLeft = CGPointApplyAffineTransform(CGPointMake(left, bottom), anAffineTransform),
        bottomRight = CGPointApplyAffineTransform(CGPointMake(right, bottom), anAffineTransform),
        minX = MIN(topLeft.x, topRight.x, bottomLeft.x, bottomRight.x),
        maxX = MAX(topLeft.x, topRight.x, bottomLeft.x, bottomRight.x),
        minY = MIN(topLeft.y, topRight.y, bottomLeft.y, bottomRight.y),
        maxY = MAX(topLeft.y, topRight.y, bottomLeft.y, bottomRight.y);
    return CGRectMake(minX, minY, maxX - minX, maxY - minY);
}
function CPStringFromCGAffineTransform(anAffineTransform)
{
    return '{' + anAffineTransform.a + ", " + anAffineTransform.b + ", " + anAffineTransform.c + ", " + anAffineTransform.d + ", " + anAffineTransform.tx + ", " + anAffineTransform.ty + '}';
}
kCGLineCapButt = 0;
kCGLineCapRound = 1;
kCGLineCapSquare = 2;
kCGLineJoinMiter = 0;
kCGLineJoinRound = 1;
kCGLineJoinBevel = 2;
kCGPathFill = 0;
kCGPathEOFill = 1;
kCGPathStroke = 2;
kCGPathFillStroke = 3;
kCGPathEOFillStroke = 4;
kCGBlendModeNormal = 0;
kCGBlendModeMultiply = 1;
kCGBlendModeScreen = 2;
kCGBlendModeOverlay = 3;
kCGBlendModeDarken = 4;
kCGBlendModeLighten = 5;
kCGBlendModeColorDodge = 6;
kCGBlendModeColorBurn = 7;
kCGBlendModeSoftLight = 8;
kCGBlendModeHardLight = 9;
kCGBlendModeDifference = 10;
kCGBlendModeExclusion = 11;
kCGBlendModeHue = 12;
kCGBlendModeSaturation = 13;
kCGBlendModeColor = 14;
kCGBlendModeLuminosity = 15;
kCGBlendModeClear = 16;
kCGBlendModeCopy = 17;
kCGBlendModeSourceIn = 18;
kCGBlendModeSourceOut = 19;
kCGBlendModeSourceAtop = 20;
kCGBlendModeDestinationOver = 21;
kCGBlendModeDestinationIn = 22;
kCGBlendModeDestinationOut = 23;
kCGBlendModeDestinationAtop = 24;
kCGBlendModeXOR = 25;
kCGBlendModePlusDarker = 26;
kCGBlendModePlusLighter = 27;
function CGContextRelease()
{
}
function CGContextRetain(aContext)
{
    return aContext;
}
function CGGStateCreate()
{
    return {alpha: 1.0, strokeStyle: "#000", fillStyle: "#ccc", lineWidth: 1.0, lineJoin: kCGLineJoinMiter, lineCap: kCGLineCapButt, miterLimit: 10.0, globalAlpha: 1.0, blendMode: kCGBlendModeNormal, shadowOffset: CGSizeMakeZero(), shadowBlur: 0.0, shadowColor: NULL, CTM: CGAffineTransformMakeIdentity()};
}
function CGGStateCreateCopy(aGState)
{
    return {alpha: aGState.alpha, strokeStyle: aGState.strokeStyle, fillStyle: aGState.fillStyle, lineWidth: aGState.lineWidth, lineJoin: aGState.lineJoin, lineCap: aGState.lineCap, miterLimit: aGState.miterLimit, globalAlpha: aGState.globalAlpha, blendMode: aGState.blendMode, shadowOffset: CGSizeMakeCopy(aGState.shadowOffset), shadowBlur: aGState.shadowBlur, shadowColor: aGState.shadowColor, CTM: CGAffineTransformMakeCopy(aGState.CTM)};
}
function CGBitmapGraphicsContextCreate()
{
    return {DOMElement: document.createElement("div"), path: NULL, gState: CGGStateCreate(), gStateStack: []};
}
function CGContextSaveGState(aContext)
{
    aContext.gStateStack.push(CGGStateCreateCopy(aContext.gState));
}
function CGContextRestoreGState(aContext)
{
    aContext.gState = aContext.gStateStack.pop();
}
function CGContextSetLineCap(aContext, aLineCap)
{
    aContext.gState.lineCap = aLineCap;
}
function CGContextSetLineDash(aContext, aPhase, someDashes)
{
    aContext.gState.lineDashes = someDashes;
    aContext.gState.lineDashesPhase = aPhase;
}
function CGContextSetLineJoin(aContext, aLineJoin)
{
    aContext.gState.lineJoin = aLineJoin;
}
function CGContextSetLineWidth(aContext, aLineWidth)
{
    aContext.gState.lineWidth = aLineWidth;
}
function CGContextSetMiterLimit(aContext, aMiterLimit)
{
    aContext.gState.miterLimit = aMiterLimit;
}
function CGContextSetBlendMode(aContext, aBlendMode)
{
    aContext.gState.blendMode = aBlendMode;
}
function CGContextAddArc(aContext, x, y, radius, startAngle, endAngle, clockwise)
{
    CGPathAddArc(aContext.path, aContext.gState.CTM, x, y, radius, startAngle, endAngle, clockwise);
}
function CGContextAddArcToPoint(aContext, x1, y1, x2, y2, radius)
{
    CGPathAddArcToPoint(aContext.path, aContext.gState.CTM, x1, y1, x2, y2, radius);
}
function CGContextAddCurveToPoint(aContext, cp1x, cp1y, cp2x, cp2y, x, y)
{
    CGPathAddCurveToPoint(aContext.path, aContext.gState.CTM, cp1x, cp1y, cp2x, cp2y, x, y);
}
function CGContextAddLines(aContext, points, count)
{
    CGPathAddLines(aContext.path, aContext.gState.CTM, points, count);
}
function CGContextAddLineToPoint(aContext, x, y)
{
    CGPathAddLineToPoint(aContext.path, aContext.gState.CTM, x, y);
}
function CGContextAddPath(aContext, aPath)
{
    if (!aContext || CGPathIsEmpty(aPath))
        return;
    if (!aContext.path)
        aContext.path = CGPathCreateMutable();
    CGPathAddPath(aContext.path, aContext.gState.CTM, aPath);
}
function CGContextAddQuadCurveToPoint(aContext, cpx, cpy, x, y)
{
    CGPathAddQuadCurveToPoint(aContext.path, aContext.gState.CTM, cpx, cpy, x, y);
}
function CGContextAddRect(aContext, aRect)
{
    CGPathAddRect(aContext.path, aContext.gState.CTM, aRect);
}
function CGContextAddRects(aContext, rects, count)
{
    CGPathAddRects(aContext.path, aContext.gState.CTM, rects, count);
}
function CGContextBeginPath(aContext)
{
    aContext.path = CGPathCreateMutable();
}
function CGContextClosePath(aContext)
{
    CGPathCloseSubpath(aContext.path);
}
function CGContextIsPathEmpty(aContext)
{
    return !aContext.path || CGPathIsEmpty(aContext.path);
}
function CGContextMoveToPoint(aContext, x, y)
{
    if (!aContext.path)
        aContext.path = CGPathCreateMutable();
    CGPathMoveToPoint(aContext.path, aContext.gState.CTM, x, y);
}
function CGContextFillRect(aContext, aRect)
{
    CGContextFillRects(aContext, [aRect], 1);
}
function CGContextFillRects(aContext, rects, count)
{
    if (arguments[2] === undefined)
        var count = rects.length;
    CGContextBeginPath(aContext);
    CGContextAddRects(aContext, rects, count);
    CGContextClosePath(aContext);
    CGContextDrawPath(aContext, kCGPathFill);
}
function CGContextStrokeRect(aContext, aRect)
{
    CGContextBeginPath(aContext);
    CGContextAddRect(aContext, aRect);
    CGContextClosePath(aContext);
    CGContextDrawPath(aContext, kCGPathStroke);
}
function CGContextStrokeRectWithWidth(aContext, aRect, aWidth)
{
    CGContextSaveGState(aContext);
    CGContextSetLineWidth(aContext, aWidth);
    CGContextStrokeRect(aContext, aRect);
    CGContextRestoreGState(aContext);
}
function CGContextConcatCTM(aContext, aTransform)
{
    var CTM = aContext.gState.CTM;
    CGAffineTransformConcatTo(CTM, aTransform, CTM);
}
function CGContextGetCTM(aContext)
{
    return aContext.gState.CTM;
}
function CGContextRotateCTM(aContext, anAngle)
{
    var gState = aContext.gState;
    gState.CTM = CGAffineTransformRotate(gState.CTM, anAngle);
}
function CGContextScaleCTM(aContext, sx, sy)
{
    var gState = aContext.gState;
    gState.CTM = CGAffineTransformScale(gState.CTM, sx, sy);
}
function CGContextTranslateCTM(aContext, tx, ty)
{
    var gState = aContext.gState;
    gState.CTM = CGAffineTransformTranslate(gState.CTM, tx, ty);
}
function CGContextSetShadow(aContext, aSize, aBlur)
{
    var gState = aContext.gState;
    gState.shadowOffset = CGSizeMakeCopy(aSize);
    gState.shadowBlur = aBlur;
    gState.shadowColor = objj_msgSend(CPColor, "shadowColor");
}
function CGContextSetShadowWithColor(aContext, aSize, aBlur, aColor)
{
    var gState = aContext.gState;
    gState.shadowOffset = CGSizeMakeCopy(aSize);
    gState.shadowBlur = aBlur;
    gState.shadowColor = aColor;
}
function CGContextSetAlpha(aContext, anAlpha)
{
    aContext.gState.alpha = MAX(MIN(anAlpha, 1.0), 0.0);
}
function CGContextEOFillPath(aContext)
{
    CGContextDrawPath(aContext, kCGPathEOFill);
}
function CGContextFillPath(aContext)
{
    CGContextDrawPath(aContext, kCGPathFill);
    CGContextClosePath(aContext);
}
function CGContextStrokeRectWithWidth(aContext, aRect, aWidth)
{
    CGContextSaveGState(aContext);
    CGContextSetLineWidth(aContext, aWidth);
    CGContextStrokeRect(aContext, aRect);
    CGContextRestoreGState(aContext);
}
var KAPPA = 4.0 * ((SQRT2 - 1.0) / 3.0);
function CGContextAddEllipseInRect(aContext, aRect)
{
    CGContextBeginPath(aContext);
    CGContextAddPath(aContext, CGPathWithEllipseInRect(aRect));
    CGContextClosePath(aContext);
}
function CGContextFillEllipseInRect(aContext, aRect)
{
    CGContextBeginPath(aContext);
    CGContextAddEllipseInRect(aContext, aRect);
    CGContextClosePath(aContext);
    CGContextFillPath(aContext);
}
function CGContextStrokeEllipseInRect(aContext, aRect)
{
    CGContextBeginPath(aContext);
    CGContextAddEllipseInRect(aContext, aRect);
    CGContextClosePath(aContext);
    CGContextStrokePath(aContext);
}
function CGContextStrokePath(aContext)
{
    CGContextDrawPath(aContext, kCGPathStroke);
    CGContextClosePath(aContext);
}
function CGContextStrokeLineSegments(aContext, points, count)
{
    var i = 0;
    if (count === NULL)
        var count = points.length;
    CGContextBeginPath(aContext);
    for (; i < count; i += 2)
    {
        CGContextMoveToPoint(aContext, points[i].x, points[i].y);
        CGContextAddLineToPoint(aContext, points[i + 1].x, points[i + 1].y);
    }
    CGContextStrokePath(aContext);
}
function CGContextSetFillColor(aContext, aColor)
{
    if (aColor)
        aContext.gState.fillStyle = objj_msgSend(aColor, "cssString");
}
function CGContextSetStrokeColor(aContext, aColor)
{
    if (aColor)
        aContext.gState.strokeStyle = objj_msgSend(aColor, "cssString");
}
function CGContextFillRoundedRectangleInRect(aContext, aRect, aRadius, ne, se, sw, nw)
{
    CGContextBeginPath(aContext);
    CGContextAddPath(aContext, CGPathWithRoundedRectangleInRect(aRect, aRadius, aRadius, ne, se, sw, nw));
    CGContextClosePath(aContext);
    CGContextFillPath(aContext);
}
function CGContextStrokeRoundedRectangleInRect(aContext, aRect, aRadius, ne, se, sw, nw)
{
    CGContextBeginPath(aContext);
    CGContextAddPath(aContext, CGPathWithRoundedRectangleInRect(aRect, aRadius, aRadius, ne, se, sw, nw));
    CGContextClosePath(aContext);
    CGContextStrokePath(aContext);
}
var CANVAS_LINECAP_TABLE = ["butt", "round", "square"],
    CANVAS_LINEJOIN_TABLE = ["miter", "round", "bevel"],
    CANVAS_COMPOSITE_TABLE = ["source-over", "source-over", "source-over", "source-over", "darker", "lighter", "source-over", "source-over", "source-over", "source-over", "source-over", "source-over", "source-over", "source-over", "source-over", "source-over", "source-over", "copy", "source-in", "source-out", "source-atop", "destination-over", "destination-in", "destination-out", "destination-atop", "xor", "source-over", "source-over"];
var hasPath = function(aContext, methodName)
{
    if (!aContext.hasPath)
        CPLog.error(methodName + ": no current point");
    return aContext.hasPath;
};
function CGContextSaveGState(aContext)
{
    aContext.save();
}
function CGContextRestoreGState(aContext)
{
    aContext.restore();
}
function CGContextSetLineCap(aContext, aLineCap)
{
    aContext.lineCap = CANVAS_LINECAP_TABLE[aLineCap];
}
function CGContextSetLineDash(aContext, aPhase, someDashes)
{
    if (aContext.setLineDash)
    {
        aContext.setLineDash(someDashes);
        aContext.lineDashOffset = aPhase;
    }
    else if (typeof aContext['webkitLineDash'] !== 'undefined')
    {
        aContext.webkitLineDash = someDashes;
        aContext.webkitLineDashOffset = aPhase;
    }
    else if (typeof aContext['mozDash'] !== 'undefined')
    {
        aContext.mozDash = someDashes;
        aContext.mozDashOffset = aPhase;
    }
    else if (someDashes)
    {
        CPLog.warn("CGContextSetLineDash not implemented in this environment.");
    }
}
function CGContextSetLineJoin(aContext, aLineJoin)
{
    aContext.lineJoin = CANVAS_LINEJOIN_TABLE[aLineJoin];
}
function CGContextSetLineWidth(aContext, aLineWidth)
{
    aContext.lineWidth = aLineWidth;
}
function CGContextSetMiterLimit(aContext, aMiterLimit)
{
    aContext.miterLimit = aMiterLimit;
}
function CGContextSetBlendMode(aContext, aBlendMode)
{
    aContext.globalCompositeOperation = CANVAS_COMPOSITE_TABLE[aBlendMode];
}
function CGContextAddArc(aContext, x, y, radius, startAngle, endAngle, clockwise)
{
    if (!hasPath(aContext, "CGContextAddArc"))
        return;
    aContext.arc(x, y, radius, startAngle, endAngle, !clockwise);
}
function CGContextAddArcToPoint(aContext, x1, y1, x2, y2, radius)
{
    if (!hasPath(aContext, "CGContextAddArcToPoint"))
        return;
    aContext.arcTo(x1, y1, x2, y2, radius);
}
function CGContextAddCurveToPoint(aContext, cp1x, cp1y, cp2x, cp2y, x, y)
{
    if (!hasPath(aContext, "CGContextAddCurveToPoint"))
        return;
    aContext.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
}
function CGContextAddLines(aContext, points, count)
{
    if (count === null || count === undefined)
        count = points.length;
    if (count < 1)
        return;
    aContext.moveTo(points[0].x, points[0].y);
    for (var i = 1; i < count; ++i)
        aContext.lineTo(points[i].x, points[i].y);
    aContext.hasPath = YES;
}
function CGContextAddLineToPoint(aContext, x, y)
{
    if (!hasPath(aContext, "CGContextAddLineToPoint"))
        return;
    aContext.lineTo(x, y);
}
function CGContextAddPath(aContext, aPath)
{
    if (!aContext || CGPathIsEmpty(aPath))
        return;
    if (!aContext.hasPath)
        aContext.beginPath();
    aContext.moveTo(aPath.start.x, aPath.start.y);
    var elements = aPath.elements,
        i = 0,
        count = aPath.count;
    for (; i < count; ++i)
    {
        var element = elements[i],
            type = element.type;
        switch(type) {
            case kCGPathElementMoveToPoint:
                aContext.moveTo(element.x, element.y);
                break;
            case kCGPathElementAddLineToPoint:
                aContext.lineTo(element.x, element.y);
                break;
            case kCGPathElementAddQuadCurveToPoint:
                aContext.quadraticCurveTo(element.cpx, element.cpy, element.x, element.y);
                break;
            case kCGPathElementAddCurveToPoint:
                aContext.bezierCurveTo(element.cp1x, element.cp1y, element.cp2x, element.cp2y, element.x, element.y);
                break;
            case kCGPathElementCloseSubpath:
                aContext.closePath();
                break;
            case kCGPathElementAddArc:
                aContext.arc(element.x, element.y, element.radius, element.startAngle, element.endAngle, element.clockwise);
                break;
            case kCGPathElementAddArcToPoint:
                aContext.arcTo(element.p1x, element.p1y, element.p2x, element.p2y, element.radius);
                break;
        }
    }
    aContext.hasPath = YES;
}
function CGContextAddRect(aContext, aRect)
{
    aContext.rect(CGRectGetMinX(aRect), CGRectGetMinY(aRect), CGRectGetWidth(aRect), CGRectGetHeight(aRect));
    aContext.hasPath = YES;
}
function CGContextAddQuadCurveToPoint(aContext, cpx, cpy, x, y)
{
    if (!hasPath(aContext, "CGContextAddQuadCurveToPoint"))
        return;
    aContext.quadraticCurveTo(cpx, cpy, x, y);
}
function CGContextAddRects(aContext, rects, count)
{
    if (count === null || count === undefined)
        count = rects.length;
    for (var i = 0; i < count; ++i)
    {
        var rect = rects[i];
        aContext.rect(CGRectGetMinX(rect), CGRectGetMinY(rect), CGRectGetWidth(rect), CGRectGetHeight(rect));
    }
    aContext.hasPath = YES;
}
function CGContextBeginPath(aContext)
{
    aContext.beginPath();
    aContext.hasPath = NO;
}
function CGContextClosePath(aContext)
{
    aContext.closePath();
}
function CGContextIsPathEmpty(aContext)
{
    return !aContext.hasPath;
}
function CGContextMoveToPoint(aContext, x, y)
{
    aContext.moveTo(x, y);
    aContext.hasPath = YES;
}
function CGContextClearRect(aContext, aRect)
{
    aContext.clearRect(CGRectGetMinX(aRect), CGRectGetMinY(aRect), CGRectGetWidth(aRect), CGRectGetHeight(aRect));
    aContext.hasPath = NO;
}
function CGContextDrawPath(aContext, aMode)
{
    if (!aContext.hasPath)
        return;
    if (aMode === kCGPathFill || aMode === kCGPathFillStroke)
        aContext.fill();
    else if (aMode === kCGPathStroke || aMode === kCGPathFillStroke || aMode === kCGPathEOFillStroke)
        aContext.stroke();
    else if (aMode === kCGPathEOFill || aMode === kCGPathEOFillStroke)
        CPLog.warn("Unimplemented fill mode in CGContextDrawPath: %d", aMode);
    aContext.hasPath = NO;
}
function CGContextFillRect(aContext, aRect)
{
    aContext.fillRect(CGRectGetMinX(aRect), CGRectGetMinY(aRect), CGRectGetWidth(aRect), CGRectGetHeight(aRect));
    aContext.hasPath = NO;
}
function CGContextFillRects(aContext, rects, count)
{
    if (count === null || count === undefined)
        count = rects.length;
    for (var i = 0; i < count; ++i)
    {
        var rect = rects[i];
        aContext.fillRect(CGRectGetMinX(rect), CGRectGetMinY(rect), CGRectGetWidth(rect), CGRectGetHeight(rect));
    }
    aContext.hasPath = NO;
}
function CGContextStrokeRect(aContext, aRect)
{
    aContext.strokeRect(CGRectGetMinX(aRect), CGRectGetMinY(aRect), CGRectGetWidth(aRect), CGRectGetHeight(aRect));
    aContext.hasPath = NO;
}
function CGContextClip(aContext)
{
    aContext.clip();
    aContext.hasPath = NO;
}
function CGContextClipToRect(aContext, aRect)
{
    aContext.beginPath();
    aContext.rect(CGRectGetMinX(aRect), CGRectGetMinY(aRect), CGRectGetWidth(aRect), CGRectGetHeight(aRect));
    aContext.closePath();
    aContext.clip();
    aContext.hasPath = NO;
}
function CGContextClipToRects(aContext, rects, count)
{
    if (count === null || count === undefined)
        count = rects.length;
    aContext.beginPath();
    CGContextAddRects(aContext, rects, count);
    aContext.clip();
    aContext.hasPath = NO;
}
function CGContextSetAlpha(aContext, anAlpha)
{
    aContext.globalAlpha = anAlpha;
}
function CGContextSetFillColor(aContext, aColor)
{
    var patternImage = objj_msgSend(aColor, "patternImage");
    if (objj_msgSend(patternImage, "isSingleImage"))
    {
        var pattern = aContext.createPattern(objj_msgSend(patternImage, "image"), "repeat");
        aContext.fillStyle = pattern;
    }
    else
        aContext.fillStyle = objj_msgSend(aColor, "cssString");
}
function CGContextCreatePatternContext(aContext, aSize)
{
    var pattern = document.createElement("canvas");
    pattern.width = aSize.width;
    pattern.height = aSize.height;
    return pattern.getContext("2d");
}
function CGContextSetFillPattern(aContext, aPatternContext)
{
    var pattern = aContext.createPattern(aPatternContext.canvas, "repeat");
    aContext.fillStyle = pattern;
}
function CGContextSetStrokePattern(aContext, aPatternContext)
{
    var pattern = aContext.createPattern(aPatternContext.canvas, "repeat");
    aContext.strokeStyle = pattern;
}
function CGContextSetStrokeColor(aContext, aColor)
{
    var patternImage = objj_msgSend(aColor, "patternImage");
    if (objj_msgSend(patternImage, "isSingleImage"))
    {
        var pattern = aContext.createPattern(objj_msgSend(patternImage, "image"), "repeat");
        aContext.strokeStyle = pattern;
    }
    else
        aContext.strokeStyle = objj_msgSend(aColor, "cssString");
}
function CGContextSetShadow(aContext, aSize, aBlur)
{
    aContext.shadowOffsetX = aSize.width;
    aContext.shadowOffsetY = aSize.height;
    aContext.shadowBlur = aBlur;
}
function CGContextSetShadowWithColor(aContext, aSize, aBlur, aColor)
{
    aContext.shadowOffsetX = aSize.width;
    aContext.shadowOffsetY = aSize.height;
    aContext.shadowBlur = aBlur;
    aContext.shadowColor = objj_msgSend(aColor, "cssString");
}
function CGContextRotateCTM(aContext, anAngle)
{
    aContext.rotate(anAngle);
}
function CGContextScaleCTM(aContext, sx, sy)
{
    aContext.scale(sx, sy);
}
function CGContextTranslateCTM(aContext, tx, ty)
{
    aContext.translate(tx, ty);
}
var scale_rotate = function(a, b, c, d)
{
    var sign = a * d < 0.0 || b * c > 0.0 ? -1.0 : 1.0,
        a2 = (ATAN2(b, d) + ATAN2(-sign * c, sign * a)) / 2.0,
        cos = COS(a2),
        sin = SIN(a2);
    if (cos === 0)
    {
        sx = -c / sin;
        sy = b / sin;
    }    else if (sin === 0)
    {
        sx = a / cos;
        sy = d / cos;
    }    else
    {
        abs_cos = ABS(cos);
        abs_sin = ABS(sin);
        sx = (abs_cos * a / cos + abs_sin * -c / sin) / (abs_cos + abs_sin);
        sy = (abs_cos * d / cos + abs_sin * b / sin) / (abs_cos + abs_sin);
    }};
var rotate_scale = function(a, b, c, d)
{
    var sign = a * d < 0.0 || b * c > 0.0 ? -1.0 : 1.0,
        a1 = (ATAN2(sign * b, sign * a) + ATAN2(-c, d)) / 2.0,
        cos = COS(a1),
        sin = SIN(a1);
    if (cos === 0)
    {
        sx = b / sin;
        sy = -c / sin;
    }    else if (sin === 0)
    {
        sx = a / cos;
        sy = d / cos;
    }    else
    {
        abs_cos = ABS(cos);
        abs_sin = ABS(sin);
        sx = (abs_cos * a / cos + abs_sin * b / sin) / (abs_cos + abs_sin);
        sy = (abs_cos * d / cos + abs_sin * -c / sin) / (abs_cos + abs_sin);
    }};
function eigen(anAffineTransform)
{
    CPLog.warn("Unimplemented function: eigen");
}
CGContextConcatCTM = function(aContext, anAffineTransform)
{
    aContext.transform(anAffineTransform.a, anAffineTransform.b, anAffineTransform.c, anAffineTransform.d, anAffineTransform.tx, anAffineTransform.ty);
};
function CGContextDrawImage(aContext, aRect, anImage)
{
    aContext.drawImage(anImage._image, CGRectGetMinX(aRect), CGRectGetMinY(aRect), CGRectGetWidth(aRect), CGRectGetHeight(aRect));
    aContext.hasPath = NO;
}
function to_string(aColor)
{
    return "rgba(" + ROUND(aColor.components[0] * 255) + ", " + ROUND(aColor.components[1] * 255) + ", " + ROUND(255 * aColor.components[2]) + ", " + aColor.components[3] + ")";
}
function CGContextDrawLinearGradient(aContext, aGradient, aStartPoint, anEndPoint, options)
{
    var colors = aGradient.colors,
        count = colors.length,
        linearGradient = aContext.createLinearGradient(aStartPoint.x, aStartPoint.y, anEndPoint.x, anEndPoint.y);
    while (count--)
        linearGradient.addColorStop(aGradient.locations[count], to_string(colors[count]));
    aContext.fillStyle = linearGradient;
    aContext.fill();
    aContext.hasPath = NO;
}
function CGContextDrawRadialGradient(aContext, aGradient, aStartCenter, aStartRadius, anEndCenter, anEndRadius, options)
{
    var colors = aGradient.colors,
        count = colors.length,
        linearGradient = aContext.createRadialGradient(aStartCenter.x, aStartCenter.y, aStartRadius, anEndCenter.x, anEndCenter.y, anEndRadius);
    while (count--)
        linearGradient.addColorStop(aGradient.locations[count], to_string(colors[count]));
    aContext.fillStyle = linearGradient;
    aContext.fill();
    aContext.hasPath = NO;
}
function CGBitmapGraphicsContextCreate()
{
    var DOMElement = document.createElement("canvas"),
        context = DOMElement.getContext("2d");
    context.DOMElement = DOMElement;
    context.hasPath = NO;
    return context;
}
CPViewNotSizable = 0;
CPViewMinXMargin = 1;
CPViewWidthSizable = 2;
CPViewMaxXMargin = 4;
CPViewMinYMargin = 8;
CPViewHeightSizable = 16;
CPViewMaxYMargin = 32;
CPViewBoundsDidChangeNotification = "CPViewBoundsDidChangeNotification";
CPViewFrameDidChangeNotification = "CPViewFrameDidChangeNotification";
var CPThemeStateNormal = "normal",
    CPThemeStateDisabled = "disabled",
    CPThemeStateHovered = "hovered",
    CPThemeStateHighlighted = "highlighted",
    CPThemeStateSelected = "selected";
var DOMElementPrototype = nil;
{var the_class = objj_allocateClassPair(CPResponder, "CPView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_superview"), new objj_ivar("_subviews"), new objj_ivar("_window"), new objj_ivar("_graphicsContext"), new objj_ivar("_canvasElement"), new objj_ivar("_tag"), new objj_ivar("_identifier"), new objj_ivar("_frame"), new objj_ivar("_bounds"), new objj_ivar("_dirtyRect"), new objj_ivar("_boundsTransform"), new objj_ivar("_inverseBoundsTransform"), new objj_ivar("_isHidden"), new objj_ivar("_hitTests"), new objj_ivar("_postsFrameChangedNotifications"), new objj_ivar("_postsBoundsChangedNotifications"), new objj_ivar("_inhibitFrameAndBoundsChangedNotifications"), new objj_ivar("_opacity"), new objj_ivar("_backgroundColor"), new objj_ivar("_autoresizesSubviews"), new objj_ivar("_autoresizingMask"), new objj_ivar("_needsLayout"), new objj_ivar("_nextKeyView"), new objj_ivar("_previousKeyView"), new objj_ivar("_toolTip"), new objj_ivar("_themeAttributes"), new objj_ivar("_themeState"), new objj_ivar("_ephemeralSubviews"), new objj_ivar("_DOMElement")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("graphicsContext"), function $CPView__graphicsContext(self, _cmd)
{
    return self._graphicsContext;
}

), new objj_method(sel_getUid("_setGraphicsContext:"), function $CPView___setGraphicsContext_(self, _cmd, newValue)
{
    self._graphicsContext = newValue;
}

), new objj_method(sel_getUid("tag"), function $CPView__tag(self, _cmd)
{
    return self._tag;
}

), new objj_method(sel_getUid("setTag:"), function $CPView__setTag_(self, _cmd, newValue)
{
    self._tag = newValue;
}

), new objj_method(sel_getUid("identifier"), function $CPView__identifier(self, _cmd)
{
    return self._identifier;
}

), new objj_method(sel_getUid("setIdentifier:"), function $CPView__setIdentifier_(self, _cmd, newValue)
{
    self._identifier = newValue;
}

), new objj_method(sel_getUid("nextKeyView"), function $CPView__nextKeyView(self, _cmd)
{
    return self._nextKeyView;
}

), new objj_method(sel_getUid("_setNextKeyView:"), function $CPView___setNextKeyView_(self, _cmd, newValue)
{
    self._nextKeyView = newValue;
}

), new objj_method(sel_getUid("previousKeyView"), function $CPView__previousKeyView(self, _cmd)
{
    return self._previousKeyView;
}

), new objj_method(sel_getUid("_setPreviousKeyView:"), function $CPView___setPreviousKeyView_(self, _cmd, newValue)
{
    self._previousKeyView = newValue;
}

), new objj_method(sel_getUid("toolTip"), function $CPView__toolTip(self, _cmd)
{
    return self._toolTip;
}

), new objj_method(sel_getUid("_setToolTip:"), function $CPView___setToolTip_(self, _cmd, newValue)
{
    self._toolTip = newValue;
}

), new objj_method(sel_getUid("themeAttributes"), function $CPView__themeAttributes(self, _cmd)
{
    return self._themeAttributes;
}

), new objj_method(sel_getUid("setThemeAttributes:"), function $CPView__setThemeAttributes_(self, _cmd, newValue)
{
    self._themeAttributes = newValue;
}

), new objj_method(sel_getUid("init"), function $CPView__init(self, _cmd)
{
    return objj_msgSend(self, "initWithFrame:", CGRectMakeZero());
}

), new objj_method(sel_getUid("initWithFrame:"), function $CPView__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPView").super_class }, "init");
    if (self)
    {
        var width = CGRectGetWidth(aFrame),
            height = CGRectGetHeight(aFrame);
        self._subviews = [];
        self._ephemeralSubviews = objj_msgSend(CPSet, "set");
        self._tag = -1;
        self._frame = CGRectMakeCopy(aFrame);
        self._bounds = CGRectMake(0.0, 0.0, width, height);
        self._autoresizingMask = CPViewNotSizable;
        self._autoresizesSubviews = YES;
        self._postsFrameChangedNotifications = YES;
        self._postsBoundsChangedNotifications = YES;
        self._inhibitFrameAndBoundsChangedNotifications = NO;
        self._opacity = 1.0;
        self._isHidden = NO;
        self._hitTests = YES;
        self._nextKeyView = nil;
        self._DOMElement = DOMElementPrototype.clone(false);
        self._DOMElement.css({left: CGRectGetMinX(aFrame), top: CGRectGetMinY(aFrame), width: width, height: height});
        self._DOMElement.bind("mouseout mouseover",         function(evt)
        {
            objj_msgSend(CPDOMEventDispatcher, "dispatchDOMMouseEvent:toView:", evt, self);
        });
        self._themeState = CPThemeStateNormal;
        objj_msgSend(self, "_loadThemeAttributes");
    }
    return self;
}

), new objj_method(sel_getUid("setToolTip:"), function $CPView__setToolTip_(self, _cmd, aToolTip)
{
    self._toolTip = aToolTip;
    if (self._toolTip)
        self._DOMElement.attr("title", self._toolTip);
    else
        self._DOMElement.removeAttr("title");
}

), new objj_method(sel_getUid("superview"), function $CPView__superview(self, _cmd)
{
    return self._superview;
}

), new objj_method(sel_getUid("subviews"), function $CPView__subviews(self, _cmd)
{
    return objj_msgSend(self._subviews, "copy");
}

), new objj_method(sel_getUid("window"), function $CPView__window(self, _cmd)
{
    return self._window;
}

), new objj_method(sel_getUid("_setWindow:"), function $CPView___setWindow_(self, _cmd, aWindow)
{
    if (self._window === aWindow)
        return;
    self._window = aWindow;
    var count = objj_msgSend(self._subviews, "count");
    while (count--)
        objj_msgSend(self._subviews[count], "_setWindow:", aWindow);
}

), new objj_method(sel_getUid("addSubview:"), function $CPView__addSubview_(self, _cmd, aSubview)
{
    objj_msgSend(self, "_insertSubview:atIndex:", aSubview, CPNotFound);
}

), new objj_method(sel_getUid("_insertSubview:atIndex:"), function $CPView___insertSubview_atIndex_(self, _cmd, aSubview, anIndex)
{
    if (aSubview === self)
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "can't add a view as a subview of itself");
    if (!aSubview._superview && self._subviews.indexOf(aSubview) !== CPNotFound)
        objj_msgSend(CPException, "raise:reason:", CPInvalidArgumentException, "can't insert a subview in duplicate (probably partially decoded)");
    var count = self._subviews.length;
    objj_msgSend(aSubview, "setNextResponder:", self);
    if (aSubview._superview == self)
    {
        var index = objj_msgSend(self._subviews, "indexOfObjectIdenticalTo:", aSubview);
        if (index === anIndex || index === count - 1 && anIndex === count)
            return;
        objj_msgSend(self._subviews, "removeObjectAtIndex:", index);
        aSubview._DOMElement.detach();
        if (anIndex > index)
            --anIndex;
        --count;
    }
    else
    {
        objj_msgSend(aSubview, "removeFromSuperview");
        objj_msgSend(aSubview, "_setWindow:", self._window);
        objj_msgSend(aSubview, "viewWillMoveToSuperview:", self);
        aSubview._superview = self;
    }
    if (anIndex === CPNotFound || anIndex >= count)
    {
        self._subviews.push(aSubview);
        self._DOMElement.append(aSubview._DOMElement);
    }
    else
    {
        self._subviews.splice(anIndex, 0, aSubview);
        aSubview._DOMElement.insertBefore(self._subviews[anIndex + 1]._DOMElement);
    }
    var bw = objj_msgSend(self, "borderWidth");
    aSubview._DOMElement.css({left: aSubview._frame.origin.x - bw, top: aSubview._frame.origin.y - bw});
    objj_msgSend(aSubview, "setNeedsLayout");
    objj_msgSend(aSubview, "setNeedsDisplay:", YES);
    objj_msgSend(aSubview, "viewDidMoveToSuperview");
    objj_msgSend(self, "didAddSubview:", aSubview);
}

), new objj_method(sel_getUid("didAddSubview:"), function $CPView__didAddSubview_(self, _cmd, aSubview)
{
}

), new objj_method(sel_getUid("removeFromSuperview"), function $CPView__removeFromSuperview(self, _cmd)
{
    if (!self._superview)
        return;
    objj_msgSend(self._superview, "willRemoveSubview:", self);
    objj_msgSend(self._superview._subviews, "removeObjectIdenticalTo:", self);
    self._DOMElement.detach();
    self._superview = nil;
    objj_msgSend(self, "_setWindow:", nil);
}

), new objj_method(sel_getUid("replaceSubview:with:"), function $CPView__replaceSubview_with_(self, _cmd, aSubview, aView)
{
    if (aSubview._superview !== self)
        return;
    var index = objj_msgSend(self._subviews, "indexOfObjectIdenticalTo:", aSubview);
    objj_msgSend(aSubview, "removeFromSuperview");
    objj_msgSend(self, "_insertSubview:atIndex:", aView, index);
}

), new objj_method(sel_getUid("viewDidMoveToSuperview"), function $CPView__viewDidMoveToSuperview(self, _cmd)
{
    if (self._graphicsContext)
        objj_msgSend(self, "setNeedsDisplay:", YES);
}

), new objj_method(sel_getUid("viewDidMoveToWindow"), function $CPView__viewDidMoveToWindow(self, _cmd)
{
}

), new objj_method(sel_getUid("viewWillMoveToSuperview:"), function $CPView__viewWillMoveToSuperview_(self, _cmd, aView)
{
}

), new objj_method(sel_getUid("viewWillMoveToWindow:"), function $CPView__viewWillMoveToWindow_(self, _cmd, aWindow)
{
}

), new objj_method(sel_getUid("willRemoveSubview:"), function $CPView__willRemoveSubview_(self, _cmd, aView)
{
}

), new objj_method(sel_getUid("viewWithTag:"), function $CPView__viewWithTag_(self, _cmd, aTag)
{
    if (objj_msgSend(self, "tag") == aTag)
        return self;
    var index = 0,
        count = self._subviews.length;
    for (; index < count; ++index)
    {
        var view = objj_msgSend(self._subviews[index], "viewWithTag:", aTag);
        if (view)
            return view;
    }
    return nil;
}

), new objj_method(sel_getUid("setFrame:"), function $CPView__setFrame_(self, _cmd, aFrame)
{
    if (CGRectEqualToRect(self._frame, aFrame))
        return;
    self._inhibitFrameAndBoundsChangedNotifications = YES;
    objj_msgSend(self, "setFrameOrigin:", aFrame.origin);
    objj_msgSend(self, "setFrameSize:", aFrame.size);
    self._inhibitFrameAndBoundsChangedNotifications = NO;
    if (self._postsFrameChangedNotifications)
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPViewFrameDidChangeNotification, self);
}

), new objj_method(sel_getUid("frame"), function $CPView__frame(self, _cmd)
{
    return CGRectMakeCopy(self._frame);
}

), new objj_method(sel_getUid("frameOrigin"), function $CPView__frameOrigin(self, _cmd)
{
    return CGPointMakeCopy(self._frame.origin);
}

), new objj_method(sel_getUid("frameSize"), function $CPView__frameSize(self, _cmd)
{
    return CGSizeMakeCopy(self._frame.size);
}

), new objj_method(sel_getUid("setCenter:"), function $CPView__setCenter_(self, _cmd, aPoint)
{
    objj_msgSend(self, "setFrameOrigin:", CGPointMake(aPoint.x - self._frame.size.width / 2.0, aPoint.y - self._frame.size.height / 2.0));
}

), new objj_method(sel_getUid("center"), function $CPView__center(self, _cmd)
{
    return CGPointMake(self._frame.size.width / 2.0 + self._frame.origin.x, self._frame.size.height / 2.0 + self._frame.origin.y);
}

), new objj_method(sel_getUid("setFrameOrigin:"), function $CPView__setFrameOrigin_(self, _cmd, aPoint)
{
    var origin = self._frame.origin;
    if (!aPoint || CGPointEqualToPoint(origin, aPoint))
        return;
    origin.x = aPoint.x;
    origin.y = aPoint.y;
    if (self._postsFrameChangedNotifications && !self._inhibitFrameAndBoundsChangedNotifications)
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPViewFrameDidChangeNotification, self);
    var transform = self._superview ? self._superview._boundsTransform : null;
    var p = CGPointApplyAffineTransform(origin, transform);
    var bw = self._superview ? objj_msgSend(self._superview, "borderWidth") : 0;
    self._DOMElement.css({left: p.x - bw, top: p.y - bw});
}

), new objj_method(sel_getUid("setFrameSize:"), function $CPView__setFrameSize_(self, _cmd, aSize)
{
    var size = self._frame.size;
    if (!aSize || CGSizeEqualToSize(size, aSize))
        return;
    var oldSize = CGSizeMakeCopy(size);
    size.width = aSize.width;
    size.height = aSize.height;
    self._bounds.size.width = aSize.width;
    self._bounds.size.height = aSize.height;
    if (self._autoresizesSubviews)
        objj_msgSend(self, "resizeSubviewsWithOldSize:", oldSize);
    if (self._graphicsContext)
    {
        if (self._GCCreateTimer)
        {
            clearTimeout(self._GCCreateTimer);
            self._GCCreateTimer = null;
        }
        self._GCCreateTimer = setTimeout(        function()
        {
            objj_msgSend(self, "_createGraphicsContext");
            objj_msgSend(self, "display");
        }, 50);
    }
    objj_msgSend(self, "setNeedsLayout");
    objj_msgSend(self, "setNeedsDisplay:", YES);
    self._DOMElement.css({width: size.width, height: size.height});
    if (self._postsFrameChangedNotifications && !self._inhibitFrameAndBoundsChangedNotifications)
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPViewFrameDidChangeNotification, self);
}

), new objj_method(sel_getUid("setBounds:"), function $CPView__setBounds_(self, _cmd, bounds)
{
    if (CGRectEqualToRect(self._bounds, bounds))
        return;
    self._inhibitFrameAndBoundsChangedNotifications = YES;
    objj_msgSend(self, "setBoundsOrigin:", bounds.origin);
    objj_msgSend(self, "setBoundsSize:", bounds.size);
    self._inhibitFrameAndBoundsChangedNotifications = NO;
    if (self._postsBoundsChangedNotifications)
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPViewBoundsDidChangeNotification, self);
}

), new objj_method(sel_getUid("bounds"), function $CPView__bounds(self, _cmd)
{
    return CGRectMakeCopy(self._bounds);
}

), new objj_method(sel_getUid("boundsOrigin"), function $CPView__boundsOrigin(self, _cmd)
{
    return CGPointMakeCopy(self._bounds.origin);
}

), new objj_method(sel_getUid("boundsSize"), function $CPView__boundsSize(self, _cmd)
{
    return CGSizeMakeCopy(self._bounds.size);
}

), new objj_method(sel_getUid("setBoundsOrigin:"), function $CPView__setBoundsOrigin_(self, _cmd, aPoint)
{
    var origin = self._bounds.origin;
    if (CGPointEqualToPoint(origin, aPoint))
        return;
    origin.x = aPoint.x;
    origin.y = aPoint.y;
    if (origin.x != 0 || origin.y != 0)
    {
        self._boundsTransform = CGAffineTransformMakeTranslation(-origin.x, -origin.y);
        self._inverseBoundsTransform = CGAffineTransformInvert(self._boundsTransform);
    }
    else
    {
        self._boundsTransform = nil;
        self._inverseBoundsTransform = nil;
    }
    var index = self._subviews.length;
    while (index--)
    {
        var view = self._subviews[index],
            origin = view._frame.origin;
        var p = CGPointApplyAffineTransform(origin, self._boundsTransform);
        view._DOMElement.css({left: p.x, top: p.y});
    }
    if (self._postsBoundsChangedNotifications && !self._inhibitFrameAndBoundsChangedNotifications)
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPViewBoundsDidChangeNotification, self);
}

), new objj_method(sel_getUid("setBoundsSize:"), function $CPView__setBoundsSize_(self, _cmd, aSize)
{
    var size = self._bounds.size;
    if (CGSizeEqualToSize(size, aSize))
        return;
    var frameSize = self._frame.size;
    if (!CGSizeEqualToSize(size, frameSize))
    {
        var origin = self._bounds.origin;
        origin.x /= size.width / frameSize.width;
        origin.y /= size.height / frameSize.height;
    }
    size.width = aSize.width;
    size.height = aSize.height;
    if (!CGSizeEqualToSize(size, frameSize))
    {
        var origin = self._bounds.origin;
        origin.x *= size.width / frameSize.width;
        origin.y *= size.height / frameSize.height;
    }
    if (self._postsBoundsChangedNotifications && !self._inhibitFrameAndBoundsChangedNotifications)
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPViewBoundsDidChangeNotification, self);
}

), new objj_method(sel_getUid("resizeWithOldSuperviewSize:"), function $CPView__resizeWithOldSuperviewSize_(self, _cmd, aSize)
{
    var mask = objj_msgSend(self, "autoresizingMask");
    if (mask == CPViewNotSizable)
        return;
    var frame = self._superview._frame,
        newFrame = CGRectMakeCopy(self._frame),
        dX = frame.size.width - aSize.width,
        dY = frame.size.height - aSize.height,
        evenFractionX = 1.0 / ((mask & CPViewMinXMargin ? 1 : 0) + (mask & CPViewWidthSizable ? 1 : 0) + (mask & CPViewMaxXMargin ? 1 : 0)),
        evenFractionY = 1.0 / ((mask & CPViewMinYMargin ? 1 : 0) + (mask & CPViewHeightSizable ? 1 : 0) + (mask & CPViewMaxYMargin ? 1 : 0)),
        baseX = (mask & CPViewMinXMargin ? self._frame.origin.x : 0) + (mask & CPViewWidthSizable ? self._frame.size.width : 0) + (mask & CPViewMaxXMargin ? aSize.width - self._frame.size.width - self._frame.origin.x : 0),
        baseY = (mask & CPViewMinYMargin ? self._frame.origin.y : 0) + (mask & CPViewHeightSizable ? self._frame.size.height : 0) + (mask & CPViewMaxYMargin ? aSize.height - self._frame.size.height - self._frame.origin.y : 0);
    if (mask & CPViewMinXMargin)
        newFrame.origin.x += dX * (baseX > 0 ? self._frame.origin.x / baseX : evenFractionX);
    if (mask & CPViewWidthSizable)
        newFrame.size.width += dX * (baseX > 0 ? self._frame.size.width / baseX : evenFractionX);
    if (mask & CPViewMinYMargin)
        newFrame.origin.y += dY * (baseY > 0 ? self._frame.origin.y / baseY : evenFractionY);
    if (mask & CPViewHeightSizable)
        newFrame.size.height += dY * (baseY > 0 ? self._frame.size.height / baseY : evenFractionY);
    objj_msgSend(self, "setFrame:", newFrame);
}

), new objj_method(sel_getUid("resizeSubviewsWithOldSize:"), function $CPView__resizeSubviewsWithOldSize_(self, _cmd, aSize)
{
    var count = self._subviews.length;
    while (count--)
        objj_msgSend(self._subviews[count], "resizeWithOldSuperviewSize:", aSize);
}

), new objj_method(sel_getUid("setAutoresizesSubviews:"), function $CPView__setAutoresizesSubviews_(self, _cmd, aFlag)
{
    self._autoresizesSubviews = !!aFlag;
}

), new objj_method(sel_getUid("autoresizesSubviews"), function $CPView__autoresizesSubviews(self, _cmd)
{
    return self._autoresizesSubviews;
}

), new objj_method(sel_getUid("setAutoresizingMask:"), function $CPView__setAutoresizingMask_(self, _cmd, aMask)
{
    self._autoresizingMask = aMask;
}

), new objj_method(sel_getUid("autoresizingMask"), function $CPView__autoresizingMask(self, _cmd)
{
    return self._autoresizingMask;
}

), new objj_method(sel_getUid("setHidden:"), function $CPView__setHidden_(self, _cmd, aFlag)
{
    aFlag = !!aFlag;
    if (self._isHidden === aFlag)
        return;
    self._isHidden = aFlag;
    if (self._isHidden)
    {
        self._DOMElement.css("display", "none");
        objj_msgSend(self, "_notifyViewDidHide");
    }
    else
    {
        self._DOMElement.css("display", "block");
        objj_msgSend(self, "setNeedsDisplay:", YES);
        objj_msgSend(self, "_notifyViewDidUnhide");
    }
}

), new objj_method(sel_getUid("_notifyViewDidHide"), function $CPView___notifyViewDidHide(self, _cmd)
{
    objj_msgSend(self, "viewDidHide");
    var count = objj_msgSend(self._subviews, "count");
    while (count--)
        objj_msgSend(self._subviews[count], "_notifyViewDidHide");
}

), new objj_method(sel_getUid("_notifyViewDidUnhide"), function $CPView___notifyViewDidUnhide(self, _cmd)
{
    objj_msgSend(self, "viewDidUnhide");
    var count = objj_msgSend(self._subviews, "count");
    while (count--)
        objj_msgSend(self._subviews[count], "_notifyViewDidUnhide");
}

), new objj_method(sel_getUid("isHidden"), function $CPView__isHidden(self, _cmd)
{
    return self._isHidden;
}

), new objj_method(sel_getUid("setAlphaValue:"), function $CPView__setAlphaValue_(self, _cmd, anAlphaValue)
{
    if (self._opacity == anAlphaValue)
        return;
    self._opacity = anAlphaValue;
    if (typeof self._DOMElement[0].style.opacity != 'undefined')
    {
        self._DOMElement.css("opacity", self._opacity);
    }
    else
    {
        if (anAlphaValue === 1.0)
            try {
                self._DOMElement.style.removeAttribute("filter");
            }
            catch(anException) {
            }
        else
            self._DOMElement[0].style.filter = "alpha(opacity=" + anAlphaValue * 100 + ")";
    }
}

), new objj_method(sel_getUid("alphaValue"), function $CPView__alphaValue(self, _cmd)
{
    return self._opacity;
}

), new objj_method(sel_getUid("isHiddenOrHasHiddenAncestor"), function $CPView__isHiddenOrHasHiddenAncestor(self, _cmd)
{
    var view = self;
    while (view && !objj_msgSend(view, "isHidden"))
        view = objj_msgSend(view, "superview");
    return view !== nil;
}

), new objj_method(sel_getUid("_isVisible"), function $CPView___isVisible(self, _cmd)
{
    return YES;
}

), new objj_method(sel_getUid("viewDidHide"), function $CPView__viewDidHide(self, _cmd)
{
}

), new objj_method(sel_getUid("viewDidUnhide"), function $CPView__viewDidUnhide(self, _cmd)
{
}

), new objj_method(sel_getUid("hitTests"), function $CPView__hitTests(self, _cmd)
{
    return self._hitTests;
}

), new objj_method(sel_getUid("setHitTests:"), function $CPView__setHitTests_(self, _cmd, shouldHitTest)
{
    self._hitTests = !!shouldHitTest;
}

), new objj_method(sel_getUid("hitTest:"), function $CPView__hitTest_(self, _cmd, aPoint)
{
    if (self._isHidden || !self._hitTests || !CGRectContainsPoint(self._frame, aPoint))
        return nil;
    var view = nil,
        i = self._subviews.length,
        adjustedPoint = CGPointMake(aPoint.x - CGRectGetMinX(self._frame), aPoint.y - CGRectGetMinY(self._frame));
    if (self._inverseBoundsTransform)
        adjustedPoint = CGPointApplyAffineTransform(adjustedPoint, self._inverseBoundsTransform);
    while (i--)
    {
        view = objj_msgSend(self._subviews[i], "hitTest:", adjustedPoint);
        if (view !== nil)
            return view;
    }
    return self;
}

), new objj_method(sel_getUid("setBackgroundColor:"), function $CPView__setBackgroundColor_(self, _cmd, aColor)
{
    if (self._backgroundColor == aColor)
        return;
    if (aColor == objj_msgSend(CPNull, "null"))
        aColor = nil;
    self._backgroundColor = aColor;
    if (self._backgroundColor)
    {
        self._DOMElement.css("background-color", objj_msgSend(aColor, "cssString"));
        if (objj_msgSend(aColor, "alphaComponent") === 0)
            self._DOMElement.css("background-image", "none");
    }
}

), new objj_method(sel_getUid("backgroundColor"), function $CPView__backgroundColor(self, _cmd)
{
    return self._backgroundColor;
}

), new objj_method(sel_getUid("convertPoint:fromView:"), function $CPView__convertPoint_fromView_(self, _cmd, aPoint, aView)
{
    return CGPointApplyAffineTransform(aPoint, _CPViewGetTransform(aView, self));
}

), new objj_method(sel_getUid("convertPointFromBase:"), function $CPView__convertPointFromBase_(self, _cmd, aPoint)
{
    return CGPointApplyAffineTransform(aPoint, _CPViewGetTransform(nil, self));
}

), new objj_method(sel_getUid("convertPoint:toView:"), function $CPView__convertPoint_toView_(self, _cmd, aPoint, aView)
{
    return CGPointApplyAffineTransform(aPoint, _CPViewGetTransform(self, aView));
}

), new objj_method(sel_getUid("convertPointToBase:"), function $CPView__convertPointToBase_(self, _cmd, aPoint)
{
    return CGPointApplyAffineTransform(aPoint, _CPViewGetTransform(self, nil));
}

), new objj_method(sel_getUid("convertSize:fromView:"), function $CPView__convertSize_fromView_(self, _cmd, aSize, aView)
{
    return CGSizeApplyAffineTransform(aSize, _CPViewGetTransform(aView, self));
}

), new objj_method(sel_getUid("convertSize:toView:"), function $CPView__convertSize_toView_(self, _cmd, aSize, aView)
{
    return CGSizeApplyAffineTransform(aSize, _CPViewGetTransform(self, aView));
}

), new objj_method(sel_getUid("convertRect:fromView:"), function $CPView__convertRect_fromView_(self, _cmd, aRect, aView)
{
    return CGRectApplyAffineTransform(aRect, _CPViewGetTransform(aView, self));
}

), new objj_method(sel_getUid("convertRectFromBase:"), function $CPView__convertRectFromBase_(self, _cmd, aRect)
{
    return CGRectApplyAffineTransform(aRect, _CPViewGetTransform(nil, self));
}

), new objj_method(sel_getUid("convertRect:toView:"), function $CPView__convertRect_toView_(self, _cmd, aRect, aView)
{
    return CGRectApplyAffineTransform(aRect, _CPViewGetTransform(self, aView));
}

), new objj_method(sel_getUid("convertRectToBase:"), function $CPView__convertRectToBase_(self, _cmd, aRect)
{
    return CGRectApplyAffineTransform(aRect, _CPViewGetTransform(self, nil));
}

), new objj_method(sel_getUid("setPostsFrameChangedNotifications:"), function $CPView__setPostsFrameChangedNotifications_(self, _cmd, shouldPostFrameChangedNotifications)
{
    shouldPostFrameChangedNotifications = !!shouldPostFrameChangedNotifications;
    if (self._postsFrameChangedNotifications === shouldPostFrameChangedNotifications)
        return;
    self._postsFrameChangedNotifications = shouldPostFrameChangedNotifications;
}

), new objj_method(sel_getUid("postsFrameChangedNotifications"), function $CPView__postsFrameChangedNotifications(self, _cmd)
{
    return self._postsFrameChangedNotifications;
}

), new objj_method(sel_getUid("setPostsBoundsChangedNotifications:"), function $CPView__setPostsBoundsChangedNotifications_(self, _cmd, shouldPostBoundsChangedNotifications)
{
    shouldPostBoundsChangedNotifications = !!shouldPostBoundsChangedNotifications;
    if (self._postsBoundsChangedNotifications === shouldPostBoundsChangedNotifications)
        return;
    self._postsBoundsChangedNotifications = shouldPostBoundsChangedNotifications;
}

), new objj_method(sel_getUid("postsBoundsChangedNotifications"), function $CPView__postsBoundsChangedNotifications(self, _cmd)
{
    return self._postsBoundsChangedNotifications;
}

), new objj_method(sel_getUid("setNeedsDisplay:"), function $CPView__setNeedsDisplay_(self, _cmd, aFlag)
{
    if (aFlag)
        objj_msgSend(self, "setNeedsDisplayInRect:", objj_msgSend(self, "bounds"));
}

), new objj_method(sel_getUid("setNeedsDisplayInRect:"), function $CPView__setNeedsDisplayInRect_(self, _cmd, aRect)
{
    if (!objj_msgSend(self, "respondsToSelector:", sel_getUid("drawRect:")))
        return;
    if (CGRectIsEmpty(aRect))
        return;
    if (self._dirtyRect && !CGRectIsEmpty(self._dirtyRect))
        self._dirtyRect = CGRectUnion(aRect, self._dirtyRect);
    else
        self._dirtyRect = CGRectMakeCopy(aRect);
    if (!self._graphicsContext)
        objj_msgSend(self, "_createGraphicsContext");
    _CPDisplayServerAddDisplayObject(self);
}

), new objj_method(sel_getUid("_createGraphicsContext"), function $CPView___createGraphicsContext(self, _cmd)
{
    if (self._canvasElement)
        ($(self._canvasElement)).remove();
    self._canvasElement = document.createElement("canvas");
    var sz = self._frame.size;
    self._canvasElement.width = sz.width;
    self._canvasElement.height = sz.height;
    self._DOMElement.append($(self._canvasElement));
    self._graphicsContext = self._canvasElement.getContext("2d");
}

), new objj_method(sel_getUid("needsDisplay"), function $CPView__needsDisplay(self, _cmd)
{
    return self._dirtyRect && !CGRectIsEmpty(self._dirtyRect);
}

), new objj_method(sel_getUid("display"), function $CPView__display(self, _cmd)
{
    objj_msgSend(self, "displayRect:", objj_msgSend(self, "visibleRect"));
}

), new objj_method(sel_getUid("displayRect:"), function $CPView__displayRect_(self, _cmd, aRect)
{
    if (objj_msgSend(self, "respondsToSelector:", sel_getUid("drawRect:")))
    {
        if (self._graphicsContext)
        {
            self._graphicsContext.clearRect(aRect.origin.x, aRect.origin.y, aRect.size.width, aRect.size.height);
        }
        objj_msgSend(self, "drawRect:", aRect);
    }
}

), new objj_method(sel_getUid("displayIfNeeded"), function $CPView__displayIfNeeded(self, _cmd)
{
    if (objj_msgSend(self, "needsDisplay"))
        objj_msgSend(self, "display");
}

), new objj_method(sel_getUid("setNeedsLayout"), function $CPView__setNeedsLayout(self, _cmd)
{
    self._needsLayout = YES;
    _CPDisplayServerAddLayoutObject(self);
}

), new objj_method(sel_getUid("layoutIfNeeded"), function $CPView__layoutIfNeeded(self, _cmd)
{
    if (self._needsLayout)
    {
        self._needsLayout = NO;
        objj_msgSend(self, "layoutSubviews");
    }
}

), new objj_method(sel_getUid("layoutSubviews"), function $CPView__layoutSubviews(self, _cmd)
{
}

), new objj_method(sel_getUid("visibleRect"), function $CPView__visibleRect(self, _cmd)
{
    if (!self._superview)
        return self._bounds;
    return CGRectIntersection(objj_msgSend(self, "convertRect:fromView:", objj_msgSend(self._superview, "visibleRect"), self._superview), self._bounds);
}

), new objj_method(sel_getUid("borderWidth"), function $CPView__borderWidth(self, _cmd)
{
    return objj_msgSend(self, "valueForThemeAttribute:", "border-width");
}

), new objj_method(sel_getUid("setBorderWidth:"), function $CPView__setBorderWidth_(self, _cmd, borderWidth)
{
    if (objj_msgSend(self, "borderWidth") === borderWidth)
        return;
    objj_msgSend(self, "setValue:forThemeAttribute:", borderWidth, "border-width");
    self._DOMElement.css("border-width", borderWidth);
    var count = self._subviews.length,
        i = 0;
    for (; i < count; i++)
        self._subviews[i]._DOMElement.css({left: self._subviews[i]._frame.origin.x - borderWidth, top: self._subviews[i]._frame.origin.y - borderWidth});
}

), new objj_method(sel_getUid("borderColor"), function $CPView__borderColor(self, _cmd)
{
    return objj_msgSend(self, "valueForThemeAttribute:", "border-color");
}

), new objj_method(sel_getUid("setBorderColor:"), function $CPView__setBorderColor_(self, _cmd, aColor)
{
    if (objj_msgSend(objj_msgSend(self, "borderColor"), "isEqual:", aColor))
        return;
    objj_msgSend(self, "setValue:forThemeAttribute:", aColor, "border-color");
    self._DOMElement.css("border-color", objj_msgSend(aColor, "cssString"));
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("initialize"), function $CPView__initialize(self, _cmd)
{
    if (self !== objj_msgSend(CPView, "class"))
        return;
    DOMElementPrototype = ($("<div></div>")).addClass("cpview");
}

)]);
}{
var the_class = objj_getClass("CPView")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPView\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("setValue:forThemeAttribute:"), function $CPView__setValue_forThemeAttribute_(self, _cmd, aValue, aName)
{
    var currentValue = objj_msgSend(self, "valueForThemeAttribute:", aName);
    if (aValue !== nil)
        objj_msgSend(self._themeAttributes, "setObject:forKey:", aValue, aName);
    if (objj_msgSend(self, "valueForThemeAttribute:", aName) === currentValue)
        return;
    objj_msgSend(self, "setNeedsDisplay:", YES);
    objj_msgSend(self, "setNeedsLayout");
}

), new objj_method(sel_getUid("valueForThemeAttribute:"), function $CPView__valueForThemeAttribute_(self, _cmd, aName)
{
    return objj_msgSend(self._themeAttributes, "objectForKey:", aName);
}

), new objj_method(sel_getUid("removeCSSStyle:"), function $CPView__removeCSSStyle_(self, _cmd, className)
{
    self._DOMElement.removeClass(className);
}

), new objj_method(sel_getUid("addCSSStyle:"), function $CPView__addCSSStyle_(self, _cmd, className)
{
    self._DOMElement.addClass(className);
}

), new objj_method(sel_getUid("setThemeState:"), function $CPView__setThemeState_(self, _cmd, state)
{
    if (!self._DOMElement.hasClass(state))
    {
        self._DOMElement.addClass(state);
        self._themeState = self._DOMElement.attr("class");
    }
}

), new objj_method(sel_getUid("unsetThemeState:"), function $CPView__unsetThemeState_(self, _cmd, state)
{
    if (self._DOMElement.hasClass(state))
    {
        self._DOMElement.removeClass(state);
        self._themeState = self._DOMElement.attr("class");
    }
}

), new objj_method(sel_getUid("hasThemeAttribute:"), function $CPView__hasThemeAttribute_(self, _cmd, aName)
{
    return self._themeAttributes && self._themeAttributes[aName] !== undefined;
}

), new objj_method(sel_getUid("hasThemeState:"), function $CPView__hasThemeState_(self, _cmd, state)
{
    return self._DOMElement.hasClass(state);
}

), new objj_method(sel_getUid("_loadThemeAttributes"), function $CPView___loadThemeAttributes(self, _cmd)
{
    var theClass = objj_msgSend(self, "class");
    self._themeAttributes = objj_msgSend(objj_msgSend(CPApp, "theme"), "defaultThemeAttributesForClass:", class_getName(theClass));
    if (!self._themeAttributes)
        self._themeAttributes = objj_msgSend(CPDictionary, "dictionary");
    var superClass = objj_msgSend(theClass, "superclass");
    while (objj_msgSend(superClass, "isKindOfClass:", objj_msgSend(CPView, "class")))
    {
        var superclassThemeAttr = objj_msgSend(objj_msgSend(CPApp, "theme"), "defaultThemeAttributesForClass:", class_getName(superClass));
        if (superclassThemeAttr)
        {
            var attr = objj_msgSend(superclassThemeAttr, "allKeys"),
                count = attr.length,
                i = 0;
            for (; i < count; i++)
            {
                if (!objj_msgSend(self._themeAttributes, "containsKey:", attr[i]))
                    objj_msgSend(self._themeAttributes, "setValue:forKey:", objj_msgSend(superclassThemeAttr, "objectForKey:", attr[i]), attr[i]);
            }
        }
        superClass = objj_msgSend(superClass, "superclass");
    }
}

)]);
}{
var the_class = objj_getClass("CPView")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPView\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("canBecomeKeyView"), function $CPView__canBecomeKeyView(self, _cmd)
{
    return objj_msgSend(self, "acceptsFirstResponder") && !objj_msgSend(self, "isHiddenOrHasHiddenAncestor");
}

), new objj_method(sel_getUid("nextKeyView"), function $CPView__nextKeyView(self, _cmd)
{
    return self._nextKeyView;
}

), new objj_method(sel_getUid("nextValidKeyView"), function $CPView__nextValidKeyView(self, _cmd)
{
    var result = objj_msgSend(self, "nextKeyView"),
        resultUID = objj_msgSend(result, "UID"),
        unsuitableResults = {};
    while (result && !objj_msgSend(result, "canBecomeKeyView"))
    {
        unsuitableResults[resultUID] = 1;
        result = objj_msgSend(result, "nextKeyView");
        resultUID = objj_msgSend(result, "UID");
        if (unsuitableResults[resultUID])
            return nil;
    }
    return result;
}

), new objj_method(sel_getUid("previousKeyView"), function $CPView__previousKeyView(self, _cmd)
{
    return self._previousKeyView;
}

), new objj_method(sel_getUid("previousValidKeyView"), function $CPView__previousValidKeyView(self, _cmd)
{
    var result = objj_msgSend(self, "previousKeyView"),
        firstResult = result;
    while (result && !objj_msgSend(result, "canBecomeKeyView"))
    {
        result = objj_msgSend(result, "previousKeyView");
        if (result === firstResult)
            return nil;
    }
    return result;
}

), new objj_method(sel_getUid("_setPreviousKeyView:"), function $CPView___setPreviousKeyView_(self, _cmd, previous)
{
    if (!objj_msgSend(previous, "isEqual:", self))
    {
        var previousWindow = objj_msgSend(previous, "window");
        if (!previousWindow || previousWindow === self._window)
        {
            self._previousKeyView = previous;
            return;
        }
    }
    self._previousKeyView = nil;
}

), new objj_method(sel_getUid("setNextKeyView:"), function $CPView__setNextKeyView_(self, _cmd, next)
{
    if (!objj_msgSend(next, "isEqual:", self))
    {
        var nextWindow = objj_msgSend(next, "window");
        if (!nextWindow || nextWindow === self._window)
        {
            self._nextKeyView = next;
            objj_msgSend(self._nextKeyView, "_setPreviousKeyView:", self);
            return;
        }
    }
    self._nextKeyView = nil;
}

)]);
}var CPViewAutoresizingMaskKey = "CPViewAutoresizingMask",
    CPViewAutoresizesSubviewsKey = "CPViewAutoresizesSubviews",
    CPViewBackgroundColorKey = "CPViewBackgroundColor",
    CPViewBoundsKey = "CPViewBoundsKey",
    CPViewFrameKey = "CPViewFrameKey",
    CPViewHitTestsKey = "CPViewHitTestsKey",
    CPViewToolTipKey = "CPViewToolTipKey",
    CPViewIsHiddenKey = "CPViewIsHiddenKey",
    CPViewOpacityKey = "CPViewOpacityKey",
    CPViewSubviewsKey = "CPViewSubviewsKey",
    CPViewSuperviewKey = "CPViewSuperviewKey",
    CPViewNextKeyViewKey = "CPViewNextKeyViewKey",
    CPViewTagKey = "CPViewTagKey",
    CPViewThemeAttributesKey = "CPViewThemeAttributesKey",
    CPViewThemeStateKey = "CPViewThemeStateKey",
    CPViewWindowKey = "CPViewWindowKey",
    CPReuseIdentifierKey = "CPReuseIdentifierKey";
{
var the_class = objj_getClass("CPView")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPView\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPView__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPView").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        self._DOMElement = DOMElementPrototype.clone(false);
        self._frame = objj_msgSend(aCoder, "decodeRectForKey:", CPViewFrameKey);
        self._bounds = objj_msgSend(aCoder, "decodeRectForKey:", CPViewBoundsKey);
        self._tag = objj_msgSend(aCoder, "containsValueForKey:", CPViewTagKey) ? objj_msgSend(aCoder, "decodeIntForKey:", CPViewTagKey) : -1;
        self._superview = objj_msgSend(aCoder, "decodeObjectForKey:", CPViewSuperviewKey);
        self._window = objj_msgSend(aCoder, "decodeObjectForKey:", CPViewWindowKey);
        self._autoresizingMask = objj_msgSend(aCoder, "decodeIntForKey:", CPViewAutoresizingMaskKey) || CPViewNotSizable;
        self._autoresizesSubviews = !objj_msgSend(aCoder, "containsValueForKey:", CPViewAutoresizesSubviewsKey) || objj_msgSend(aCoder, "decodeBoolForKey:", CPViewAutoresizesSubviewsKey);
        self._isHidden = objj_msgSend(aCoder, "decodeBoolForKey:", CPViewIsHiddenKey);
        self._hitTests = objj_msgSend(aCoder, "decodeBoolForKey:", CPViewHitTestsKey);
        objj_msgSend(self, "setToolTip:", objj_msgSend(aCoder, "decodeObjectForKey:", CPViewToolTipKey));
        self._subviews = [];
        self._ephemeralSubviews = objj_msgSend(CPSet, "set");
        var archivedSubviews = objj_msgSend(aCoder, "decodeObjectForKey:", CPViewSubviewsKey) || [];
        var count = objj_msgSend(archivedSubviews, "count"),
            i = 0;
        for (; i < count; i++)
        {
            var view = archivedSubviews[i];
            view._superview = nil;
            objj_msgSend(self, "addSubview:", view);
        }
        self._nextKeyView = objj_msgSend(aCoder, "decodeObjectForKey:", CPViewNextKeyViewKey);
        self._themeAttributes = objj_msgSend(aCoder, "decodeObjectForKey:", CPViewThemeAttributesKey);
        self._themeState = objj_msgSend(aCoder, "decodeObjectForKey:", CPViewThemeStateKey);
        self._DOMElement.css({left: self._frame.origin.x, top: self._frame.origin.y, width: self._frame.size.width, height: self._frame.size.height});
        self._DOMElement.bind("mouseout mouseover",         function(evt)
        {
            objj_msgSend(CPDOMEventDispatcher, "dispatchDOMMouseEvent:toView:", evt, self);
        });
        self._themeAttributes = objj_msgSend(aCoder, "decodeObjectForKey:", CPViewThemeAttributesKey);
        objj_msgSend(self, "setBackgroundColor:", objj_msgSend(aCoder, "decodeObjectForKey:", CPViewBackgroundColorKey));
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPView__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPView").super_class }, "encodeWithCoder:", aCoder);
    if (self._tag !== -1)
        objj_msgSend(aCoder, "encodeInt:forKey:", self._tag, CPViewTagKey);
    objj_msgSend(aCoder, "encodeRect:forKey:", self._frame, CPViewFrameKey);
    objj_msgSend(aCoder, "encodeRect:forKey:", self._bounds, CPViewBoundsKey);
    objj_msgSend(aCoder, "encodeConditionalObject:forKey:", self._window, CPViewWindowKey);
    var count = objj_msgSend(self._subviews, "count"),
        encodedSubviews = self._subviews;
    if (count > 0 && objj_msgSend(self._ephemeralSubviews, "count") > 0)
    {
        encodedSubviews = objj_msgSend(encodedSubviews, "copy");
        while (count--)
            if (objj_msgSend(self._ephemeralSubviews, "containsObject:", encodedSubviews[count]))
                encodedSubviews.splice(count, 1);
    }
    if (encodedSubviews.length > 0)
        objj_msgSend(aCoder, "encodeObject:forKey:", encodedSubviews, CPViewSubviewsKey);
    if (self._superview !== nil)
        objj_msgSend(aCoder, "encodeConditionalObject:forKey:", self._superview, CPViewSuperviewKey);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._autoresizingMask, CPViewAutoresizingMaskKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._autoresizesSubviews, CPViewAutoresizesSubviewsKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._backgroundColor, CPViewBackgroundColorKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._hitTests, CPViewHitTestsKey);
    objj_msgSend(aCoder, "encodeFloat:forKey:", self._opacity, CPViewOpacityKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._isHidden, CPViewIsHiddenKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._toolTip, CPViewToolTipKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._identifier, CPReuseIdentifierKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._themeAttributes, CPViewThemeAttributesKey);
}

)]);
}var _CPViewGetTransform = function(fromView, toView)
{
    var transform = CGAffineTransformMakeIdentity(),
        sameWindow = YES,
        fromWindow = nil,
        toWindow = nil;
    if (fromView)
    {
        var view = fromView;
        while (view && view != toView)
        {
            var frame = view._frame;
            transform.tx += CGRectGetMinX(frame);
            transform.ty += CGRectGetMinY(frame);
            if (view._boundsTransform)
            {
                CGAffineTransformConcatTo(transform, view._boundsTransform, transform);
            }            view = view._superview;
        }        if (view === toView)
            return transform;
        else if (fromView && toView)
        {
            fromWindow = objj_msgSend(fromView, "window");
            toWindow = objj_msgSend(toView, "window");
            if (fromWindow && toWindow && fromWindow !== toWindow)
            {
                sameWindow = NO;
                var frame = objj_msgSend(fromWindow, "frame");
                transform.tx += CGRectGetMinX(frame);
                transform.ty += CGRectGetMinY(frame);
            }        }    }    var view = toView;
    while (view)
    {
        var frame = view._frame;
        transform.tx -= CGRectGetMinX(frame);
        transform.ty -= CGRectGetMinY(frame);
        if (view._boundsTransform)
        {
            CGAffineTransformConcatTo(transform, view._inverseBoundsTransform, transform);
        }        view = view._superview;
    }    if (!sameWindow)
    {
        var frame = objj_msgSend(toWindow, "frame");
        transform.tx -= CGRectGetMinX(frame);
        transform.ty -= CGRectGetMinY(frame);
    }    return transform;
};
{var the_class = objj_allocateClassPair(CPObject, "_CPSplitViewDivider"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_orientation"), new objj_ivar("_thickness"), new objj_ivar("_index"), new objj_ivar("_position"), new objj_ivar("_minPosition"), new objj_ivar("_maxPosition"), new objj_ivar("_splitView"), new objj_ivar("_fixed"), new objj_ivar("_DOMElement")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("orientation"), function $_CPSplitViewDivider__orientation(self, _cmd)
{
    return self._orientation;
}

), new objj_method(sel_getUid("_setOrientation:"), function $_CPSplitViewDivider___setOrientation_(self, _cmd, newValue)
{
    self._orientation = newValue;
}

), new objj_method(sel_getUid("thickness"), function $_CPSplitViewDivider__thickness(self, _cmd)
{
    return self._thickness;
}

), new objj_method(sel_getUid("_setThickness:"), function $_CPSplitViewDivider___setThickness_(self, _cmd, newValue)
{
    self._thickness = newValue;
}

), new objj_method(sel_getUid("index"), function $_CPSplitViewDivider__index(self, _cmd)
{
    return self._index;
}

), new objj_method(sel_getUid("setIndex:"), function $_CPSplitViewDivider__setIndex_(self, _cmd, newValue)
{
    self._index = newValue;
}

), new objj_method(sel_getUid("position"), function $_CPSplitViewDivider__position(self, _cmd)
{
    return self._position;
}

), new objj_method(sel_getUid("_setPosition:"), function $_CPSplitViewDivider___setPosition_(self, _cmd, newValue)
{
    self._position = newValue;
}

), new objj_method(sel_getUid("minPosition"), function $_CPSplitViewDivider__minPosition(self, _cmd)
{
    return self._minPosition;
}

), new objj_method(sel_getUid("setMinPosition:"), function $_CPSplitViewDivider__setMinPosition_(self, _cmd, newValue)
{
    self._minPosition = newValue;
}

), new objj_method(sel_getUid("maxPosition"), function $_CPSplitViewDivider__maxPosition(self, _cmd)
{
    return self._maxPosition;
}

), new objj_method(sel_getUid("setMaxPosition:"), function $_CPSplitViewDivider__setMaxPosition_(self, _cmd, newValue)
{
    self._maxPosition = newValue;
}

), new objj_method(sel_getUid("fixed"), function $_CPSplitViewDivider__fixed(self, _cmd)
{
    return self._fixed;
}

), new objj_method(sel_getUid("_setFixed:"), function $_CPSplitViewDivider___setFixed_(self, _cmd, newValue)
{
    self._fixed = newValue;
}

), new objj_method(sel_getUid("init"), function $_CPSplitViewDivider__init(self, _cmd)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPSplitViewDivider").super_class }, "init");
    if (self)
    {
        self._DOMElement = ($("<div></div>")).addClass("view-divider");
        self._DOMElement.attr("role", "separator");
        self._DOMElement.bind("mousedown click",         function(evt)
        {
            evt.stopPropagation();
            evt.preventDefault();
            if (!self._fixed)
            {
                if (evt.which < 2 && evt.type === "mousedown")
                    self._splitView._selectedDivider = self;
                objj_msgSend(CPDOMEventDispatcher, "dispatchDOMMouseEvent:toView:", evt, self._splitView);
            }        });
        objj_msgSend(self, "setThickness:", 9.0);
        objj_msgSend(self, "setOrientation:", 0);
        objj_msgSend(self, "setFixed:", NO);
        objj_msgSend(self, "setPosition:", 0);
    }
    return self;
}

), new objj_method(sel_getUid("setOrientation:"), function $_CPSplitViewDivider__setOrientation_(self, _cmd, orientation)
{
    self._orientation = orientation;
    self._DOMElement.removeClass("horizontal");
    self._DOMElement.removeClass("vertical");
    if (self._orientation === 0)
    {
        self._DOMElement.attr("aria-orientation", "horizontal");
        self._DOMElement.addClass("horizontal");
    }
    else
    {
        self._DOMElement.attr("aria-orientation", "vertical");
        self._DOMElement.addClass("vertical");
    }
}

), new objj_method(sel_getUid("setFixed:"), function $_CPSplitViewDivider__setFixed_(self, _cmd, fixed)
{
    self._fixed = fixed;
    if (self._fixed)
        self._DOMElement.addClass("fixed");
    else
        self._DOMElement.removeClass("fixed");
}

), new objj_method(sel_getUid("setPosition:"), function $_CPSplitViewDivider__setPosition_(self, _cmd, pos)
{
    self._position = pos;
    if (self._orientation === 0)
    {
        self._DOMElement.css({top: 0, left: self._position});
    }
    else
    {
        self._DOMElement.css({top: self._position, left: 0});
    }
}

), new objj_method(sel_getUid("setThickness:"), function $_CPSplitViewDivider__setThickness_(self, _cmd, thickness)
{
    self._thickness = thickness;
    self._DOMElement.removeClass("no-thick");
    if (self._thickness === 0)
        self._DOMElement.addClass("no-thick");
    if (self._orientation === 0)
    {
        self._DOMElement.css({height: "100%", width: self._thickness});
    }
    else
    {
        self._DOMElement.css({width: "100%", height: self._thickness});
    }
}

)]);
}{var the_class = objj_allocateClassPair(CPView, "CPSplitView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_dividerThickness"), new objj_ivar("_orientation"), new objj_ivar("_minPositions"), new objj_ivar("_maxPositions"), new objj_ivar("_dividers"), new objj_ivar("_fixedDividers"), new objj_ivar("_selectedDivider")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("dividerThickness"), function $CPSplitView__dividerThickness(self, _cmd)
{
    return self._dividerThickness;
}

), new objj_method(sel_getUid("setDividerThickness:"), function $CPSplitView__setDividerThickness_(self, _cmd, newValue)
{
    self._dividerThickness = newValue;
}

), new objj_method(sel_getUid("orientation"), function $CPSplitView__orientation(self, _cmd)
{
    return self._orientation;
}

), new objj_method(sel_getUid("setOrientation:"), function $CPSplitView__setOrientation_(self, _cmd, newValue)
{
    self._orientation = newValue;
}

), new objj_method(sel_getUid("initWithFrame:"), function $CPSplitView__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSplitView").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._minPositions = {};
        self._maxPositions = {};
        self._dividers = [];
        self._fixedDividers = {};
        self._selectedDivider = null;
        self._orientation = 0;
        self._dividerThickness = 9.0;
        self._DOMElement.addClass("cpsplitview");
    }
    return self;
}

), new objj_method(sel_getUid("setMaxPosition:forDividerAtIndex:"), function $CPSplitView__setMaxPosition_forDividerAtIndex_(self, _cmd, pos, index)
{
    self._maxPositions[index] = pos;
    if (index > -1 && index < self._dividers.length)
    {
        objj_msgSend(self._dividers[index], "setMaxPosition:", pos);
    }
}

), new objj_method(sel_getUid("setMinPosition:forDividerAtIndex:"), function $CPSplitView__setMinPosition_forDividerAtIndex_(self, _cmd, pos, index)
{
    self._minPositions[index] = pos;
    if (index > -1 && index < self._dividers.length)
    {
        objj_msgSend(self._dividers[index], "setMinPosition:", pos);
    }
}

), new objj_method(sel_getUid("fixDivider:atIndex:"), function $CPSplitView__fixDivider_atIndex_(self, _cmd, aFlag, index)
{
    if (aFlag)
    {
        self._fixedDividers[index] = 1;
    }
    else
    {
        if (self._fixedDividers.hasOwnProperty(index))
        {
            delete self._fixedDividers[index];
        }
    }
    if (index > -1 && index < self._dividers.length)
    {
        objj_msgSend(self._dividers[index], "setFixed:", aFlag);
    }
}

), new objj_method(sel_getUid("layoutSubviews"), function $CPSplitView__layoutSubviews(self, _cmd)
{
    var count = self._dividers.length,
        index = 0;
    for (; index < count; index++)
    {
        self._dividers[index]._DOMElement.remove();
    }
    self._dividers = [];
    if (self._orientation === 0)
        objj_msgSend(self, "layoutHorizontal");
    else
        objj_msgSend(self, "layoutVertical");
}

), new objj_method(sel_getUid("_createDividerAtIndex:withPosition:"), function $CPSplitView___createDividerAtIndex_withPosition_(self, _cmd, dividerIndex, startPos)
{
    var minPos = -1,
        maxPos = Number.MAX_VALUE;
    if (self._minPositions[dividerIndex] != undefined)
        minPos = self._minPositions[dividerIndex];
    if (self._maxPositions[dividerIndex] != undefined)
        maxPos = self._maxPositions[dividerIndex];
    var divider = objj_msgSend(objj_msgSend(_CPSplitViewDivider, "alloc"), "init");
    objj_msgSend(divider, "setMaxPosition:", maxPos);
    objj_msgSend(divider, "setMinPosition:", minPos);
    objj_msgSend(divider, "setOrientation:", self._orientation);
    objj_msgSend(divider, "setThickness:", self._dividerThickness);
    objj_msgSend(divider, "setFixed:", self._fixedDividers.hasOwnProperty(dividerIndex));
    objj_msgSend(divider, "setIndex:", dividerIndex);
    objj_msgSend(divider, "setPosition:", startPos);
    divider._splitView = self;
    self._DOMElement.append(divider._DOMElement);
    objj_msgSend(self._dividers, "addObject:", divider);
}

), new objj_method(sel_getUid("setFrameSize:"), function $CPSplitView__setFrameSize_(self, _cmd, aSize)
{
    var size = self._frame.size;
    if (!aSize || CGSizeEqualToSize(size, aSize))
        return;
    var oldSize = CGSizeCreateCopy(self._frame.size);
    var dx = aSize.width - oldSize.width,
        dy = aSize.height - oldSize.height;
    size.width = aSize.width;
    size.height = aSize.height;
    self._DOMElement.css({width: size.width, height: size.height});
    var count = self._subviews.length;
    if (self._orientation === 0)
    {
        var viewWidthExp = 0;
        for (var i = 0; i < count; i++)
        {
            var aView = self._subviews[i];
            var mask = objj_msgSend(aView, "autoresizingMask");
            if (mask & CPViewWidthSizable)
                viewWidthExp++;
        }
        var dxPerView = dx;
        if (viewWidthExp > 0)
            dxPerView = dx / viewWidthExp;
        for (var i = 0; i < count; i++)
        {
            var aView = self._subviews[i];
            var mask = objj_msgSend(aView, "autoresizingMask");
            var newFrame = objj_msgSend(aView, "frame");
            if (mask & CPViewHeightSizable)
            {
                var dy = size.height - oldSize.height;
                newFrame.size.height += dy;
            }
            if (mask & CPViewWidthSizable)
            {
                newFrame.size.width += dxPerView;
            }
            objj_msgSend(aView, "setFrame:", newFrame);
        }
    }
    else
    {
        var viewHeightExp = 0;
        for (var i = 0; i < count; i++)
        {
            var aView = self._subviews[i];
            var mask = objj_msgSend(aView, "autoresizingMask");
            if (mask & CPViewHeightSizable)
                viewHeightExp++;
        }
        var dyPerView = dy;
        if (viewHeightExp > 0)
            dyPerView = dy / viewHeightExp;
        for (var i = 0; i < count; i++)
        {
            var aView = self._subviews[i];
            var mask = objj_msgSend(aView, "autoresizingMask");
            var newFrame = objj_msgSend(aView, "frame");
            if (mask & CPViewWidthSizable)
            {
                var dx = size.width - oldSize.width;
                newFrame.size.width += dx;
            }
            if (mask & CPViewHeightSizable)
            {
                newFrame.size.height += dyPerView;
            }
            objj_msgSend(aView, "setFrame:", newFrame);
        }
    }
    objj_msgSend(self, "setNeedsLayout");
}

), new objj_method(sel_getUid("layoutVertical"), function $CPSplitView__layoutVertical(self, _cmd)
{
    var divIndex = 0,
        count = self._subviews.length,
        index = 0;
    for (; index < count; index++)
    {
        var aView = self._subviews[index],
            startPos = 0;
        if (index > 0)
        {
            var prevFrame = objj_msgSend(self._subviews[index - 1], "frame");
            startPos = CGRectGetMaxY(prevFrame) + self._dividerThickness;
        }
        if (index === count - 1)
        {
            var h = self._frame.size.height - startPos;
            objj_msgSend(aView, "setFrame:", CGRectMake(0, startPos, self._frame.size.width, h));
        }
        else
        {
            var minPos = 0,
                maxPos = Number.MAX_VALUE;
            if (self._minPositions[index] != undefined)
            {
                minPos = self._minPositions[index];
            }
            if (self._maxPositions[index] != undefined)
            {
                maxPos = self._maxPositions[index];
            }
            var h = Math.min(maxPos, Math.max(CGRectGetHeight(objj_msgSend(aView, "frame")), minPos));
            objj_msgSend(aView, "setFrame:", CGRectMake(0, startPos, self._frame.size.width, h));
            objj_msgSend(self, "_createDividerAtIndex:withPosition:", divIndex, startPos + h);
            divIndex++;
        }
        var mask = objj_msgSend(aView, "autoresizingMask");
        objj_msgSend(aView, "setAutoresizingMask:", mask | CPViewWidthSizable);
    }
}

), new objj_method(sel_getUid("layoutHorizontal"), function $CPSplitView__layoutHorizontal(self, _cmd)
{
    var divIndex = 0,
        count = self._subviews.length,
        index = 0;
    for (; index < count; index++)
    {
        var aView = self._subviews[index],
            startPos = 0;
        if (index > 0)
        {
            var prevFrame = objj_msgSend(self._subviews[index - 1], "frame");
            startPos = CGRectGetMaxX(prevFrame) + self._dividerThickness;
        }
        if (index === count - 1)
        {
            var w = self._frame.size.width - startPos;
            objj_msgSend(aView, "setFrame:", CGRectMake(startPos, 0, w, self._frame.size.height));
        }
        else
        {
            var minPos = 0,
                maxPos = Number.MAX_VALUE;
            if (self._minPositions[index] != undefined)
            {
                minPos = self._minPositions[index];
            }
            if (self._maxPositions[index] != undefined)
            {
                maxPos = self._maxPositions[index];
            }
            var w = Math.min(maxPos, Math.max(CGRectGetWidth(objj_msgSend(aView, "frame")), minPos));
            objj_msgSend(aView, "setFrame:", CGRectMake(startPos, 0, w, self._frame.size.height));
            objj_msgSend(self, "_createDividerAtIndex:withPosition:", divIndex, startPos + w);
            divIndex++;
        }
        var mask = objj_msgSend(aView, "autoresizingMask");
        objj_msgSend(aView, "setAutoresizingMask:", mask | CPViewHeightSizable);
    }
}

), new objj_method(sel_getUid("positionOfDividerAtIndex:"), function $CPSplitView__positionOfDividerAtIndex_(self, _cmd, dividerIndex)
{
    if (dividerIndex > -1 && dividerIndex < self._dividers.length)
    {
        return objj_msgSend(self._dividers[dividerIndex], "position");
    }
    return -1;
}

), new objj_method(sel_getUid("setPosition:ofDividerAtIndex:"), function $CPSplitView__setPosition_ofDividerAtIndex_(self, _cmd, position, dividerIndex)
{
    if (dividerIndex > -1 && dividerIndex < self._dividers.length)
    {
        var divider = self._dividers[dividerIndex];
        var pos = position;
        if (self._orientation === 0)
        {
            var leftView = self._subviews[dividerIndex];
            var rightView = self._subviews[dividerIndex + 1];
            var leftFrame = objj_msgSend(leftView, "frame");
            var rightFrame = objj_msgSend(rightView, "frame");
            pos = MIN(MIN(objj_msgSend(divider, "maxPosition"), CGRectGetMaxX(rightFrame) - self._dividerThickness), MAX(objj_msgSend(divider, "minPosition"), MAX(leftFrame.origin.x, pos)));
            objj_msgSend(divider, "setPosition:", pos);
            var dX = pos - CGRectGetMaxX(leftFrame);
            leftFrame.size.width = MAX(0, leftFrame.size.width + dX);
            objj_msgSend(leftView, "setFrameSize:", leftFrame.size);
            rightFrame.origin.x = MAX(0, rightFrame.origin.x + dX);
            rightFrame.size.width = MAX(0, rightFrame.size.width - dX);
            objj_msgSend(rightView, "setFrame:", rightFrame);
        }
        else
        {
            var topView = self._subviews[dividerIndex];
            var bottomView = self._subviews[dividerIndex + 1];
            var topFrame = objj_msgSend(topView, "frame");
            var bottomFrame = objj_msgSend(bottomView, "frame");
            pos = MIN(MIN(objj_msgSend(divider, "maxPosition"), CGRectGetMaxY(bottomFrame) - self._dividerThickness), MAX(objj_msgSend(divider, "minPosition"), MAX(topFrame.origin.y, pos)));
            objj_msgSend(divider, "setPosition:", pos);
            var dY = pos - CGRectGetMaxY(topFrame);
            topFrame.size.height = MAX(0, topFrame.size.height + dY);
            objj_msgSend(topView, "setFrameSize:", topFrame.size);
            bottomFrame.origin.y = MAX(0, bottomFrame.origin.y + dY);
            bottomFrame.size.height = MAX(0, bottomFrame.size.height - dY);
            objj_msgSend(bottomView, "setFrame:", bottomFrame);
        }
    }
}

), new objj_method(sel_getUid("mouseUp:"), function $CPSplitView__mouseUp_(self, _cmd, theEvent)
{
    self._selectedDivider = Nil;
    self._DOMElement.css("cursor", "inherit");
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSplitView").super_class }, "mouseUp:", theEvent);
}

), new objj_method(sel_getUid("mouseDragged:"), function $CPSplitView__mouseDragged_(self, _cmd, theEvent)
{
    objj_msgSend(self, "_dragDividerWithMouseEvent:", theEvent);
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSplitView").super_class }, "mouseDragged:", theEvent);
}

), new objj_method(sel_getUid("_dragDividerWithMouseEvent:"), function $CPSplitView___dragDividerWithMouseEvent_(self, _cmd, theEvent)
{
    if (self._selectedDivider)
    {
        if (!objj_msgSend(self._selectedDivider, "fixed"))
        {
            var pospt = objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(theEvent, "locationInWindow"), nil);
            var pos = 0;
            if (self._orientation === 0)
            {
                self._DOMElement.css("cursor", "col-resize");
                pos = pospt.x - self._dividerThickness;
            }
            else
            {
                self._DOMElement.css("cursor", "row-resize");
                pos = pospt.y - self._dividerThickness;
            }
            objj_msgSend(self, "setPosition:ofDividerAtIndex:", pos, objj_msgSend(self._selectedDivider, "index"));
        }
    }
}

)]);
}var CPSplitViewDividerThicknessKey = "CPSplitViewDividerThicknessKey",
    CPSplitViewOrientationKey = "CPSplitViewOrientationKey";
{
var the_class = objj_getClass("CPSplitView")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPSplitView\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPSplitView__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSplitView").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        self._minPositions = {};
        self._maxPositions = {};
        self._dividers = [];
        self._fixedDividers = [];
        self._selectedDivider = null;
        self._DOMElement.addClass("cpsplitview");
        objj_msgSend(self, "setDividerThickness:", objj_msgSend(aCoder, "decodeFloatForKey:", CPSplitViewDividerThicknessKey));
        objj_msgSend(self, "setOrientation:", objj_msgSend(aCoder, "decodeIntForKey:", CPSplitViewOrientationKey));
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPSplitView__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSplitView").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeFloat:forKey:", self._dividerThickness, CPSplitViewDividerThicknessKey);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._orientation, CPSplitViewOrientationKey);
}

)]);
}{var the_class = objj_allocateClassPair(CPView, "_CPColorWheel"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_delegate"), new objj_ivar("_angle"), new objj_ivar("_distance"), new objj_ivar("_blackWheel"), new objj_ivar("_selectBox")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("delegate"), function $_CPColorWheel__delegate(self, _cmd)
{
    return self._delegate;
}

), new objj_method(sel_getUid("setDelegate:"), function $_CPColorWheel__setDelegate_(self, _cmd, newValue)
{
    self._delegate = newValue;
}

), new objj_method(sel_getUid("angle"), function $_CPColorWheel__angle(self, _cmd)
{
    return self._angle;
}

), new objj_method(sel_getUid("setAngle:"), function $_CPColorWheel__setAngle_(self, _cmd, newValue)
{
    self._angle = newValue;
}

), new objj_method(sel_getUid("distance"), function $_CPColorWheel__distance(self, _cmd)
{
    return self._distance;
}

), new objj_method(sel_getUid("setDistance:"), function $_CPColorWheel__setDistance_(self, _cmd, newValue)
{
    self._distance = newValue;
}

), new objj_method(sel_getUid("init"), function $_CPColorWheel__init(self, _cmd)
{
    return objj_msgSend(self, "initWithFrame:", CGRectMake(0, 0, 220, 220));
}

), new objj_method(sel_getUid("initWithFrame:"), function $_CPColorWheel__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPColorWheel").super_class }, "initWithFrame:", CGRectMake(aFrame.origin.x, aFrame.origin.y, 220, 220));
    if (self)
    {
        self._DOMElement.addClass("cpcolorpanel-colorwheel");
        self._blackWheel = ($("<div></div>")).addClass("cpcolorpanel-blackwheel");
        self._blackWheel.css({position: "absolute", top: 0, left: 0, width: 220, height: 220});
        self._DOMElement.append(self._blackWheel);
        self._selectBox = ($("<div></div>")).addClass("cpcolorpanel-colorwheel-selectbox");
        self._DOMElement.append(self._selectBox);
        objj_msgSend(self, "setWheelBrightness:", 1.0);
        objj_msgSend(self, "setPositionToColor:", objj_msgSend(CPColor, "colorWithWhite:alpha:", 0.0, 1.0));
    }
    return self;
}

), new objj_method(sel_getUid("reposition:"), function $_CPColorWheel__reposition_(self, _cmd, theEvent)
{
    var bounds = objj_msgSend(self, "bounds"),
        location = objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(theEvent, "locationInWindow"), nil),
        midX = CGRectGetMidX(bounds),
        midY = CGRectGetMidY(bounds),
        distance = ROUND(MIN(SQRT((location.x - midX) * (location.x - midX) + (location.y - midY) * (location.y - midY)), 105.0)),
        angleRad = ATAN2(location.y - midY, location.x - midX);
    objj_msgSend(self, "setAngle:distance:", angleRad, distance / 105.0);
    if (self._delegate && objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("colorWheelDidChange:")))
        objj_msgSend(self._delegate, "colorWheelDidChange:", self);
}

), new objj_method(sel_getUid("setPositionToColor:"), function $_CPColorWheel__setPositionToColor_(self, _cmd, aColor)
{
    var hsb = objj_msgSend(aColor, "hsbComponents"),
        angleRad = objj_msgSend(self, "degreesToRadians:", hsb[0] * 359.0),
        distance = hsb[1];
    objj_msgSend(self, "setAngle:distance:", angleRad, distance);
}

), new objj_method(sel_getUid("setAngle:distance:"), function $_CPColorWheel__setAngle_distance_(self, _cmd, angleRad, distance)
{
    var bounds = objj_msgSend(self, "bounds"),
        midX = CGRectGetMidX(bounds),
        midY = CGRectGetMidY(bounds);
    self._angle = objj_msgSend(self, "radiansToDegrees:", angleRad);
    self._distance = distance * 100.0;
    self._selectBox.css({left: COS(angleRad) * distance * 105 + midX - 3.0, top: SIN(angleRad) * distance * 105 + midY - 3.0});
}

), new objj_method(sel_getUid("setWheelBrightness:"), function $_CPColorWheel__setWheelBrightness_(self, _cmd, brightness)
{
    self._blackWheel.css({opacity: 1.0 - brightness, filter: "alpha(opacity=" + (1.0 - brightness) * 100 + ")"});
}

), new objj_method(sel_getUid("degreesToRadians:"), function $_CPColorWheel__degreesToRadians_(self, _cmd, degrees)
{
    return -((degrees - 360.0) / 180.0) * PI;
}

), new objj_method(sel_getUid("radiansToDegrees:"), function $_CPColorWheel__radiansToDegrees_(self, _cmd, radians)
{
    return (-radians / PI * 180.0 + 360.0) % 360;
}

), new objj_method(sel_getUid("mouseDown:"), function $_CPColorWheel__mouseDown_(self, _cmd, theEvent)
{
    objj_msgSend(self, "reposition:", theEvent);
}

), new objj_method(sel_getUid("mouseDragged:"), function $_CPColorWheel__mouseDragged_(self, _cmd, theEvent)
{
    objj_msgSend(self, "reposition:", theEvent);
}

)]);
}var CPNumberUIDs = {};
{var the_class = objj_allocateClassPair(CPObject, "CPNumber"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithBool:"), function $CPNumber__initWithBool_(self, _cmd, aBoolean)
{
    return aBoolean;
}

), new objj_method(sel_getUid("initWithChar:"), function $CPNumber__initWithChar_(self, _cmd, aChar)
{
    if (aChar.charCodeAt)
        return aChar.charCodeAt(0);
    return aChar;
}

), new objj_method(sel_getUid("initWithDouble:"), function $CPNumber__initWithDouble_(self, _cmd, aDouble)
{
    return aDouble;
}

), new objj_method(sel_getUid("initWithInt:"), function $CPNumber__initWithInt_(self, _cmd, anInt)
{
    return anInt;
}

), new objj_method(sel_getUid("UID"), function $CPNumber__UID(self, _cmd)
{
    var UID = CPNumberUIDs["n" + self];
    if (UID === undefined)
    {
        UID = objj_generateObjectUID();
        CPNumberUIDs["n" + self] = "" + UID;
    }
    return UID + "";
}

), new objj_method(sel_getUid("boolValue"), function $CPNumber__boolValue(self, _cmd)
{
    return self ? true : false;
}

), new objj_method(sel_getUid("charValue"), function $CPNumber__charValue(self, _cmd)
{
    return String.fromCharCode(self);
}

), new objj_method(sel_getUid("doubleValue"), function $CPNumber__doubleValue(self, _cmd)
{
    if (typeof self == "boolean")
        return self ? 1 : 0;
    return self;
}

), new objj_method(sel_getUid("intValue"), function $CPNumber__intValue(self, _cmd)
{
    if (typeof self == "boolean")
        return self ? 1 : 0;
    return self;
}

), new objj_method(sel_getUid("stringValue"), function $CPNumber__stringValue(self, _cmd)
{
    return self.toString();
}

), new objj_method(sel_getUid("compare:"), function $CPNumber__compare_(self, _cmd, aNumber)
{
    if (self > aNumber)
        return CPOrderedDescending;
    else if (self < aNumber)
        return CPOrderedAscending;
    return CPOrderedSame;
}

), new objj_method(sel_getUid("isEqualToNumber:"), function $CPNumber__isEqualToNumber_(self, _cmd, aNumber)
{
    return self == aNumber;
}

), new objj_method(sel_getUid("isEqual:"), function $CPNumber__isEqual_(self, _cmd, anObject)
{
    return self === anObject || objj_msgSend(anObject, "isKindOfClass:", objj_msgSend(self, "class")) && objj_msgSend(self, "isEqualToNumber:", anObject);
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPNumber__alloc(self, _cmd)
{
    var result = new Number();
    result.isa = objj_msgSend(self, "class");
    return result;
}

), new objj_method(sel_getUid("numberWithBool:"), function $CPNumber__numberWithBool_(self, _cmd, aBoolean)
{
    return aBoolean;
}

), new objj_method(sel_getUid("numberWithChar:"), function $CPNumber__numberWithChar_(self, _cmd, aChar)
{
    if (aChar.charCodeAt)
        return aChar.charCodeAt(0);
    return aChar;
}

), new objj_method(sel_getUid("numberWithDouble:"), function $CPNumber__numberWithDouble_(self, _cmd, aDouble)
{
    return aDouble;
}

), new objj_method(sel_getUid("numberWithInt:"), function $CPNumber__numberWithInt_(self, _cmd, anInt)
{
    return anInt;
}

)]);
}{
var the_class = objj_getClass("CPNumber")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPNumber\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPNumber__initWithCoder_(self, _cmd, aCoder)
{
    return objj_msgSend(aCoder, "decodeNumber");
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPNumber__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPNumber").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeNumber:forKey:", self, "self");
}

)]);
}Number.prototype.isa = CPNumber;
Boolean.prototype.isa = CPNumber;
var CPNumberFormatterNoStyle = 0,
    CPNumberFormatterDecimalStyle = 1,
    CPNumberFormatterCurrencyStyle = 2,
    CPNumberFormatterPercentStyle = 3,
    CPNumberFormatterScientificStyle = 4;
{var the_class = objj_allocateClassPair(CPObject, "CPNumberFormatter"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_numberStyle"), new objj_ivar("_groupingSeparator"), new objj_ivar("_fractionDigits"), new objj_ivar("_currencyCode"), new objj_ivar("_currencySymbol")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("numberStyle"), function $CPNumberFormatter__numberStyle(self, _cmd)
{
    return self._numberStyle;
}

), new objj_method(sel_getUid("setNumberStyle:"), function $CPNumberFormatter__setNumberStyle_(self, _cmd, newValue)
{
    self._numberStyle = newValue;
}

), new objj_method(sel_getUid("groupingSeparator"), function $CPNumberFormatter__groupingSeparator(self, _cmd)
{
    return self._groupingSeparator;
}

), new objj_method(sel_getUid("setGroupingSeparator:"), function $CPNumberFormatter__setGroupingSeparator_(self, _cmd, newValue)
{
    self._groupingSeparator = newValue;
}

), new objj_method(sel_getUid("numberOfFractionDigits"), function $CPNumberFormatter__numberOfFractionDigits(self, _cmd)
{
    return self._fractionDigits;
}

), new objj_method(sel_getUid("setNumberOfFractionDigits:"), function $CPNumberFormatter__setNumberOfFractionDigits_(self, _cmd, newValue)
{
    self._fractionDigits = newValue;
}

), new objj_method(sel_getUid("currencyCode"), function $CPNumberFormatter__currencyCode(self, _cmd)
{
    return self._currencyCode;
}

), new objj_method(sel_getUid("setCurrencyCode:"), function $CPNumberFormatter__setCurrencyCode_(self, _cmd, newValue)
{
    self._currencyCode = newValue;
}

), new objj_method(sel_getUid("currencySymbol"), function $CPNumberFormatter__currencySymbol(self, _cmd)
{
    return self._currencySymbol;
}

), new objj_method(sel_getUid("setCurrencySymbol:"), function $CPNumberFormatter__setCurrencySymbol_(self, _cmd, newValue)
{
    self._currencySymbol = newValue;
}

), new objj_method(sel_getUid("init"), function $CPNumberFormatter__init(self, _cmd)
{
    if (self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPNumberFormatter").super_class }, "init"))
    {
        self._fractionDigits = 2;
        self._groupingSeparator = Nil;
        self._numberStyle = CPNumberFormatterDecimalStyle;
        self._currencyCode = "USD";
        self._currencySymbol = "$";
    }
    return self;
}

), new objj_method(sel_getUid("stringFromNumber:"), function $CPNumberFormatter__stringFromNumber_(self, _cmd, number)
{
    if (self._numberStyle == CPNumberFormatterPercentStyle)
    {
        number *= 100.0;
    }
    var dcmn = objj_msgSend(number, "doubleValue");
    switch(self._numberStyle) {
        case CPNumberFormatterCurrencyStyle:
        case CPNumberFormatterDecimalStyle:
        case CPNumberFormatterPercentStyle:
        {
            var string = dcmn.toFixed(self._fractionDigits);
            if (self._numberStyle === CPNumberFormatterCurrencyStyle)
            {
                dcmn = objj_msgSend(string, "doubleValue");
                string = dcmn.toFixed(2);
                if (self._currencySymbol)
                    string = self._currencySymbol + string;
                else
                    string = self._currencyCode + string;
            }
            if (self._numberStyle == CPNumberFormatterPercentStyle)
            {
                string += "%";
            }
            if (self._groupingSeparator)
            {
                var decPos = string.lastIndexOf(".");
                var preFrac = string;
                if (decPos > -1)
                    preFrac = string.substring(0, decPos);
                var len = preFrac.length;
                var groupingSeparatorList = [];
                var dcount = 0;
                for (var i = len; i >= 0; i--)
                {
                    if (dcount === 3 && i != 0)
                    {
                        groupingSeparatorList.push(i);
                        dcount = 0;
                    }
                    dcount++;
                }
                var ngs = groupingSeparatorList.length;
                for (var i = 0; i < ngs; i++)
                {
                    var index = groupingSeparatorList[i];
                    string = string.substring(0, index) + self._groupingSeparator + string.substring(index);
                }
            }
            return string;
        }
            break;
        case CPNumberFormatterScientificStyle:
        {
        }
            break;
    }
    return objj_msgSend(number, "stringValue");
}

)]);
}var CPNumberFormatterStyleKey = "CPNumberFormatterStyleKey",
    CPNumberFormatterFractionDigitsKey = "CPNumberFormatterFractionDigitsKey",
    CPNumberFormatterGroupingSeparatorKey = "CPNumberFormatterGroupingSeparatorKey",
    CPNumberFormatterCurrencyCodeKey = "CPNumberFormatterCurrencyCodeKey",
    CPNumberFormatterCurrencySymbolKey = "CPNumberFormatterCurrencySymbolKey";
{
var the_class = objj_getClass("CPNumberFormatter")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPNumberFormatter\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPNumberFormatter__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPNumberFormatter").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        self._numberStyle = objj_msgSend(aCoder, "decodeIntForKey:", CPNumberFormatterStyleKey);
        self._fractionDigits = objj_msgSend(aCoder, "decodeIntForKey:", CPNumberFormatterFractionDigitsKey);
        self._groupingSeparator = objj_msgSend(aCoder, "decodeObjectForKey:", CPNumberFormatterGroupingSeparatorKey);
        self._currencyCode = objj_msgSend(aCoder, "decodeObjectForKey:", CPNumberFormatterCurrencyCodeKey);
        self._currencySymbol = objj_msgSend(aCoder, "decodeObjectForKey:", CPNumberFormatterCurrencySymbolKey);
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPNumberFormatter__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPNumberFormatter").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._numberStyle, CPNumberFormatterStyleKey);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._fractionDigits, CPNumberFormatterFractionDigitsKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._groupingSeparator, CPNumberFormatterGroupingSeparatorKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._currencyCode, CPNumberFormatterCurrencyCodeKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._currencySymbol, CPNumberFormatterCurrencySymbolKey);
}

)]);
}{var the_class = objj_allocateClassPair(CPObject, "CPDateFormatter"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_dateFormat")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("dateFormat"), function $CPDateFormatter__dateFormat(self, _cmd)
{
    return self._dateFormat;
}

), new objj_method(sel_getUid("setDateFormat:"), function $CPDateFormatter__setDateFormat_(self, _cmd, newValue)
{
    self._dateFormat = newValue;
}

), new objj_method(sel_getUid("init"), function $CPDateFormatter__init(self, _cmd)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPDateFormatter").super_class }, "init");
    if (self)
    {
        self._dateFormat = Nil;
    }
    return self;
}

), new objj_method(sel_getUid("stringFromDate:"), function $CPDateFormatter__stringFromDate_(self, _cmd, aDate)
{
    if (self._dateFormat)
        return aDate.format(self._dateFormat);
    return objj_msgSend(aDate, "description");
}

)]);
}{
var the_class = objj_getClass("CPDateFormatter")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPDateFormatter\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPDateFormatter__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPDateFormatter").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        self._dateFormat = objj_msgSend(aCoder, "decodeObjectForKey:", "CPDateFormatterDateFormatKey");
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPDateFormatter__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPDateFormatter").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._dateFormat, "CPDateFormatterDateFormatKey");
}

)]);
}var dateFormat = (function()
{
    var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
        timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
        timezoneClip = /[^-+\dA-Z]/g,
        pad =     function(val, len)
    {
        val = String(val);
        len = len || 2;
        while (val.length < len)
            val = "0" + val;
        return val;
    };
    return     function(date, mask, utc)
    {
        var dF = dateFormat;
        var objStr = Object.prototype.toString.call(date);
        if (arguments.length == 1 && objStr.substring(1, objStr.length - 1) === "object String" && !/\d/.test(date))
        {
            mask = date;
            date = undefined;
        }        date = date ? new Date(date) : new Date();
        if (isNaN(date))
            throw SyntaxError("invalid date");
        mask = String(dF.masks[mask] || mask || dF.masks["default"]);
        if (mask.slice(0, 4) == "UTC:")
        {
            mask = mask.slice(4);
            utc = true;
        }        var _ = utc ? "getUTC" : "get",
            d = date[_ + "Date"](),
            D = date[_ + "Day"](),
            m = date[_ + "Month"](),
            y = date[_ + "FullYear"](),
            H = date[_ + "Hours"](),
            M = date[_ + "Minutes"](),
            s = date[_ + "Seconds"](),
            L = date[_ + "Milliseconds"](),
            o = utc ? 0 : date.getTimezoneOffset(),
            flags = {d: d, dd: pad(d), ddd: dF.i18n.dayNames[D], dddd: dF.i18n.dayNames[D + 7], m: m + 1, mm: pad(m + 1), mmm: dF.i18n.monthNames[m], mmmm: dF.i18n.monthNames[m + 12], yy: (String(y)).slice(2), yyyy: y, h: H % 12 || 12, hh: pad(H % 12 || 12), H: H, HH: pad(H), M: M, MM: pad(M), s: s, ss: pad(s), l: pad(L, 3), L: pad(L > 99 ? Math.round(L / 10) : L), t: H < 12 ? "a" : "p", tt: H < 12 ? "am" : "pm", T: H < 12 ? "A" : "P", TT: H < 12 ? "AM" : "PM", Z: utc ? "UTC" : (((String(date)).match(timezone) || [""]).pop()).replace(timezoneClip, ""), o: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4), S: ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]};
        return mask.replace(token,         function($0)
        {
            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
    };
})();
dateFormat.masks = {"default": "ddd mmm dd yyyy HH:MM:ss", shortDate: "m/d/yy", mediumDate: "mmm d, yyyy", longDate: "mmmm d, yyyy", fullDate: "dddd, mmmm d, yyyy", shortTime: "h:MM TT", mediumTime: "h:MM:ss TT", longTime: "h:MM:ss TT Z", isoDate: "yyyy-mm-dd", isoTime: "HH:MM:ss", isoDateTime: "yyyy-mm-dd'T'HH:MM:ss", isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"};
dateFormat.i18n = {dayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], monthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]};
Date.prototype.format = function(mask, utc)
{
    return dateFormat(this, mask, utc);
};
var CPImageLeft = 0,
    CPImageRight = 1,
    CPImageAbove = 2,
    CPImageBelow = 3,
    CPImageOnly = 4,
    CPNoImage = 5;
var CPRoundRectBezelStyle = 0,
    CPRegularSquareBezelStyle = 1,
    CPHUDBezelStyle = 2,
    CPTexturedRoundedBezelStyle = 3,
    CPRoundedBezelStyle = 4;
var CPControlSelectedState = 1,
    CPControlNormalState = 0,
    CPControlMixedState = -1;
var CPLeftTextAlignment = "left",
    CPRightTextAlignment = "right",
    CPCenterTextAlignment = "center";
var CPLineBreakByWordWrapping = "normal",
    CPLineBreakByClipping = "nowrap";
{var the_class = objj_allocateClassPair(CPView, "CPControl"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_continuous"), new objj_ivar("_enabled"), new objj_ivar("_formatter"), new objj_ivar("_target"), new objj_ivar("_action"), new objj_ivar("_value")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("continuous"), function $CPControl__continuous(self, _cmd)
{
    return self._continuous;
}

), new objj_method(sel_getUid("setContinuous:"), function $CPControl__setContinuous_(self, _cmd, newValue)
{
    self._continuous = newValue;
}

), new objj_method(sel_getUid("formatter"), function $CPControl__formatter(self, _cmd)
{
    return self._formatter;
}

), new objj_method(sel_getUid("setFormatter:"), function $CPControl__setFormatter_(self, _cmd, newValue)
{
    self._formatter = newValue;
}

), new objj_method(sel_getUid("target"), function $CPControl__target(self, _cmd)
{
    return self._target;
}

), new objj_method(sel_getUid("setTarget:"), function $CPControl__setTarget_(self, _cmd, newValue)
{
    self._target = newValue;
}

), new objj_method(sel_getUid("action"), function $CPControl__action(self, _cmd)
{
    return self._action;
}

), new objj_method(sel_getUid("setAction:"), function $CPControl__setAction_(self, _cmd, newValue)
{
    self._action = newValue;
}

), new objj_method(sel_getUid("initWithFrame:"), function $CPControl__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPControl").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._target = nil;
        self._action = nil;
        self._continuous = NO;
        self._enabled = YES;
        self._value = nil;
        self._formatter = nil;
    }
    return self;
}

), new objj_method(sel_getUid("acceptsFirstResponder"), function $CPControl__acceptsFirstResponder(self, _cmd)
{
    return YES;
}

), new objj_method(sel_getUid("setHighlighted:"), function $CPControl__setHighlighted_(self, _cmd, aFlag)
{
    if (aFlag)
    {
        if (objj_msgSend(self, "isEnabled"))
            objj_msgSend(self, "setThemeState:", "highlighted");
    }
    else
    {
        objj_msgSend(self, "unsetThemeState:", "highlighted");
    }
}

), new objj_method(sel_getUid("highlighted"), function $CPControl__highlighted(self, _cmd)
{
    return objj_msgSend(self, "hasThemeState:", "highlighted");
}

), new objj_method(sel_getUid("setEnabled:"), function $CPControl__setEnabled_(self, _cmd, enabled)
{
    self._enabled = enabled;
    if (self._enabled)
        objj_msgSend(self, "unsetThemeState:", "disabled");
    else
        objj_msgSend(self, "setThemeState:", "disabled");
}

), new objj_method(sel_getUid("isEnabled"), function $CPControl__isEnabled(self, _cmd)
{
    return self._enabled;
}

), new objj_method(sel_getUid("setObjectValue:"), function $CPControl__setObjectValue_(self, _cmd, aValue)
{
    self._value = aValue;
}

), new objj_method(sel_getUid("objectValue"), function $CPControl__objectValue(self, _cmd)
{
    return self._value;
}

), new objj_method(sel_getUid("setDoubleValue:"), function $CPControl__setDoubleValue_(self, _cmd, val)
{
    objj_msgSend(self, "setObjectValue:", val);
}

), new objj_method(sel_getUid("doubleValue"), function $CPControl__doubleValue(self, _cmd)
{
    var dv = parseFloat(objj_msgSend(self, "objectValue"));
    return isNaN(dv) ? 0.0 : dv;
}

), new objj_method(sel_getUid("setIntValue:"), function $CPControl__setIntValue_(self, _cmd, val)
{
    objj_msgSend(self, "setObjectValue:", val);
}

), new objj_method(sel_getUid("intValue"), function $CPControl__intValue(self, _cmd)
{
    var intval = parseInt(objj_msgSend(self, "objectValue"), 10);
    return isNaN(intval) ? 0 : intval;
}

), new objj_method(sel_getUid("setStringValue:"), function $CPControl__setStringValue_(self, _cmd, sval)
{
    objj_msgSend(self, "setObjectValue:", sval);
}

), new objj_method(sel_getUid("stringValue"), function $CPControl__stringValue(self, _cmd)
{
    var val = objj_msgSend(self, "objectValue");
    if (typeof val === "number" && self._formatter)
        val = objj_msgSend(self._formatter, "stringFromNumber:", val);
    else if (val instanceof Date && self._formatter)
        val = objj_msgSend(self._formatter, "stringFromDate:", val);
    return val === undefined || val === null ? "" : String(val);
}

), new objj_method(sel_getUid("takeDoubleValueFrom:"), function $CPControl__takeDoubleValueFrom_(self, _cmd, sender)
{
    if (objj_msgSend(sender, "respondsToSelector:", sel_getUid("doubleValue")))
        objj_msgSend(self, "setDoubleValue:", objj_msgSend(sender, "doubleValue"));
}

), new objj_method(sel_getUid("takeIntValueFrom:"), function $CPControl__takeIntValueFrom_(self, _cmd, sender)
{
    if (objj_msgSend(sender, "respondsToSelector:", sel_getUid("intValue")))
        objj_msgSend(self, "setIntValue:", objj_msgSend(sender, "intValue"));
}

), new objj_method(sel_getUid("takeObjectValueFrom:"), function $CPControl__takeObjectValueFrom_(self, _cmd, sender)
{
    if (objj_msgSend(sender, "respondsToSelector:", sel_getUid("objectValue")))
        objj_msgSend(self, "setObjectValue:", objj_msgSend(sender, "objectValue"));
}

), new objj_method(sel_getUid("takeStringValueFrom:"), function $CPControl__takeStringValueFrom_(self, _cmd, sender)
{
    if (objj_msgSend(sender, "respondsToSelector:", sel_getUid("stringValue")))
        objj_msgSend(self, "setStringValue:", objj_msgSend(sender, "stringValue"));
}

), new objj_method(sel_getUid("keyDown:"), function $CPControl__keyDown_(self, _cmd, theEvent)
{
    if (objj_msgSend(theEvent, "keyCode") === CPReturnKeyCode)
        objj_msgSend(self, "setHighlighted:", YES);
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPControl").super_class }, "keyDown:", theEvent);
}

), new objj_method(sel_getUid("keyUp:"), function $CPControl__keyUp_(self, _cmd, theEvent)
{
    objj_msgSend(self, "setHighlighted:", NO);
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPControl").super_class }, "keyUp:", theEvent);
}

), new objj_method(sel_getUid("mouseDown:"), function $CPControl__mouseDown_(self, _cmd, theEvent)
{
    objj_msgSend(self, "setHighlighted:", YES);
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPControl").super_class }, "mouseDown:", theEvent);
}

), new objj_method(sel_getUid("mouseUp:"), function $CPControl__mouseUp_(self, _cmd, theEvent)
{
    objj_msgSend(self, "setHighlighted:", NO);
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPControl").super_class }, "mouseUp:", theEvent);
}

), new objj_method(sel_getUid("mouseExited:"), function $CPControl__mouseExited_(self, _cmd, theEvent)
{
    objj_msgSend(self, "unsetThemeState:", "hovered");
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPControl").super_class }, "mouseExited:", theEvent);
}

), new objj_method(sel_getUid("mouseEntered:"), function $CPControl__mouseEntered_(self, _cmd, theEvent)
{
    objj_msgSend(self, "setThemeState:", "hovered");
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPControl").super_class }, "mouseEntered:", theEvent);
}

), new objj_method(sel_getUid("triggerAction"), function $CPControl__triggerAction(self, _cmd)
{
    if (self._action && self._target)
        return objj_msgSend(self, "sendAction:to:", self._action, self._target);
    return NO;
}

), new objj_method(sel_getUid("sendAction:to:"), function $CPControl__sendAction_to_(self, _cmd, anAction, anObject)
{
    return objj_msgSend(CPApp, "sendAction:to:from:", anAction, anObject, self);
}

), new objj_method(sel_getUid("becomeFirstResponder"), function $CPControl__becomeFirstResponder(self, _cmd)
{
    if (objj_msgSend(self, "isEnabled"))
        objj_msgSend(self, "setThemeState:", "focus");
    return YES;
}

), new objj_method(sel_getUid("resignFirstResponder"), function $CPControl__resignFirstResponder(self, _cmd)
{
    objj_msgSend(self, "unsetThemeState:", "focus");
    return YES;
}

), new objj_method(sel_getUid("imagePosition"), function $CPControl__imagePosition(self, _cmd)
{
    return objj_msgSend(self, "valueForThemeAttribute:", "image-position");
}

), new objj_method(sel_getUid("setImagePosition:"), function $CPControl__setImagePosition_(self, _cmd, imgPos)
{
    if (objj_msgSend(self, "imagePosition") === imgPos)
        return;
    objj_msgSend(self, "setValue:forThemeAttribute:", imgPos, "image-position");
}

), new objj_method(sel_getUid("imageSize"), function $CPControl__imageSize(self, _cmd)
{
    return objj_msgSend(self, "valueForThemeAttribute:", "image-size");
}

), new objj_method(sel_getUid("setImageSize:"), function $CPControl__setImageSize_(self, _cmd, aSize)
{
    if (CGSizeEqualToSize(objj_msgSend(self, "imageSize"), aSize))
        return;
    objj_msgSend(self, "setValue:forThemeAttribute:", aSize, "image-size");
}

), new objj_method(sel_getUid("font"), function $CPControl__font(self, _cmd)
{
    return objj_msgSend(self, "valueForThemeAttribute:", "font");
}

), new objj_method(sel_getUid("setFont:"), function $CPControl__setFont_(self, _cmd, aFont)
{
    if (objj_msgSend(objj_msgSend(self, "font"), "isEqual:", aFont))
        return;
    objj_msgSend(self, "setValue:forThemeAttribute:", aFont, "font");
}

), new objj_method(sel_getUid("alternativeTextColor"), function $CPControl__alternativeTextColor(self, _cmd)
{
    return objj_msgSend(self, "valueForThemeAttribute:", "alt-text-color");
}

), new objj_method(sel_getUid("setAlternativeTextColor:"), function $CPControl__setAlternativeTextColor_(self, _cmd, aColor)
{
    if (objj_msgSend(objj_msgSend(self, "alternativeTextColor"), "isEqual:", aColor))
        return;
    objj_msgSend(self, "setValue:forThemeAttribute:", aColor, "alt-text-color");
}

), new objj_method(sel_getUid("alternativeTextShadowColor"), function $CPControl__alternativeTextShadowColor(self, _cmd)
{
    return objj_msgSend(self, "valueForThemeAttribute:", "alt-text-shadow-color");
}

), new objj_method(sel_getUid("setAlternativeTextShadowColor:"), function $CPControl__setAlternativeTextShadowColor_(self, _cmd, aColor)
{
    if (objj_msgSend(objj_msgSend(self, "alternativeTextShadowColor"), "isEqual:", aColor))
        return;
    objj_msgSend(self, "setValue:forThemeAttribute:", aColor, "alt-text-shadow-color");
}

), new objj_method(sel_getUid("textColor"), function $CPControl__textColor(self, _cmd)
{
    return objj_msgSend(self, "valueForThemeAttribute:", "text-color");
}

), new objj_method(sel_getUid("setTextColor:"), function $CPControl__setTextColor_(self, _cmd, aColor)
{
    if (objj_msgSend(objj_msgSend(self, "textColor"), "isEqual:", aColor))
        return;
    objj_msgSend(self, "setValue:forThemeAttribute:", aColor, "text-color");
}

), new objj_method(sel_getUid("textShadowOffset"), function $CPControl__textShadowOffset(self, _cmd)
{
    return objj_msgSend(self, "valueForThemeAttribute:", "text-shadow-offset");
}

), new objj_method(sel_getUid("setTextShadowOffset:"), function $CPControl__setTextShadowOffset_(self, _cmd, aSize)
{
    if (CGSizeEqualToSize(objj_msgSend(self, "textShadowOffset"), aSize))
        return;
    objj_msgSend(self, "setValue:forThemeAttribute:", aSize, "text-shadow-offset");
}

), new objj_method(sel_getUid("textShadowColor"), function $CPControl__textShadowColor(self, _cmd)
{
    return objj_msgSend(self, "valueForThemeAttribute:", "text-shadow-color");
}

), new objj_method(sel_getUid("setTextShadowColor:"), function $CPControl__setTextShadowColor_(self, _cmd, aColor)
{
    if (objj_msgSend(objj_msgSend(self, "textShadowColor"), "isEqual:", aColor))
        return;
    objj_msgSend(self, "setValue:forThemeAttribute:", aColor, "text-shadow-color");
}

), new objj_method(sel_getUid("textAlignment"), function $CPControl__textAlignment(self, _cmd)
{
    return objj_msgSend(self, "valueForThemeAttribute:", "alignment");
}

), new objj_method(sel_getUid("setTextAlignment:"), function $CPControl__setTextAlignment_(self, _cmd, textAlignment)
{
    if (objj_msgSend(self, "textAlignment") === textAlignment)
        return;
    objj_msgSend(self, "setValue:forThemeAttribute:", textAlignment, "alignment");
}

), new objj_method(sel_getUid("lineBreakMode"), function $CPControl__lineBreakMode(self, _cmd)
{
    return objj_msgSend(self, "valueForThemeAttribute:", "line-break-mode");
}

), new objj_method(sel_getUid("setLineBreakMode:"), function $CPControl__setLineBreakMode_(self, _cmd, lbm)
{
    if (objj_msgSend(self, "lineBreakMode") === lbm)
        return;
    objj_msgSend(self, "setValue:forThemeAttribute:", lbm, "line-break-mode");
}

), new objj_method(sel_getUid("canBecomeKeyView"), function $CPControl__canBecomeKeyView(self, _cmd)
{
    return objj_msgSend(self, "acceptsFirstResponder") && !objj_msgSend(self, "isHiddenOrHasHiddenAncestor") && objj_msgSend(self, "isEnabled");
}

)]);
}var CPControlContinuousKey = "CPControlContinuousKey",
    CPControlEnabledKey = "CPControlEnabledKey",
    CPControlFormatterKey = "CPControlFormatterKey",
    CPControlTargetKey = "CPControlTargetKey",
    CPControlActionKey = "CPControlActionKey",
    CPControlValueKey = "CPControlValueKey",
    CPControlFontKey = "CPControlFontKey",
    CPControlTextColorKey = "CPControlTextColorKey",
    CPControlTextAlignmentKey = "CPControlTextAlignmentKey",
    CPControlLineBreakModeKey = "CPControlLineBreakModeKey";
{
var the_class = objj_getClass("CPControl")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPControl\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPControl__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPControl").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        self._continuous = objj_msgSend(aCoder, "decodeBoolForKey:", CPControlContinuousKey);
        self._formatter = objj_msgSend(aCoder, "decodeObjectForKey:", CPControlFormatterKey);
        objj_msgSend(self, "setTarget:", objj_msgSend(aCoder, "decodeObjectForKey:", CPControlTargetKey));
        self._action = objj_msgSend(aCoder, "decodeObjectForKey:", CPControlActionKey);
        objj_msgSend(self, "setEnabled:", objj_msgSend(aCoder, "decodeBoolForKey:", CPControlEnabledKey));
        objj_msgSend(self, "setObjectValue:", objj_msgSend(aCoder, "decodeObjectForKey:", CPControlValueKey));
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPControl__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPControl").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._continuous, CPControlContinuousKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._enabled, CPControlEnabledKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._formatter, CPControlFormatterKey);
    objj_msgSend(aCoder, "encodeConditionalObject:forKey:", self._target, CPControlTargetKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._action, CPControlActionKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._value, CPControlValueKey);
}

)]);
}var CPControlTextDidBeginEditingNotification = "CPControlTextDidBeginEditingNotification",
    CPControlTextDidEndEditingNotification = "CPControlTextDidEndEditingNotification",
    CPControlTextDidChangeNotification = "CPControlTextDidChangeNotification",
    CPTextFieldDidFocusNotification = "CPTextFieldDidFocusNotification",
    CPTextFieldDidBlurNotification = "CPTextFieldDidBlurNotification";
{var the_class = objj_allocateClassPair(CPControl, "CPTextField"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_placeholder"), new objj_ivar("_startValue"), new objj_ivar("_placeholderVisible"), new objj_ivar("_editable"), new objj_ivar("_selectable"), new objj_ivar("_delegate"), new objj_ivar("_bezeled"), new objj_ivar("_bezelStyle"), new objj_ivar("_input"), new objj_ivar("_text")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("placeholder"), function $CPTextField__placeholder(self, _cmd)
{
    return self._placeholder;
}

), new objj_method(sel_getUid("setPlaceholder:"), function $CPTextField__setPlaceholder_(self, _cmd, newValue)
{
    self._placeholder = newValue;
}

), new objj_method(sel_getUid("isEditable"), function $CPTextField__isEditable(self, _cmd)
{
    return self._editable;
}

), new objj_method(sel_getUid("_setEditable:"), function $CPTextField___setEditable_(self, _cmd, newValue)
{
    self._editable = newValue;
}

), new objj_method(sel_getUid("isSelectable"), function $CPTextField__isSelectable(self, _cmd)
{
    return self._selectable;
}

), new objj_method(sel_getUid("_setSelectable:"), function $CPTextField___setSelectable_(self, _cmd, newValue)
{
    self._selectable = newValue;
}

), new objj_method(sel_getUid("delegate"), function $CPTextField__delegate(self, _cmd)
{
    return self._delegate;
}

), new objj_method(sel_getUid("_setDelegate:"), function $CPTextField___setDelegate_(self, _cmd, newValue)
{
    self._delegate = newValue;
}

), new objj_method(sel_getUid("isBezeled"), function $CPTextField__isBezeled(self, _cmd)
{
    return self._bezeled;
}

), new objj_method(sel_getUid("_setBezeled:"), function $CPTextField___setBezeled_(self, _cmd, newValue)
{
    self._bezeled = newValue;
}

), new objj_method(sel_getUid("bezelStyle"), function $CPTextField__bezelStyle(self, _cmd)
{
    return self._bezelStyle;
}

), new objj_method(sel_getUid("_setBezelStyle:"), function $CPTextField___setBezelStyle_(self, _cmd, newValue)
{
    self._bezelStyle = newValue;
}

), new objj_method(sel_getUid("initWithFrame:"), function $CPTextField__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTextField").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._placeholder = nil;
        self._editable = YES;
        self._selectable = YES;
        self._delegate = nil;
        self._bezeled = NO;
        self._value = "";
        self._placeholderVisible = YES;
        self._bezelStyle = CPRoundRectBezelStyle;
        self._DOMElement.addClass("cptextfield");
        objj_msgSend(self, "_setupInputControls");
    }
    return self;
}

), new objj_method(sel_getUid("_setupInputControls"), function $CPTextField___setupInputControls(self, _cmd)
{
    if (!self._input)
    {
        self._input = ($("<input type='text'></input>")).addClass("cptextfield-input");
        self._input.bind("propertychange keyup input paste change",         function(evt)
        {
            if (self._value !== self._input.val())
            {
                self._value = self._input.val();
                objj_msgSend(self, "_textDidChange");
            }        });
        self._input.bind("mousedown mouseup mousemove",         function(evt)
        {
            evt.stopPropagation();
            if (self._editable)
                evt._cancelPreventDefault = true;
            objj_msgSend(CPDOMEventDispatcher, "dispatchDOMMouseEvent:toView:", evt, self);
        });
        self._DOMElement.append(self._input);
    }
    if (!self._text)
    {
        self._text = (($("<div></div>")).css({"outline": "none", "position": "relative", "text-overflow": "ellipsis", "overflow": "hidden", "display": "block"})).addClass("cptextfield-text");
        self._text.bind("propertychange keyup input paste change",         function(evt)
        {
            if (self._value !== self._text.text())
            {
                self._value = self._text.text();
                objj_msgSend(self, "_textDidChange");
            }        });
        self._text.bind("mousedown mouseup mousemove",         function(evt)
        {
            evt.stopPropagation();
            evt._cancelPreventDefault = self._editable || self._selectable;
            objj_msgSend(CPDOMEventDispatcher, "dispatchDOMMouseEvent:toView:", evt, self);
        });
        self._DOMElement.append(self._text);
    }
}

), new objj_method(sel_getUid("setInputType:"), function $CPTextField__setInputType_(self, _cmd, type)
{
    if (self._input)
        self._input.attr("type", type);
}

), new objj_method(sel_getUid("acceptsFirstResponder"), function $CPTextField__acceptsFirstResponder(self, _cmd)
{
    return self._editable;
}

), new objj_method(sel_getUid("swallowsKey"), function $CPTextField__swallowsKey(self, _cmd)
{
    return self._editable;
}

), new objj_method(sel_getUid("_textDidChange"), function $CPTextField___textDidChange(self, _cmd)
{
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPControlTextDidChangeNotification, self);
}

), new objj_method(sel_getUid("setObjectValue:"), function $CPTextField__setObjectValue_(self, _cmd, obj)
{
    if (!self._input)
        objj_msgSend(self, "_setupInputControls");
    if (obj !== self._value)
    {
        self._input.val("" + obj);
        self._text.html("" + obj);
        objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTextField").super_class }, "setObjectValue:", obj);
        objj_msgSend(self, "_textDidChange");
    }
}

), new objj_method(sel_getUid("setBezelStyle:"), function $CPTextField__setBezelStyle_(self, _cmd, bezelStyle)
{
    self._bezelStyle = bezelStyle;
    objj_msgSend(self, "_updateControlInputs");
}

), new objj_method(sel_getUid("setDelegate:"), function $CPTextField__setDelegate_(self, _cmd, aDelegate)
{
    var defaultCenter = objj_msgSend(CPNotificationCenter, "defaultCenter");
    if (self._delegate)
    {
        objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, CPControlTextDidBeginEditingNotification, self);
        objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, CPControlTextDidChangeNotification, self);
        objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, CPControlTextDidEndEditingNotification, self);
        objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, CPTextFieldDidFocusNotification, self);
        objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, CPTextFieldDidBlurNotification, self);
    }
    self._delegate = aDelegate;
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("controlTextDidBeginEditing:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("controlTextDidBeginEditing:"), CPControlTextDidBeginEditingNotification, self);
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("controlTextDidChange:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("controlTextDidChange:"), CPControlTextDidChangeNotification, self);
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("controlTextDidEndEditing:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("controlTextDidEndEditing:"), CPControlTextDidEndEditingNotification, self);
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("controlTextDidFocus:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("controlTextDidFocus:"), CPTextFieldDidFocusNotification, self);
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("controlTextDidBlur:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("controlTextDidBlur:"), CPTextFieldDidBlurNotification, self);
}

), new objj_method(sel_getUid("becomeFirstResponder"), function $CPTextField__becomeFirstResponder(self, _cmd)
{
    if (!self._editable || !objj_msgSend(self, "isEnabled"))
        return NO;
    if (self._bezeled)
        setTimeout(        function()
        {
            self._input.focus();
        }, 20);
    else
        setTimeout(        function()
        {
            self._text.focus();
        }, 20);
    self._startValue = objj_msgSend(self, "stringValue");
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPTextFieldDidFocusNotification, self);
    self._placeholderVisible = NO;
    objj_msgSend(self, "_updateControlInputs");
    return objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTextField").super_class }, "becomeFirstResponder");
}

), new objj_method(sel_getUid("resignFirstResponder"), function $CPTextField__resignFirstResponder(self, _cmd)
{
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPTextFieldDidBlurNotification, self);
    if (self._startValue !== objj_msgSend(self, "stringValue"))
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPControlTextDidEndEditingNotification, self);
    if ((!self._value || self._value == "") && self._placeholder)
    {
        self._placeholderVisible = YES;
        objj_msgSend(self, "_updateControlInputs");
    }
    if (self._editable && self._input.is(":focus"))
        objj_msgSend(CPDOMEventDispatcher, "DOMFocusKeyWindow:", YES);
    return objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTextField").super_class }, "resignFirstResponder");
}

), new objj_method(sel_getUid("setBezeled:"), function $CPTextField__setBezeled_(self, _cmd, b)
{
    self._bezeled = b;
    objj_msgSend(self, "setNeedsLayout");
}

), new objj_method(sel_getUid("mouseDown:"), function $CPTextField__mouseDown_(self, _cmd, theEvent)
{
    if (self._editable)
        objj_msgSend(objj_msgSend(self, "window"), "makeFirstResponder:", self);
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTextField").super_class }, "mouseDown:", theEvent);
}

), new objj_method(sel_getUid("keyDown:"), function $CPTextField__keyDown_(self, _cmd, theEvent)
{
    if (objj_msgSend(theEvent, "keyCode") === CPReturnKeyCode)
        objj_msgSend(self, "triggerAction");
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTextField").super_class }, "keyDown:", theEvent);
}

), new objj_method(sel_getUid("setFrameSize:"), function $CPTextField__setFrameSize_(self, _cmd, aSize)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTextField").super_class }, "setFrameSize:", aSize);
    objj_msgSend(self, "setNeedsLayout");
}

), new objj_method(sel_getUid("triggerAction"), function $CPTextField__triggerAction(self, _cmd)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTextField").super_class }, "triggerAction");
    if (self._startValue !== objj_msgSend(self, "stringValue"))
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPControlTextDidEndEditingNotification, self);
}

), new objj_method(sel_getUid("_updateControlInputs"), function $CPTextField___updateControlInputs(self, _cmd)
{
    if (self._input && self._text)
    {
        self._input.css({width: self._frame.size.width - 8, height: self._frame.size.height - 4});
        self._text.css({width: self._frame.size.width, height: self._frame.size.height});
        self._DOMElement.removeClass("rounded");
        if (self._bezelStyle === CPRoundedBezelStyle)
        {
            self._DOMElement.addClass("rounded");
            self._input.css("width", self._frame.size.width - 14);
        }
        if (self._selectable)
        {
            self._text.css({"cursor": "text", "-webkit-user-select": "text", "-moz-user-select": "text", "-ms-user-select": "text", "user-select": "text"});
        }
        else
        {
            self._text.css({"-webkit-user-select": "none", "-moz-user-select": "none", "-ms-user-select": "none", "user-select": "none"});
        }
        if (!self._editable || !objj_msgSend(self, "isEnabled"))
        {
            self._input.attr("readonly", "readonly");
            self._text.attr({"contenteditable": "false", role: "label"});
        }
        else
        {
            self._input.removeAttr("readonly");
            self._text.attr({"contenteditable": "true", role: 'textbox'});
        }
        if (self._bezeled)
        {
            self._input.show();
            self._text.hide();
        }
        else
        {
            self._input.hide();
            self._text.show();
        }
        var textColor = objj_msgSend(objj_msgSend(self, "textColor"), "cssString"),
            shadowColor = objj_msgSend(objj_msgSend(self, "textShadowColor"), "cssString"),
            shadowOffset = objj_msgSend(self, "textShadowOffset"),
            font = objj_msgSend(objj_msgSend(self, "font"), "cssString"),
            fontDec = objj_msgSend(objj_msgSend(self, "font"), "cssTextDecoration"),
            txtAlgn = objj_msgSend(self, "textAlignment");
        lbm = objj_msgSend(self, "lineBreakMode");
        self._input.css({color: textColor, font: font, "white-space": lbm, "text-align": txtAlgn, "textShadow": shadowOffset.width + "px " + shadowOffset.height + "px " + shadowColor, "text-decoration": fontDec});
        self._text.css({color: textColor, font: font, "white-space": lbm, "text-align": txtAlgn, "textShadow": shadowOffset.width + "px " + shadowOffset.height + "px " + shadowColor, "text-decoration": fontDec});
        if (self._placeholderVisible && self._placeholder)
        {
            self._input.addClass("placeholder-visible");
            self._input.val(self._placeholder);
        }
        else
        {
            self._input.removeClass("placeholder-visible");
            if (self._value != self._input.val())
                self._input.val(self._value);
        }
    }
}

), new objj_method(sel_getUid("setEditable:"), function $CPTextField__setEditable_(self, _cmd, editable)
{
    self._editable = editable;
    objj_msgSend(self, "setNeedsLayout");
}

), new objj_method(sel_getUid("setSelectable:"), function $CPTextField__setSelectable_(self, _cmd, sel)
{
    self._selectable = sel;
    objj_msgSend(self, "setNeedsLayout");
}

), new objj_method(sel_getUid("setEnabled:"), function $CPTextField__setEnabled_(self, _cmd, enabled)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTextField").super_class }, "setEnabled:", enabled);
    objj_msgSend(self, "setNeedsLayout");
}

), new objj_method(sel_getUid("sizeToFitInWidth:"), function $CPTextField__sizeToFitInWidth_(self, _cmd, width)
{
    var sz = objj_msgSend(objj_msgSend(self, "stringValue"), "sizeWithFont:inWidth:", objj_msgSend(self, "font"), width);
    if (self._bezeled)
        objj_msgSend(self, "setFrameSize:", CGSizeMake(width + 1, sz.height + 4));
    else
        objj_msgSend(self, "setFrameSize:", CGSizeMake(width + 1, sz.height));
}

), new objj_method(sel_getUid("sizeToFit"), function $CPTextField__sizeToFit(self, _cmd)
{
    var sz = objj_msgSend(objj_msgSend(self, "stringValue"), "sizeWithFont:", objj_msgSend(self, "font"));
    if (self._bezeled)
        objj_msgSend(self, "setFrameSize:", CGSizeMake(sz.width + 10, sz.height + 4));
    else
        objj_msgSend(self, "setFrameSize:", sz);
}

), new objj_method(sel_getUid("layoutSubviews"), function $CPTextField__layoutSubviews(self, _cmd)
{
    objj_msgSend(self, "_updateControlInputs");
}

), new objj_method(sel_getUid("setThemeState:"), function $CPTextField__setThemeState_(self, _cmd, aState)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTextField").super_class }, "setThemeState:", aState);
    objj_msgSend(self, "setNeedsLayout");
}

), new objj_method(sel_getUid("unsetThemeState:"), function $CPTextField__unsetThemeState_(self, _cmd, aState)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTextField").super_class }, "unsetThemeState:", aState);
    objj_msgSend(self, "setNeedsLayout");
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("labelWithString:"), function $CPTextField__labelWithString_(self, _cmd, aString)
{
    var label = objj_msgSend(objj_msgSend(CPTextField, "alloc"), "initWithFrame:", CGRectMakeZero());
    objj_msgSend(label, "setBezeled:", NO);
    objj_msgSend(label, "setEditable:", NO);
    objj_msgSend(label, "setStringValue:", aString);
    objj_msgSend(label, "setSelectable:", NO);
    objj_msgSend(label, "sizeToFit");
    return label;
}

)]);
}var CPTextFieldPlaceholderKey = "CPTextFieldPlaceholderKey",
    CPTextFieldEditableKey = "CPTextFieldEditableKey",
    CPTextFieldDelegateKey = "CPTextFieldDelegateKey",
    CPTextFieldBezeledKey = "CPTextFieldBezeledKey",
    CPTextFieldBezelStyleKey = "CPTextFieldBezelStyleKey",
    CPTextFieldTextColorKey = "CPTextFieldTextColorKey";
{
var the_class = objj_getClass("CPTextField")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPTextField\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPTextField__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTextField").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        objj_msgSend(self, "_setupInputControls");
        self._placeholder = objj_msgSend(aCoder, "decodeObjectForKey:", CPTextFieldPlaceholderKey);
        self._editable = objj_msgSend(aCoder, "decodeObjectForKey:", CPTextFieldEditableKey);
        self._delegate = objj_msgSend(aCoder, "decodeObjectForKey:", CPTextFieldDelegateKey);
        self._bezeled = objj_msgSend(aCoder, "decodeBoolForKey:", CPTextFieldBezeledKey);
        self._bezelStyle = objj_msgSend(aCoder, "decodeIntForKey:", CPTextFieldBezelStyleKey);
        objj_msgSend(self, "setFrameSize:", self._frame.size);
        self._DOMElement.addClass("cptextfield");
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPTextField__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTextField").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._placeholder, CPTextFieldPlaceholderKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._editable, CPTextFieldEditableKey);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._bezelStyle, CPTextFieldBezelStyleKey);
    objj_msgSend(aCoder, "encodeConditionalObject:forKey:", self._delegate, CPTextFieldDelegateKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._bezeled, CPTextFieldBezeledKey);
}

)]);
}{var the_class = objj_allocateClassPair(CPObject, "_CPSliderHandle"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_position"), new objj_ivar("_slider"), new objj_ivar("_startValue"), new objj_ivar("_leftMouseDown"), new objj_ivar("_DOMElement")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("position"), function $_CPSliderHandle__position(self, _cmd)
{
    return self._position;
}

), new objj_method(sel_getUid("setPosition:"), function $_CPSliderHandle__setPosition_(self, _cmd, newValue)
{
    self._position = newValue;
}

), new objj_method(sel_getUid("init"), function $_CPSliderHandle__init(self, _cmd)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPSliderHandle").super_class }, "init");
    if (self)
    {
        self._startValue = 0.0;
        self._DOMElement = ($("<div></div>")).addClass("cpslider-handle");
        self._DOMElement.append(($("<div></div>")).addClass("cpslider-handle-center"));
        self._DOMElement.bind({mouseover:         function(evt)
        {
            ($(this)).addClass("hovered");
        }, mouseout:         function(evt)
        {
            ($(this)).removeClass("hovered");
        }, mousedown:         function(evt)
        {
            evt.preventDefault();
            evt.stopPropagation();
            if (evt.which < 2 && objj_msgSend(self._slider, "isEnabled"))
            {
                self._startValue = objj_msgSend(self._slider, "doubleValue");
                self._slider._leftMouseDown = YES;
                self._leftMouseDown = YES;
                objj_msgSend(self, "makeActive:", YES);
            }            objj_msgSend(CPDOMEventDispatcher, "dispatchDOMMouseEvent:toView:", evt, self._slider);
        }});
    }
    return self;
}

), new objj_method(sel_getUid("makeActive:"), function $_CPSliderHandle__makeActive_(self, _cmd, aFlag)
{
    if (aFlag)
    {
        if (self._slider._activeHandle)
            objj_msgSend(self._slider._activeHandle, "makeActive:", NO);
        self._slider._activeHandle = self;
        self._DOMElement.addClass("selected");
        self._DOMElement.css("zIndex", 10);
        objj_msgSend(self._slider, "setDoubleValue:", objj_msgSend(self._slider, "valueOfHandlePosition:", self._position));
    }
    else
    {
        self._DOMElement.removeClass("selected");
        self._DOMElement.css("zIndex", 5);
    }
}

)]);
}var CPCircularSlider = 0,
    CPLinearSlider = 1,
    CPRangeSlider = 2;
{var the_class = objj_allocateClassPair(CPControl, "CPSlider"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_sliderType"), new objj_ivar("_vertical"), new objj_ivar("_step"), new objj_ivar("_minValue"), new objj_ivar("_maxValue"), new objj_ivar("_activeHandle"), new objj_ivar("_handles"), new objj_ivar("_leftMouseDown"), new objj_ivar("_secondValue")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("sliderType"), function $CPSlider__sliderType(self, _cmd)
{
    return self._sliderType;
}

), new objj_method(sel_getUid("_setSliderType:"), function $CPSlider___setSliderType_(self, _cmd, newValue)
{
    self._sliderType = newValue;
}

), new objj_method(sel_getUid("vertical"), function $CPSlider__vertical(self, _cmd)
{
    return self._vertical;
}

), new objj_method(sel_getUid("_setVertical:"), function $CPSlider___setVertical_(self, _cmd, newValue)
{
    self._vertical = newValue;
}

), new objj_method(sel_getUid("increment"), function $CPSlider__increment(self, _cmd)
{
    return self._step;
}

), new objj_method(sel_getUid("setIncrement:"), function $CPSlider__setIncrement_(self, _cmd, newValue)
{
    self._step = newValue;
}

), new objj_method(sel_getUid("minValue"), function $CPSlider__minValue(self, _cmd)
{
    return self._minValue;
}

), new objj_method(sel_getUid("_setMinValue:"), function $CPSlider___setMinValue_(self, _cmd, newValue)
{
    self._minValue = newValue;
}

), new objj_method(sel_getUid("maxValue"), function $CPSlider__maxValue(self, _cmd)
{
    return self._maxValue;
}

), new objj_method(sel_getUid("_setMaxValue:"), function $CPSlider___setMaxValue_(self, _cmd, newValue)
{
    self._maxValue = newValue;
}

), new objj_method(sel_getUid("initWithFrame:"), function $CPSlider__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSlider").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._sliderType = CPLinearSlider;
        self._vertical = NO;
        self._step = 1.0;
        self._minValue = 0.0;
        self._maxValue = 100.0;
        self._secondValue = 50.0;
        self._DOMElement.mousedown(        function(evt)
        {
            evt.stopPropagation();
            objj_msgSend(CPDOMEventDispatcher, "dispatchDOMMouseEvent:toView:", evt, self);
        });
    }
    return self;
}

), new objj_method(sel_getUid("layoutSubviews"), function $CPSlider__layoutSubviews(self, _cmd)
{
    self._DOMElement.empty();
    if (objj_msgSend(self, "doubleValue") < self._minValue)
        objj_msgSend(self, "setDoubleValue:", self._minValue);
    if (objj_msgSend(self, "doubleValue") > self._maxValue)
        objj_msgSend(self, "setDoubleValue:", self._maxValue);
    if (self._sliderType === CPCircularSlider)
    {
        self._DOMElement.addClass("cpcircular-slider");
        self._DOMElement.removeClass("cpslider");
        self._activeHandle = Nil;
        self._handles = Nil;
        self._DOMElement.append(($("<div></div>")).addClass("cpcircular-knob"));
        var dim = objj_msgSend(self, "valueForThemeAttribute:", "circular-dim");
        objj_msgSend(self, "setFrameSize:", CGSizeMake(dim, dim));
        objj_msgSend(self, "setDoubleValue:", objj_msgSend(self, "doubleValue"));
        objj_msgSend(self, "setBorderWidth:", 1.0);
    }
    else
    {
        self._DOMElement.removeClass("cpcircular-slider");
        self._DOMElement.addClass("cpslider");
        self._handles = [];
        self._activeHandle = objj_msgSend(objj_msgSend(_CPSliderHandle, "alloc"), "init");
        self._activeHandle._slider = self;
        self._activeHandle._window = self._window;
        self._activeHandle._nextResponder = self;
        objj_msgSend(self._activeHandle, "setPosition:", objj_msgSend(self, "_handleLinearPositionForValue:", self._value));
        objj_msgSend(self, "_addHandle:", self._activeHandle);
        if (self._vertical)
        {
            self._DOMElement.removeClass("cpslider-horizontal");
            self._DOMElement.addClass("cpslider-vertical");
        }
        else
        {
            self._DOMElement.removeClass("cpslider-vertical");
            self._DOMElement.addClass("cpslider-horizontal");
        }
        if (self._sliderType === CPRangeSlider)
        {
            self._activeHandle = objj_msgSend(objj_msgSend(_CPSliderHandle, "alloc"), "init");
            self._activeHandle._slider = self;
            self._activeHandle._window = self._window;
            self._activeHandle._nextResponder = self;
            objj_msgSend(self._activeHandle, "setPosition:", objj_msgSend(self, "_handleLinearPositionForValue:", self._secondValue));
            objj_msgSend(self, "_addHandle:", self._activeHandle);
            self._DOMElement.prepend(($("<div></div>")).addClass("cpslider-range"));
            objj_msgSend(self, "setDoubleValues:second:", objj_msgSend(self, "doubleValue"), self._secondValue);
        }
        else
            objj_msgSend(self, "setDoubleValue:", objj_msgSend(self, "doubleValue"));
        objj_msgSend(self, "_positionHandle");
    }
}

), new objj_method(sel_getUid("stepToNearestAllowedValue:"), function $CPSlider__stepToNearestAllowedValue_(self, _cmd, dv)
{
    var m = ROUND(dv / self._step);
    return MIN(self._maxValue, MAX(self._minValue, m * self._step));
}

), new objj_method(sel_getUid("mouseUp:"), function $CPSlider__mouseUp_(self, _cmd, theEvent)
{
    if (self._leftMouseDown && !objj_msgSend(self, "continuous"))
        objj_msgSend(self, "triggerAction");
    document.onselectstart =     function()
    {
        return true;
    };
    self._leftMouseDown = NO;
}

), new objj_method(sel_getUid("mouseDragged:"), function $CPSlider__mouseDragged_(self, _cmd, theEvent)
{
    if (self._leftMouseDown)
    {
        var oldValue = objj_msgSend(self, "doubleValue");
        objj_msgSend(self, "calcValue:", theEvent);
        if (objj_msgSend(self, "continuous") && oldValue !== objj_msgSend(self, "doubleValue"))
        {
            objj_msgSend(self, "triggerAction");
        }
    }
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSlider").super_class }, "mouseDragged:", theEvent);
}

), new objj_method(sel_getUid("mouseDown:"), function $CPSlider__mouseDown_(self, _cmd, theEvent)
{
    if (objj_msgSend(theEvent, "buttonNumber") < 2 && objj_msgSend(self, "isEnabled"))
    {
        objj_msgSend(objj_msgSend(self, "window"), "makeFirstResponder:", self);
        if (!self._leftMouseDown)
        {
            objj_msgSend(self, "calcValue:", theEvent);
            objj_msgSend(self, "triggerAction");
        }
        self._leftMouseDown = YES;
    }
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSlider").super_class }, "mouseDown:", theEvent);
}

), new objj_method(sel_getUid("_addHandle:"), function $CPSlider___addHandle_(self, _cmd, aHandle)
{
    objj_msgSend(self._handles, "addObject:", aHandle);
    self._DOMElement.append(aHandle._DOMElement);
}

), new objj_method(sel_getUid("becomeFirstResponder"), function $CPSlider__becomeFirstResponder(self, _cmd)
{
    if (!objj_msgSend(self, "isEnabled"))
        return NO;
    if (self._activeHandle)
        self._activeHandle._DOMElement.addClass("selected");
    return YES;
}

), new objj_method(sel_getUid("resignFirstResponder"), function $CPSlider__resignFirstResponder(self, _cmd)
{
    if (self._activeHandle)
    {
        self._activeHandle._DOMElement.removeClass("selected");
        self._activeHandle._DOMElement.removeClass("focus");
        self._activeHandle._DOMElement.removeClass("hover");
    }
    return YES;
}

), new objj_method(sel_getUid("keyDown:"), function $CPSlider__keyDown_(self, _cmd, theEvent)
{
    if (!objj_msgSend(self, "isEnabled"))
        return;
    var KC = objj_msgSend(theEvent, "keyCode");
    if (self._sliderType === CPCircularSlider)
    {
        if (KC === CPRightArrowKeyCode || KC === CPLeftArrowKeyCode)
        {
            var dv = objj_msgSend(self, "doubleValue") + self._step;
            if (KC === CPLeftArrowKeyCode)
                dv = objj_msgSend(self, "doubleValue") - self._step;
            dv = objj_msgSend(self, "stepToNearestAllowedValue:", dv);
            objj_msgSend(self, "setDoubleValue:", dv);
            objj_msgSend(self, "triggerAction");
        }
    }
    else
    {
        if (self._vertical)
        {
            if (KC === CPUpArrowKeyCode || KC === CPDownArrowKeyCode)
            {
                var dv = objj_msgSend(self, "doubleValue") + self._step;
                if (KC === CPDownArrowKeyCode)
                    dv = objj_msgSend(self, "doubleValue") - self._step;
                dv = objj_msgSend(self, "stepToNearestAllowedValue:", dv);
                objj_msgSend(self, "setDoubleValue:", dv);
                objj_msgSend(self, "triggerAction");
            }
        }
        else
        {
            if (KC === CPRightArrowKeyCode || KC === CPLeftArrowKeyCode)
            {
                var dv = objj_msgSend(self, "doubleValue") + self._step;
                if (KC === CPLeftArrowKeyCode)
                    dv = objj_msgSend(self, "doubleValue") - self._step;
                dv = objj_msgSend(self, "stepToNearestAllowedValue:", dv);
                objj_msgSend(self, "setDoubleValue:", dv);
                objj_msgSend(self, "triggerAction");
            }
        }
    }
}

), new objj_method(sel_getUid("calcValue:"), function $CPSlider__calcValue_(self, _cmd, anEvent)
{
    var offset = objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(anEvent, "locationInWindow"), nil);
    if (self._sliderType === CPCircularSlider)
    {
        var x = -offset.x + 14,
            y = offset.y - 14.0,
            angle = Math.atan2(y, x) - PI / 2.0;
        var dv = objj_msgSend(self, "valueOfHandlePosition:", angle);
        objj_msgSend(self, "setDoubleValue:", dv);
    }
    else
    {
        var dv = 0;
        if (self._vertical)
            dv = objj_msgSend(self, "valueOfHandlePosition:", offset.y);
        else
            dv = objj_msgSend(self, "valueOfHandlePosition:", offset.x);
        objj_msgSend(self, "setDoubleValue:", dv);
    }
}

), new objj_method(sel_getUid("doubleValues"), function $CPSlider__doubleValues(self, _cmd)
{
    if (self._sliderType === CPRangeSlider)
    {
        if (self._handles.length > 0)
        {
            var dvs = [],
                s1 = self._handles[0];
            dvs.push(objj_msgSend(self, "valueOfHandlePosition:", objj_msgSend(s1, "position")));
            if (self._handles.length > 1)
            {
                var s2 = self._handles[1];
                dvs.push(objj_msgSend(self, "valueOfHandlePosition:", objj_msgSend(s2, "position")));
            }
            else
            {
                dvs.push(objj_msgSend(CPNull, "null"));
            }
        }
    }
    return nil;
}

), new objj_method(sel_getUid("_positionHandle"), function $CPSlider___positionHandle(self, _cmd)
{
    var p = 1 - (self._maxValue - objj_msgSend(self, "doubleValue")) / (self._maxValue - self._minValue);
    if (self._sliderType === CPCircularSlider)
    {
        var angle = (1.0 - p) * 2.0 * PI + PI / 2.0;
        objj_msgSend(self, "_positionHandleAtAngle:", angle);
    }
    else
    {
        if (self._activeHandle)
        {
            var pos = objj_msgSend(self, "_handleLinearPositionForValue:", objj_msgSend(self, "doubleValue"));
            objj_msgSend(self._activeHandle, "setPosition:", pos);
            if (self._vertical)
            {
                self._activeHandle._DOMElement.css("top", pos);
                if (self._DOMElement.children(".cpslider-range") && self._handles.length > 1)
                {
                    var top = self._handles[0];
                    var bottom = self._handles[1];
                    (self._DOMElement.children(".cpslider-range")).css({top: objj_msgSend(bottom, "position"), bottom: objj_msgSend(top, "position"), height: objj_msgSend(top, "position") - objj_msgSend(bottom, "position"), width: self._frame.size.width});
                }
            }
            else
            {
                self._activeHandle._DOMElement.css("left", pos);
                if (self._DOMElement.children(".cpslider-range") && self._handles.length > 1)
                {
                    var left = self._handles[0];
                    var right = self._handles[1];
                    (self._DOMElement.children(".cpslider-range")).css({left: objj_msgSend(left, "position"), right: objj_msgSend(right, "position"), width: objj_msgSend(right, "position") - objj_msgSend(left, "position"), height: self._frame.size.height});
                }
            }
        }
    }
}

), new objj_method(sel_getUid("_positionHandleAtAngle:"), function $CPSlider___positionHandleAtAngle_(self, _cmd, angle)
{
    var shift = 10.0;
    var x = 10.0 * COS(angle) + shift;
    var y = 10.0 * SIN(angle) + shift;
    if (self._DOMElement.children(".cpcircular-knob"))
    {
        (self._DOMElement.children(".cpcircular-knob")).css({left: x, top: y});
    }
}

), new objj_method(sel_getUid("setDoubleValues:second:"), function $CPSlider__setDoubleValues_second_(self, _cmd, v1, v2)
{
    _rangeSlider = YES;
    if (v2 < v1)
    {
        var temp = v1;
        v1 = v2;
        v2 = temp;
    }
    objj_msgSend(self, "setDoubleValue:", v1);
    self._secondValue = v2;
    if (self._handles)
    {
        if (self._handles.length > 1 && self._sliderType === CPRangeSlider)
        {
            self._activeHandle = self._handles[1];
            objj_msgSend(self, "setDoubleValue:", self._secondValue);
            self._activeHandle = self._handles[0];
        }
    }
    objj_msgSend(self, "setDoubleValue:", v1);
}

), new objj_method(sel_getUid("setIntValue:"), function $CPSlider__setIntValue_(self, _cmd, value)
{
    objj_msgSend(self, "setDoubleValue:", ROUND(value));
}

), new objj_method(sel_getUid("setDoubleValue:"), function $CPSlider__setDoubleValue_(self, _cmd, value)
{
    if (self._activeHandle && self._handles.length > 1)
    {
        if (self._activeHandle === self._handles[0])
        {
            if (value > objj_msgSend(self, "valueOfHandlePosition:", objj_msgSend(self._handles[1], "position")))
                return;
        }
        else if (self._activeHandle === self._handles[1])
        {
            if (value < objj_msgSend(self, "valueOfHandlePosition:", objj_msgSend(self._handles[0], "position")))
                return;
        }
    }
    var dv = parseFloat("" + value);
    dv = objj_msgSend(self, "stepToNearestAllowedValue:", dv);
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSlider").super_class }, "setObjectValue:", dv);
    objj_msgSend(self, "_positionHandle");
}

), new objj_method(sel_getUid("_handleLinearPositionForValue:"), function $CPSlider___handleLinearPositionForValue_(self, _cmd, value)
{
    var p = 1 - (self._maxValue - value) / (self._maxValue - self._minValue);
    if (self._sliderType === CPLinearSlider || self._sliderType == CPRangeSlider)
    {
        if (self._vertical)
        {
            var yshift = ROUND((1 - p) * (self._frame.size.height - 20));
            return yshift + 10;
        }
        else
        {
            var xshift = ROUND(p * (self._frame.size.width - 20));
            return xshift + 10;
        }
    }
    return 0;
}

), new objj_method(sel_getUid("valueOfHandlePosition:"), function $CPSlider__valueOfHandlePosition_(self, _cmd, pos)
{
    if (self._sliderType === CPCircularSlider)
    {
        var p = 0.0;
        if (pos >= 0)
        {
            p = pos / (2.0 * PI);
        }
        else
        {
            p = (2.0 * PI + pos) / (2.0 * PI);
        }
        var dv = p * (self._maxValue - self._minValue) + self._minValue;
        dv = objj_msgSend(self, "stepToNearestAllowedValue:", dv);
        return dv;
    }
    else
    {
        var p = 0.0;
        if (self._vertical)
        {
            var h = self._frame.size.height - 20;
            p = MAX(0.0, MIN(1.0, (h - (pos - 10)) / h));
        }
        else
        {
            p = MAX(0.0, MIN(1.0, (pos - 10) / (self._frame.size.width - 20)));
        }
        var dv = p * (self._maxValue - self._minValue) + self._minValue;
        dv = objj_msgSend(self, "stepToNearestAllowedValue:", dv);
        return dv;
    }
}

), new objj_method(sel_getUid("setFrameSize:"), function $CPSlider__setFrameSize_(self, _cmd, aSize)
{
    if (self._sliderType === CPCircularSlider)
    {
        var dim = objj_msgSend(self, "valueForThemeAttribute:", "circular-dim");
        objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSlider").super_class }, "setFrameSize:", CGSizeMake(dim, dim));
    }
    objj_msgSend(self, "setDoubleValue:", objj_msgSend(self, "doubleValue"));
}

), new objj_method(sel_getUid("setMaxValue:"), function $CPSlider__setMaxValue_(self, _cmd, aVal)
{
    self._maxValue = aVal;
    if (objj_msgSend(self, "doubleValue") > self._maxValue)
        objj_msgSend(self, "setDoubleValue:", self._maxValue);
}

), new objj_method(sel_getUid("setMinValue:"), function $CPSlider__setMinValue_(self, _cmd, aVal)
{
    self._minValue = aVal;
    if (objj_msgSend(self, "doubleValue") < self._minValue)
        objj_msgSend(self, "setDoubleValue:", self._minValue);
}

), new objj_method(sel_getUid("setSliderType:"), function $CPSlider__setSliderType_(self, _cmd, sliderType)
{
    self._sliderType = sliderType;
    objj_msgSend(self, "setNeedsLayout");
}

), new objj_method(sel_getUid("setVertical:"), function $CPSlider__setVertical_(self, _cmd, aFlag)
{
    self._vertical = aFlag;
    objj_msgSend(self, "setNeedsLayout");
}

)]);
}var CPSliderTypeKey = "CPSliderTypeKey",
    CPSliderVerticalKey = "CPSliderVerticalKey",
    CPSliderStepKey = "CPSliderStepKey",
    CPSliderMinValueKey = "CPSliderMinValueKey",
    CPSliderMaxValueKey = "CPSliderMaxValueKey",
    CPSliderSecondValueKey = "CPSliderSecondValueKey";
{
var the_class = objj_getClass("CPSlider")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPSlider\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPSlider__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSlider").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        self._sliderType = objj_msgSend(aCoder, "decodeIntForKey:", CPSliderTypeKey);
        self._vertical = objj_msgSend(aCoder, "decodeBoolForKey:", CPSliderVerticalKey);
        self._step = objj_msgSend(aCoder, "decodeDoubleForKey:", CPSliderStepKey);
        self._minValue = objj_msgSend(aCoder, "decodeDoubleForKey:", CPSliderMinValueKey);
        self._maxValue = objj_msgSend(aCoder, "decodeDoubleForKey:", CPSliderMaxValueKey);
        self._secondValue = objj_msgSend(aCoder, "decodeDoubleForKey:", CPSliderSecondValueKey);
        objj_msgSend(self, "setDoubleValue:", self._value);
        self._DOMElement.mousedown(        function(evt)
        {
            evt.stopPropagation();
            objj_msgSend(CPDOMEventDispatcher, "dispatchDOMMouseEvent:toView:", evt, self);
        });
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPSlider__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSlider").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._sliderType, CPSliderTypeKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._vertical, CPSliderVerticalKey);
    objj_msgSend(aCoder, "encodeDouble:forKey:", self._step, CPSliderStepKey);
    objj_msgSend(aCoder, "encodeDouble:forKey:", self._minValue, CPSliderMinValueKey);
    objj_msgSend(aCoder, "encodeDouble:forKey:", self._maxValue, CPSliderMaxValueKey);
    objj_msgSend(aCoder, "encodeDouble:forKey:", self._secondValue, CPSliderSecondValueKey);
}

)]);
}var CPScaleToFit = 0,
    CPScaleProportionally = 1,
    CPScaleNone = 2;
{var the_class = objj_allocateClassPair(CPView, "CPImageView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_image"), new objj_ivar("_scaling")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("imageScaling"), function $CPImageView__imageScaling(self, _cmd)
{
    return self._scaling;
}

), new objj_method(sel_getUid("setImageScaling:"), function $CPImageView__setImageScaling_(self, _cmd, newValue)
{
    self._scaling = newValue;
}

), new objj_method(sel_getUid("image"), function $CPImageView__image(self, _cmd)
{
    return self._image;
}

), new objj_method(sel_getUid("setImage:"), function $CPImageView__setImage_(self, _cmd, anImage)
{
    self._image = objj_msgSend(anImage, "copy");
    objj_msgSend(self._image, "setDelegate:", self);
}

), new objj_method(sel_getUid("imageDidLoad:"), function $CPImageView__imageDidLoad_(self, _cmd, sender)
{
    objj_msgSend(self, "_renderImage");
}

), new objj_method(sel_getUid("setFrameSize:"), function $CPImageView__setFrameSize_(self, _cmd, aSize)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPImageView").super_class }, "setFrameSize:", aSize);
    objj_msgSend(self, "_renderImage");
}

), new objj_method(sel_getUid("_renderImage"), function $CPImageView___renderImage(self, _cmd)
{
    self._DOMElement.empty();
    if (!self._image)
        return;
    var bounds = self._bounds,
        imageDOM = objj_msgSend(self._image, "DOMElement"),
        imageScaling = self._scaling,
        width = bounds.size.width,
        height = bounds.size.height,
        frame = objj_msgSend(self, "frame");
    if (imageScaling === CPScaleToFit)
    {
        imageDOM.css({width: width, height: height});
    }
    else
    {
        var size = objj_msgSend(self._image, "size");
        if (size.width == -1 && size.height == -1)
            return;
        if (imageScaling === CPScaleProportionally)
        {
            if (width >= size.width && height >= size.height)
            {
                width = size.width;
                height = size.height;
            }
            else
            {
                var imageRatio = size.width / size.height,
                    viewRatio = width / height;
                if (viewRatio > imageRatio)
                    width = height * imageRatio;
                else
                    height = width / imageRatio;
            }
            imageDOM.css({width: width, height: height});
        }
        else
        {
            width = Math.min(frame.size.width, size.width);
            height = Math.min(frame.size.height, size.height);
        }
        if (imageScaling == CPScaleNone)
        {
            imageDOM.css({width: width, height: height});
        }
    }
    imageDOM.css({position: "absolute", left: (frame.size.width - width) / 2.0, top: (frame.size.height - height) / 2.0});
    self._DOMElement.append(imageDOM);
}

)]);
}var CPImageViewScalingKey = "CPImageViewScalingKey",
    CPImageViewImageKey = "CPImageViewImageKey";
{
var the_class = objj_getClass("CPImageView")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPImageView\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPImageView__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPImageView").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        self._scaling = objj_msgSend(aCoder, "decodeIntForKey:", CPImageViewScalingKey);
        objj_msgSend(self, "setImage:", objj_msgSend(aCoder, "decodeObjectForKey:", CPImageViewImageKey));
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPImageView__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPImageView").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._scaling, CPImageViewScalingKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._image, CPImageViewImageKey);
}

)]);
}var CPToolbarSeparatorItemIdentifier = "CPToolbarSeparatorItem",
    CPToolbarFlexibleSpaceItemIdentifier = "CPToolbarFlexibleSpaceItem";
{var the_class = objj_allocateClassPair(CPObject, "CPToolbarItem"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_toolbarItemView"), new objj_ivar("_containView"), new objj_ivar("_imageView"), new objj_ivar("_view"), new objj_ivar("_image"), new objj_ivar("_alternateImage"), new objj_ivar("_target"), new objj_ivar("_action"), new objj_ivar("_label"), new objj_ivar("_tag"), new objj_ivar("_identifier"), new objj_ivar("_toolbar")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("itemView"), function $CPToolbarItem__itemView(self, _cmd)
{
    return self._toolbarItemView;
}

), new objj_method(sel_getUid("_setToolbarItemView:"), function $CPToolbarItem___setToolbarItemView_(self, _cmd, newValue)
{
    self._toolbarItemView = newValue;
}

), new objj_method(sel_getUid("view"), function $CPToolbarItem__view(self, _cmd)
{
    return self._view;
}

), new objj_method(sel_getUid("_setView:"), function $CPToolbarItem___setView_(self, _cmd, newValue)
{
    self._view = newValue;
}

), new objj_method(sel_getUid("image"), function $CPToolbarItem__image(self, _cmd)
{
    return self._image;
}

), new objj_method(sel_getUid("_setImage:"), function $CPToolbarItem___setImage_(self, _cmd, newValue)
{
    self._image = newValue;
}

), new objj_method(sel_getUid("alternateImage"), function $CPToolbarItem__alternateImage(self, _cmd)
{
    return self._alternateImage;
}

), new objj_method(sel_getUid("_setAlternateImage:"), function $CPToolbarItem___setAlternateImage_(self, _cmd, newValue)
{
    self._alternateImage = newValue;
}

), new objj_method(sel_getUid("target"), function $CPToolbarItem__target(self, _cmd)
{
    return self._target;
}

), new objj_method(sel_getUid("setTarget:"), function $CPToolbarItem__setTarget_(self, _cmd, newValue)
{
    self._target = newValue;
}

), new objj_method(sel_getUid("action"), function $CPToolbarItem__action(self, _cmd)
{
    return self._action;
}

), new objj_method(sel_getUid("setAction:"), function $CPToolbarItem__setAction_(self, _cmd, newValue)
{
    self._action = newValue;
}

), new objj_method(sel_getUid("label"), function $CPToolbarItem__label(self, _cmd)
{
    return self._label;
}

), new objj_method(sel_getUid("_setLabel:"), function $CPToolbarItem___setLabel_(self, _cmd, newValue)
{
    self._label = newValue;
}

), new objj_method(sel_getUid("tag"), function $CPToolbarItem__tag(self, _cmd)
{
    return self._tag;
}

), new objj_method(sel_getUid("setTag:"), function $CPToolbarItem__setTag_(self, _cmd, newValue)
{
    self._tag = newValue;
}

), new objj_method(sel_getUid("itemIdentifier"), function $CPToolbarItem__itemIdentifier(self, _cmd)
{
    return self._identifier;
}

), new objj_method(sel_getUid("_setIdentifier:"), function $CPToolbarItem___setIdentifier_(self, _cmd, newValue)
{
    self._identifier = newValue;
}

), new objj_method(sel_getUid("toolbar"), function $CPToolbarItem__toolbar(self, _cmd)
{
    return self._toolbar;
}

), new objj_method(sel_getUid("setToolbar:"), function $CPToolbarItem__setToolbar_(self, _cmd, newValue)
{
    self._toolbar = newValue;
}

), new objj_method(sel_getUid("init"), function $CPToolbarItem__init(self, _cmd)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithItemIdentifier:", "");
}

), new objj_method(sel_getUid("initWithItemIdentifier:"), function $CPToolbarItem__initWithItemIdentifier_(self, _cmd, iden)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPToolbarItem").super_class }, "init");
    if (self)
    {
        self._toolbarItemView = objj_msgSend(objj_msgSend(CPToolbarItemView, "alloc"), "initWithFrame:", CGRectMake(0, 0, 56.0, 58.0));
        objj_msgSend(self._toolbarItemView, "setToolbarItem:", self);
        self._containView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", CGRectMake((56.0 - 32) / 2.0, (58.0 - 32) / 2.0 - 6, 32, 32));
        objj_msgSend(self._containView, "setAutoresizingMask:", CPViewWidthSizable);
        objj_msgSend(self._toolbarItemView, "addSubview:", self._containView);
        self._imageView = nil;
        self._label = nil;
        self._view = nil;
        self._target = nil;
        self._action = nil;
        self._image = nil;
        self._alternateImage = nil;
        objj_msgSend(self, "_setIdentifier:", iden);
        objj_msgSend(self, "_setStateSelected:", NO);
    }
    return self;
}

), new objj_method(sel_getUid("_setIdentifier:"), function $CPToolbarItem___setIdentifier_(self, _cmd, anIdentifier)
{
    self._identifier = anIdentifier;
    if (self._toolbarItemView)
    {
        self._toolbarItemView._DOMElement.removeClass("cptoolbaritem-flexible-space");
        self._toolbarItemView._DOMElement.removeClass("cptoolbaritem-separator");
        if (self._identifier === CPToolbarFlexibleSpaceItemIdentifier)
            self._toolbarItemView._DOMElement.addClass("cptoolbaritem-flexible-space");
        else if (self._identifier === CPToolbarSeparatorItemIdentifier)
            self._toolbarItemView._DOMElement.addClass("cptoolbaritem-separator");
    }
}

), new objj_method(sel_getUid("label"), function $CPToolbarItem__label(self, _cmd)
{
    return objj_msgSend(self._label, "stringValue");
}

), new objj_method(sel_getUid("setLabel:"), function $CPToolbarItem__setLabel_(self, _cmd, aLabel)
{
    if (!self._label)
    {
        self._label = objj_msgSend(CPTextField, "labelWithString:", aLabel);
        self._label._DOMElement.addClass("cptoolbaritem-label");
        objj_msgSend(self._label, "setAlternativeTextColor:", objj_msgSend(CPColor, "blackColor"));
        objj_msgSend(self._label, "setAlternativeTextShadowColor:", objj_msgSend(CPColor, "colorWithHexString:", "555"));
        objj_msgSend(self._label, "setFont:", objj_msgSend(CPFont, "systemFontOfSize:", 12.0));
        objj_msgSend(self._toolbarItemView, "addSubview:", self._label);
    }
    objj_msgSend(self._label, "setStringValue:", aLabel);
    objj_msgSend(self._label, "sizeToFit");
    var tbiframe = objj_msgSend(self._toolbarItemView, "frame"),
        labelframe = objj_msgSend(self._label, "frame");
    objj_msgSend(self._toolbarItemView, "setFrameSize:", CGSizeMake(MAX(CGRectGetWidth(tbiframe), CGRectGetWidth(labelframe) + 10), 58.0));
    var p = CGPointMake((CGRectGetWidth(tbiframe) - CGRectGetWidth(labelframe)) / 2.0, CGRectGetHeight(tbiframe) - CGRectGetHeight(labelframe) - 4);
    objj_msgSend(self._label, "setFrameOrigin:", p);
    if (self._imageView)
    {
        var x = MAX(0, (CGRectGetWidth(self._containView._frame) - CGRectGetWidth(self._imageView._frame)) / 2.0);
        objj_msgSend(self._imageView, "setFrameOrigin:", CGPointMake(x, 0));
    }
}

), new objj_method(sel_getUid("setImage:"), function $CPToolbarItem__setImage_(self, _cmd, anImage)
{
    self._image = objj_msgSend(anImage, "copy");
    if (!self._imageView)
    {
        self._imageView = objj_msgSend(objj_msgSend(CPImageView, "alloc"), "initWithFrame:", CGRectMake(x, 0, 28, 28));
        objj_msgSend(self._imageView, "setImageScaling:", CPScaleProportionally);
        objj_msgSend(self._containView, "addSubview:", self._imageView);
    }
    objj_msgSend(self._imageView, "setImage:", self._image);
    if (self._imageView)
    {
        var x = MAX(0, (CGRectGetWidth(self._containView._frame) - CGRectGetWidth(self._imageView._frame)) / 2.0);
        objj_msgSend(self._imageView, "setFrameOrigin:", CGPointMake(x, 0));
    }
}

), new objj_method(sel_getUid("setEnabled:"), function $CPToolbarItem__setEnabled_(self, _cmd, aFlag)
{
    objj_msgSend(self._toolbarItemView, "setEnabled:", aFlag);
    if (aFlag)
    {
        objj_msgSend(self._label, "setTextColor:", objj_msgSend(CPColor, "blackColor"));
        objj_msgSend(self._imageView, "setAlphaValue:", 1.0);
    }
    else
    {
        objj_msgSend(self._label, "setTextColor:", objj_msgSend(CPColor, "grayColor"));
        objj_msgSend(self._imageView, "setAlphaValue:", 0.7);
    }
}

), new objj_method(sel_getUid("isEnabled"), function $CPToolbarItem__isEnabled(self, _cmd)
{
    return objj_msgSend(self._toolbarItemView, "isEnabled");
}

), new objj_method(sel_getUid("triggerAction"), function $CPToolbarItem__triggerAction(self, _cmd)
{
    if (!self._view)
    {
        if (self._action && self._target)
        {
            return objj_msgSend(CPApp, "sendAction:to:from:", self._action, self._target, self);
        }
    }
    return NO;
}

), new objj_method(sel_getUid("setView:"), function $CPToolbarItem__setView_(self, _cmd, aView)
{
    if (objj_msgSend(self._view, "isEqual:", aView))
        return;
    objj_msgSend(self._view, "removeFromSuperview");
    self._view = aView;
    if (self._view)
    {
        var frame = objj_msgSend(self._view, "frame");
        objj_msgSend(self._toolbarItemView, "setFrameSize:", CGSizeMake(MAX(CGRectGetWidth(objj_msgSend(self._toolbarItemView, "frame")), CGRectGetWidth(frame) + 56.0 - 32), 58.0));
        objj_msgSend(self._containView, "setFrameOrigin:", CGPointMake((CGRectGetWidth(objj_msgSend(self._toolbarItemView, "frame")) - CGRectGetWidth(objj_msgSend(self._containView, "frame"))) / 2.0, (58.0 - 32) / 2.0 - 3));
        objj_msgSend(self._containView, "addSubview:", self._view);
        if (self._imageView)
        {
            var x = MAX(0, (CGRectGetWidth(self._containView._frame) - CGRectGetWidth(self._imageView._frame)) / 2.0);
            objj_msgSend(self._imageView, "setFrameOrigin:", CGPointMake(x, 0));
        }
    }
}

), new objj_method(sel_getUid("layout"), function $CPToolbarItem__layout(self, _cmd)
{
    var labFrame = CGRectMakeZero();
    var tbiframe = objj_msgSend(self._toolbarItemView, "frame");
    if (self._label)
    {
        objj_msgSend(self._label, "sizeToFit");
        var labelframe = objj_msgSend(self._label, "frame");
        var p = CGPointMake((CGRectGetWidth(tbiframe) - CGRectGetWidth(labelframe)) / 2.0, CGRectGetHeight(tbiframe) - CGRectGetHeight(labelframe) - 4);
        objj_msgSend(self._label, "setFrameOrigin:", p);
        if (self._imageView)
        {
            var x = MAX(0, (CGRectGetWidth(self._containView._frame) - CGRectGetWidth(self._imageView._frame)) / 2.0);
            objj_msgSend(self._imageView, "setFrameOrigin:", CGPointMake(x, 0));
        }
    }
}

), new objj_method(sel_getUid("setAlternateImage:"), function $CPToolbarItem__setAlternateImage_(self, _cmd, anImage)
{
    self._alternateImage = objj_msgSend(anImage, "copy");
}

), new objj_method(sel_getUid("_setStateSelected:"), function $CPToolbarItem___setStateSelected_(self, _cmd, aFlag)
{
    if (self._identifier === CPToolbarFlexibleSpaceItemIdentifier || self._identifier === CPToolbarSeparatorItemIdentifier)
        return;
    if (!objj_msgSend(self, "isEnabled"))
        return;
    if (self._view)
        return;
    if (aFlag)
    {
        if (self._alternateImage)
        {
            objj_msgSend(self._imageView, "setImage:", self._alternateImage);
        }
        objj_msgSend(self._label, "setThemeState:", "selected");
    }
    else
    {
        objj_msgSend(self._label, "unsetThemeState:", "selected");
        if (self._image)
            objj_msgSend(self._imageView, "setImage:", self._image);
    }
}

)]);
}var CPToolbarItemIdentifierKey = "CPToolbarItemIdentifierKey",
    CPToolbarItemLabelKey = "CPToolbarItemLabelKey",
    CPToolbarItemImageKey = "CPToolbarItemImageKey",
    CPToolbarItemAlternateImageKey = "CPToolbarItemAlternateImageKey",
    CPToolbarItemTagKey = "CPToolbarItemTagKey",
    CPToolbarItemViewKey = "CPToolbarItemViewKey",
    CPToolbarItemActionKey = "CPToolbarItemActionKey",
    CPToolbarItemTargetKey = "CPToolbarItemTargetKey";
{
var the_class = objj_getClass("CPToolbarItem")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPToolbarItem\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPToolbarItem__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPToolbarItem").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        self._toolbarItemView = objj_msgSend(objj_msgSend(CPToolbarItemView, "alloc"), "initWithFrame:", CGRectMake(0, 0, 56.0, 58.0));
        objj_msgSend(self._toolbarItemView, "setToolbarItem:", self);
        self._containView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", CGRectMake((56.0 - 32) / 2.0, (58.0 - 32) / 2.0 - 6, 32, 32));
        objj_msgSend(self._containView, "setAutoresizingMask:", CPViewWidthSizable);
        objj_msgSend(self._toolbarItemView, "addSubview:", self._containView);
        self._imageView = nil;
        objj_msgSend(self, "_setIdentifier:", objj_msgSend(aCoder, "decodeObjectForKey:", CPToolbarItemIdentifierKey));
        objj_msgSend(self, "setLabel:", objj_msgSend(aCoder, "decodeObjectForKey:", CPToolbarItemLabelKey));
        objj_msgSend(self, "setImage:", objj_msgSend(aCoder, "decodeObjectForKey:", CPToolbarItemImageKey));
        objj_msgSend(self, "setAlternateImage:", objj_msgSend(aCoder, "decodeObjectForKey:", CPToolbarItemAlternateImageKey));
        objj_msgSend(self, "setTarget:", objj_msgSend(aCoder, "decodeObjectForKey:", CPToolbarItemTargetKey));
        objj_msgSend(self, "setAction:", objj_msgSend(aCoder, "decodeObjectForKey:", CPToolbarItemActionKey));
        self._tag = objj_msgSend(aCoder, "decodeIntForKey:", CPToolbarItemTagKey);
        objj_msgSend(self, "_setStateSelected:", NO);
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPToolbarItem__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPToolbarItem").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._image, CPToolbarItemImageKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._alternateImage, CPToolbarItemAlternateImageKey);
    objj_msgSend(aCoder, "encodeConditionalObject:forKey:", self._target, CPToolbarItemTargetKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._action, CPToolbarItemActionKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._identifier, CPToolbarItemIdentifierKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._view, CPToolbarItemViewKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", objj_msgSend(self, "label"), CPToolbarItemLabelKey);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._tag, CPToolbarItemTagKey);
}

)]);
}{var the_class = objj_allocateClassPair(CPControl, "CPToolbarItemView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_toolbarItem")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("toolbarItem"), function $CPToolbarItemView__toolbarItem(self, _cmd)
{
    return self._toolbarItem;
}

), new objj_method(sel_getUid("setToolbarItem:"), function $CPToolbarItemView__setToolbarItem_(self, _cmd, newValue)
{
    self._toolbarItem = newValue;
}

), new objj_method(sel_getUid("initWithFrame:"), function $CPToolbarItemView__initWithFrame_(self, _cmd, aRect)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPToolbarItemView").super_class }, "initWithFrame:", aRect);
    if (self)
    {
        self._DOMElement.addClass("cptoolbaritem");
        self._DOMElement.attr("role", "button");
    }
    return self;
}

), new objj_method(sel_getUid("mouseUp:"), function $CPToolbarItemView__mouseUp_(self, _cmd, theEvent)
{
    if (!objj_msgSend(self, "isEnabled") || self._toolbarItem._view || self._toolbarItem._identifier === CPToolbarSeparatorItemIdentifier || self._toolbarItem._identifier === CPToolbarFlexibleSpaceItemIdentifier)
    {
        return;
    }
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPToolbarItemView").super_class }, "mouseUp:", theEvent);
    var mouseLocation = objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(theEvent, "locationInWindow"), nil);
    if (CGRectContainsPoint(objj_msgSend(self, "bounds"), mouseLocation))
        objj_msgSend(self._toolbarItem, "triggerAction");
}

), new objj_method(sel_getUid("keyDown:"), function $CPToolbarItemView__keyDown_(self, _cmd, theEvent)
{
    if (!objj_msgSend(self._toolbarItem, "isEnabled") || self._toolbarItem._view || self._toolbarItem._identifier === CPToolbarSeparatorItemIdentifier || self._toolbarItem._identifier === CPToolbarFlexibleSpaceItemIdentifier)
    {
        return;
    }
    var KC = objj_msgSend(theEvent, "keyCode");
    if (KC === CPSpaceKeyCode || KC === CPReturnKeyCode)
        objj_msgSend(self._toolbarItem, "triggerAction");
}

), new objj_method(sel_getUid("setHighlighted:"), function $CPToolbarItemView__setHighlighted_(self, _cmd, aFlag)
{
    objj_msgSend(self._toolbarItem, "_setStateSelected:", aFlag);
}

)]);
}var _CPSharedColorPanel = null;
var CPColorPanelColorDidChangeNotification = "CPColorPanelColorDidChangeNotification";
{var the_class = objj_allocateClassPair(CPView, "_CPColorSliderView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_colorPanel"), new objj_ivar("_rgbSliders"), new objj_ivar("_rgbFields"), new objj_ivar("_hsbSliders"), new objj_ivar("_hsbFields"), new objj_ivar("_hexField")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("colorPanel"), function $_CPColorSliderView__colorPanel(self, _cmd)
{
    return self._colorPanel;
}

), new objj_method(sel_getUid("setColorPanel:"), function $_CPColorSliderView__setColorPanel_(self, _cmd, newValue)
{
    self._colorPanel = newValue;
}

), new objj_method(sel_getUid("initWithFrame:"), function $_CPColorSliderView__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPColorSliderView").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        var rgbLabels = ["R", "G", "B"];
        self._rgbSliders = [];
        self._rgbFields = [];
        var rgbLabel = objj_msgSend(CPTextField, "labelWithString:", "Red, Green, Blue");
        objj_msgSend(rgbLabel, "setFrameOrigin:", CGPointMake(10, 0));
        objj_msgSend(self, "addSubview:", rgbLabel);
        var ypos = 28.0;
        for (var i = 0; i < 3; i++)
        {
            var lab = objj_msgSend(CPTextField, "labelWithString:", rgbLabels[i]);
            objj_msgSend(lab, "setFrameOrigin:", CGPointMake(10, ypos));
            objj_msgSend(self, "addSubview:", lab);
            var rgbSlider = objj_msgSend(objj_msgSend(CPSlider, "alloc"), "initWithFrame:", CGRectMake(30, ypos + 4, 130.0, 6.0));
            objj_msgSend(rgbSlider, "setMaxValue:", 255);
            objj_msgSend(rgbSlider, "setMinValue:", 0.0);
            objj_msgSend(rgbSlider, "setTarget:", self);
            objj_msgSend(rgbSlider, "setContinuous:", YES);
            objj_msgSend(rgbSlider, "setAction:", sel_getUid("sliderChanged:"));
            objj_msgSend(self, "addSubview:", rgbSlider);
            objj_msgSend(self._rgbSliders, "addObject:", rgbSlider);
            var rgbField = objj_msgSend(objj_msgSend(CPTextField, "alloc"), "initWithFrame:", CGRectMake(170.0, ypos - 4, 40, 22));
            objj_msgSend(rgbField, "setBezeled:", YES);
            objj_msgSend(rgbField, "setDelegate:", self);
            objj_msgSend(self, "addSubview:", rgbField);
            objj_msgSend(self._rgbFields, "addObject:", rgbField);
            ypos += 27.0;
        }
        var hsbLabels = ["H", "S", "B"];
        self._hsbSliders = [];
        self._hsbFields = [];
        var hsbLabel = objj_msgSend(CPTextField, "labelWithString:", "Hue, Saturation, Brightness");
        objj_msgSend(hsbLabel, "setFrameOrigin:", CGPointMake(10, ypos));
        objj_msgSend(self, "addSubview:", hsbLabel);
        ypos += 28.0;
        for (var i = 0; i < 3; i++)
        {
            var lab = objj_msgSend(CPTextField, "labelWithString:", hsbLabels[i]);
            objj_msgSend(lab, "setFrameOrigin:", CGPointMake(10, ypos));
            objj_msgSend(self, "addSubview:", lab);
            var hsbSlider = objj_msgSend(objj_msgSend(CPSlider, "alloc"), "initWithFrame:", CGRectMake(30, ypos + 4, 130.0, 6.0));
            objj_msgSend(hsbSlider, "setContinuous:", YES);
            objj_msgSend(hsbSlider, "setMinValue:", 0.0);
            objj_msgSend(hsbSlider, "setMaxValue:", 100);
            objj_msgSend(hsbSlider, "setTarget:", self);
            objj_msgSend(hsbSlider, "setAction:", sel_getUid("sliderChanged:"));
            objj_msgSend(self, "addSubview:", hsbSlider);
            objj_msgSend(self._hsbSliders, "addObject:", hsbSlider);
            var hsbField = objj_msgSend(objj_msgSend(CPTextField, "alloc"), "initWithFrame:", CGRectMake(170.0, ypos - 4, 40, 22));
            objj_msgSend(hsbField, "setBezeled:", YES);
            objj_msgSend(hsbField, "setDelegate:", self);
            objj_msgSend(self, "addSubview:", hsbField);
            objj_msgSend(self._hsbFields, "addObject:", hsbField);
            ypos += 27.0;
        }
        objj_msgSend(self._hsbSliders[0], "setMaxValue:", 359.0);
        var hexLabel = objj_msgSend(CPTextField, "labelWithString:", "Hex");
        objj_msgSend(hexLabel, "setFrameOrigin:", CGPointMake(10, ypos + 10));
        objj_msgSend(self, "addSubview:", hexLabel);
        self._hexField = objj_msgSend(objj_msgSend(CPTextField, "alloc"), "initWithFrame:", CGRectMake(40, ypos + 7, 70, 22));
        objj_msgSend(self._hexField, "setBezeled:", YES);
        objj_msgSend(self._hexField, "setDelegate:", self);
        objj_msgSend(self, "addSubview:", self._hexField);
    }
    return self;
}

), new objj_method(sel_getUid("controlTextDidEndEditing:"), function $_CPColorSliderView__controlTextDidEndEditing_(self, _cmd, aNotification)
{
    var field = objj_msgSend(aNotification, "object"),
        value = objj_msgSend(objj_msgSend(field, "stringValue"), "stringByTrimmingWhitespace");
    if (field === self._hsbFields[0] && objj_msgSend(self._hsbSliders[1], "doubleValue") === 0)
    {
        setTimeout(        function()
        {
            objj_msgSend(self._hsbFields[0], "setIntValue:", 0);
        }, 50);
        return;
    }
    if (field === self._hexField)
    {
        var newColor = objj_msgSend(CPColor, "colorWithHexString:", value);
        if (newColor)
        {
            objj_msgSend(self, "setColor:", newColor);
            objj_msgSend(self._colorPanel, "setColor:", newColor);
        }
    }
    else
    {
        value = objj_msgSend(value, "doubleValue");
        switch(field) {
            case self._rgbFields[0]:
                objj_msgSend(self._rgbSliders[0], "setDoubleValue:", MAX(MIN(ROUND(value), 255), 0));
                objj_msgSend(self, "sliderChanged:", self._rgbSliders[0]);
                break;
            case self._rgbFields[1]:
                objj_msgSend(self._rgbSliders[1], "setDoubleValue:", MAX(MIN(ROUND(value), 255), 0));
                objj_msgSend(self, "sliderChanged:", self._rgbSliders[1]);
                break;
            case self._rgbFields[2]:
                objj_msgSend(self._rgbSliders[2], "setDoubleValue:", MAX(MIN(ROUND(value), 255), 0));
                objj_msgSend(self, "sliderChanged:", self._rgbSliders[2]);
                break;
            case self._hsbFields[0]:
                objj_msgSend(self._hsbSliders[0], "setDoubleValue:", MAX(MIN(ROUND(value), 359.0), 0));
                objj_msgSend(self, "sliderChanged:", self._hsbSliders[0]);
                break;
            case self._hsbFields[1]:
                objj_msgSend(self._hsbSliders[1], "setDoubleValue:", MAX(MIN(ROUND(value), 100), 0));
                objj_msgSend(self, "sliderChanged:", self._hsbSliders[1]);
                break;
            case self._hsbFields[2]:
                objj_msgSend(self._hsbSliders[2], "setDoubleValue:", MAX(MIN(ROUND(value), 100), 0));
                objj_msgSend(self, "sliderChanged:", self._hsbSliders[2]);
                break;
        }
    }
}

), new objj_method(sel_getUid("sliderChanged:"), function $_CPColorSliderView__sliderChanged_(self, _cmd, sender)
{
    var newColor,
        alpha = objj_msgSend(self._colorPanel, "opacity");
    switch(sender) {
        case self._hsbSliders[0]:
        case self._hsbSliders[1]:
        case self._hsbSliders[2]:
            newColor = objj_msgSend(CPColor, "colorWithHue:saturation:brightness:alpha:", objj_msgSend(self._hsbSliders[0], "doubleValue") / 360.0, objj_msgSend(self._hsbSliders[1], "doubleValue") / 100.0, objj_msgSend(self._hsbSliders[2], "doubleValue") / 100.0, alpha);
            objj_msgSend(self, "updateRGBSliders:", newColor);
            break;
        case self._rgbSliders[0]:
        case self._rgbSliders[1]:
        case self._rgbSliders[2]:
            newColor = objj_msgSend(CPColor, "colorWithRed:green:blue:alpha:", objj_msgSend(self._rgbSliders[0], "doubleValue") / 255.0, objj_msgSend(self._rgbSliders[1], "doubleValue") / 255.0, objj_msgSend(self._rgbSliders[2], "doubleValue") / 255.0, alpha);
            objj_msgSend(self, "updateHSBSliders:", newColor);
            break;
    }
    objj_msgSend(self, "updateLabels");
    objj_msgSend(self, "updateHex:", newColor);
    objj_msgSend(self._colorPanel, "setColor:", newColor);
}

), new objj_method(sel_getUid("updateHSBSliders:"), function $_CPColorSliderView__updateHSBSliders_(self, _cmd, aColor)
{
    var hsb = objj_msgSend(aColor, "hsbComponents");
    objj_msgSend(self._hsbSliders[0], "setDoubleValue:", ROUND(hsb[0] * 360.0));
    objj_msgSend(self._hsbSliders[1], "setDoubleValue:", ROUND(hsb[1] * 100.0));
    objj_msgSend(self._hsbSliders[2], "setDoubleValue:", ROUND(hsb[2] * 100.0));
}

), new objj_method(sel_getUid("updateRGBSliders:"), function $_CPColorSliderView__updateRGBSliders_(self, _cmd, aColor)
{
    var rgb = objj_msgSend(aColor, "components");
    objj_msgSend(self._rgbSliders[0], "setDoubleValue:", ROUND(rgb[0] * 255.0));
    objj_msgSend(self._rgbSliders[1], "setDoubleValue:", ROUND(rgb[1] * 255.0));
    objj_msgSend(self._rgbSliders[2], "setDoubleValue:", ROUND(rgb[2] * 255.0));
}

), new objj_method(sel_getUid("updateHex:"), function $_CPColorSliderView__updateHex_(self, _cmd, aColor)
{
    objj_msgSend(self._hexField, "setStringValue:", objj_msgSend(aColor, "hexString"));
}

), new objj_method(sel_getUid("updateLabels"), function $_CPColorSliderView__updateLabels(self, _cmd)
{
    objj_msgSend(self._hsbFields[0], "setStringValue:", objj_msgSend(self._hsbSliders[0], "doubleValue"));
    objj_msgSend(self._hsbFields[1], "setStringValue:", objj_msgSend(self._hsbSliders[1], "doubleValue"));
    objj_msgSend(self._hsbFields[2], "setStringValue:", objj_msgSend(self._hsbSliders[2], "doubleValue"));
    for (var i = 0; i < 3; i++)
        objj_msgSend(self._rgbFields[i], "setStringValue:", objj_msgSend(self._rgbSliders[i], "doubleValue"));
}

), new objj_method(sel_getUid("setColor:"), function $_CPColorSliderView__setColor_(self, _cmd, aColor)
{
    objj_msgSend(self, "updateHSBSliders:", aColor);
    objj_msgSend(self, "updateRGBSliders:", aColor);
    objj_msgSend(self, "updateHex:", aColor);
    objj_msgSend(self, "updateLabels");
}

)]);
}{var the_class = objj_allocateClassPair(CPWindow, "CPColorPanel"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_color"), new objj_ivar("_opacity"), new objj_ivar("_previewColorView"), new objj_ivar("_colorSliderView"), new objj_ivar("_colorWheelView"), new objj_ivar("_colorWheel"), new objj_ivar("_opacitySlider"), new objj_ivar("_brightnessSlider")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("color"), function $CPColorPanel__color(self, _cmd)
{
    return self._color;
}

), new objj_method(sel_getUid("_setColor:"), function $CPColorPanel___setColor_(self, _cmd, newValue)
{
    self._color = newValue;
}

), new objj_method(sel_getUid("opacity"), function $CPColorPanel__opacity(self, _cmd)
{
    return self._opacity;
}

), new objj_method(sel_getUid("_setOpacity:"), function $CPColorPanel___setOpacity_(self, _cmd, newValue)
{
    self._opacity = newValue;
}

), new objj_method(sel_getUid("initWithContentRect:styleMask:"), function $CPColorPanel__initWithContentRect_styleMask_(self, _cmd, aFrame, styleMask)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPColorPanel").super_class }, "initWithContentRect:styleMask:", aFrame, styleMask);
    if (self)
    {
        self._opacity = 1.0;
        self._color = objj_msgSend(CPColor, "whiteColor");
        objj_msgSend(self, "setTitle:", "Color Panel");
        var background = objj_msgSend(CPColor, "colorWithWhite:alpha:", 0.9, 1.0);
        var tbarView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", CGRectMake(0, 0, 220.0, 40.0));
        objj_msgSend(tbarView, "setBackgroundColor:", background);
        objj_msgSend(tbarView, "setAutoresizingMask:", CPViewWidthSizable | CPViewMaxXMargin);
        var colorbtnWheel = objj_msgSend(objj_msgSend(CPToolbarItem, "alloc"), "initWithItemIdentifier:", "colorWheelBtn");
        objj_msgSend(colorbtnWheel, "setTarget:", self);
        objj_msgSend(colorbtnWheel, "setAction:", sel_getUid("selectColorWheel:"));
        var imgData = objj_msgSend(objj_msgSend(CPApp, "theme"), "themeAttribute:forClass:", "colorwheel-toolbar-image", objj_msgSend(CPColorPanel, "class"));
        objj_msgSend(colorbtnWheel, "setImage:", objj_msgSend(objj_msgSend(CPImage, "alloc"), "initWithData:", objj_msgSend(CPData, "dataWithBase64:", imgData)));
        imgData = objj_msgSend(objj_msgSend(CPApp, "theme"), "themeAttribute:forClass:", "colorwheel-toolbar-image-highlight", objj_msgSend(CPColorPanel, "class"));
        objj_msgSend(colorbtnWheel, "setImage:forState:", objj_msgSend(objj_msgSend(CPImage, "alloc"), "initWithData:", objj_msgSend(CPData, "dataWithBase64:", imgData)), CPControlSelectedState);
        var f = objj_msgSend(colorbtnWheel._toolbarItemView, "frame");
        objj_msgSend(colorbtnWheel._toolbarItemView, "setFrameOrigin:", CGPointMake((220.0 - 2 * f.size.width) / 2.0, 0));
        objj_msgSend(tbarView, "addSubview:", colorbtnWheel._toolbarItemView);
        var sliderbtn = objj_msgSend(objj_msgSend(CPToolbarItem, "alloc"), "initWithItemIdentifier:", "sliderBtn");
        objj_msgSend(sliderbtn, "setTarget:", self);
        objj_msgSend(sliderbtn, "setAction:", sel_getUid("selectColorSlider:"));
        imgData = objj_msgSend(objj_msgSend(CPApp, "theme"), "themeAttribute:forClass:", "slider-toolbar-image", objj_msgSend(CPColorPanel, "class"));
        objj_msgSend(sliderbtn, "setImage:", objj_msgSend(objj_msgSend(CPImage, "alloc"), "initWithData:", objj_msgSend(CPData, "dataWithBase64:", imgData)));
        imgData = objj_msgSend(objj_msgSend(CPApp, "theme"), "themeAttribute:forClass:", "slider-toolbar-image-highlight", objj_msgSend(CPColorPanel, "class"));
        objj_msgSend(sliderbtn, "setImage:forState:", objj_msgSend(objj_msgSend(CPImage, "alloc"), "initWithData:", objj_msgSend(CPData, "dataWithBase64:", imgData)), CPControlSelectedState);
        objj_msgSend(sliderbtn._toolbarItemView, "setFrameOrigin:", CGPointMake(CGRectGetMaxX(colorbtnWheel._toolbarItemView._frame), 0));
        objj_msgSend(tbarView, "addSubview:", sliderbtn._toolbarItemView);
        objj_msgSend(self.contentView, "addSubview:", tbarView);
        var midView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", CGRectMake(0, 40, 220.0, 70));
        objj_msgSend(midView, "setBackgroundColor:", background);
        objj_msgSend(midView, "setAutoresizingMask:", CPViewWidthSizable | CPViewMaxXMargin);
        var previewLabel = objj_msgSend(CPTextField, "labelWithString:", "Preview:");
        self._previewColorView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", CGRectMake(0, 10, 120, 18));
        objj_msgSend(self._previewColorView, "setBackgroundColor:", objj_msgSend(CPColor, "blueColor"));
        self._previewColorView._DOMElement.addClass("cpcolorpanel-colorpreview");
        var startx = (220 - (CGRectGetWidth(previewLabel._frame) + 130.0)) / 2.0;
        objj_msgSend(previewLabel, "setFrameOrigin:", CGPointMake(startx - 5, 12));
        objj_msgSend(self._previewColorView, "setFrameOrigin:", CGPointMake(startx + CGRectGetWidth(previewLabel._frame) + 5, 10));
        objj_msgSend(midView, "addSubview:", previewLabel);
        objj_msgSend(midView, "addSubview:", self._previewColorView);
        var opacityLabel = objj_msgSend(CPTextField, "labelWithString:", "Opacity:");
        self._opacitySlider = objj_msgSend(objj_msgSend(CPSlider, "alloc"), "initWithFrame:", CGRectMake(0, 40, 120, 6));
        objj_msgSend(self._opacitySlider, "setMaxValue:", 1.0);
        objj_msgSend(self._opacitySlider, "setIncrement:", 0.01);
        objj_msgSend(self._opacitySlider, "setContinuous:", YES);
        objj_msgSend(self._opacitySlider, "setTarget:", self);
        objj_msgSend(self._opacitySlider, "setAction:", sel_getUid("opacitySliderDidChange:"));
        objj_msgSend(self._opacitySlider, "setDoubleValue:", 1.0);
        objj_msgSend(opacityLabel, "setFrameOrigin:", CGPointMake(startx - 5, 40));
        objj_msgSend(self._opacitySlider, "setFrameOrigin:", CGPointMake(startx + CGRectGetWidth(opacityLabel._frame) + 5, 46));
        objj_msgSend(midView, "addSubview:", opacityLabel);
        objj_msgSend(midView, "addSubview:", self._opacitySlider);
        objj_msgSend(self.contentView, "addSubview:", midView);
        self._colorWheelView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", CGRectMake(0, 110, 220.0, 260));
        objj_msgSend(self._colorWheelView, "setBackgroundColor:", background);
        objj_msgSend(self._colorWheelView, "setAutoresizingMask:", CPViewWidthSizable | CPViewMaxXMargin);
        self._colorWheel = objj_msgSend(objj_msgSend(_CPColorWheel, "alloc"), "init");
        objj_msgSend(self._colorWheel, "setDelegate:", self);
        objj_msgSend(self._colorWheelView, "addSubview:", self._colorWheel);
        self._brightnessSlider = objj_msgSend(objj_msgSend(CPSlider, "alloc"), "initWithFrame:", CGRectMake(15, 225, 220.0 - 30, 16));
        objj_msgSend(self._brightnessSlider, "setContinuous:", YES);
        objj_msgSend(self._brightnessSlider, "setTarget:", self);
        objj_msgSend(self._brightnessSlider, "setMinValue:", 1);
        objj_msgSend(self._brightnessSlider, "setAction:", sel_getUid("brightnessSliderDidChange:"));
        objj_msgSend(self._brightnessSlider, "setIntValue:", 100);
        self._brightnessSlider._DOMElement.addClass("cpcolorpanel-brightness-slider");
        objj_msgSend(self._colorWheelView, "addSubview:", self._brightnessSlider);
        objj_msgSend(self.contentView, "addSubview:", self._colorWheelView);
        self._colorSliderView = objj_msgSend(objj_msgSend(_CPColorSliderView, "alloc"), "initWithFrame:", CGRectMake(0, 110, 220.0, 260));
        objj_msgSend(self._colorSliderView, "setBackgroundColor:", background);
        objj_msgSend(self._colorSliderView, "setColorPanel:", self);
        objj_msgSend(self._colorSliderView, "setHidden:", YES);
        objj_msgSend(self.contentView, "addSubview:", self._colorSliderView);
        objj_msgSend(self, "updateColor");
    }
    return self;
}

), new objj_method(sel_getUid("setDelegate:"), function $CPColorPanel__setDelegate_(self, _cmd, delegate)
{
    if (self._delegate)
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "removeObserver:name:object:", self._delegate, CPColorPanelColorDidChangeNotification, self);
    self._delegate = delegate;
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "addObserver:selector:name:object:", self._delegate, sel_getUid("changeColor:"), CPColorPanelColorDidChangeNotification, self);
}

), new objj_method(sel_getUid("setColor:"), function $CPColorPanel__setColor_(self, _cmd, aColor)
{
    objj_msgSend(self, "_setColor:updateColorWheel:updateSliders:", aColor, YES, YES);
}

), new objj_method(sel_getUid("_setColor:updateColorWheel:updateSliders:"), function $CPColorPanel___setColor_updateColorWheel_updateSliders_(self, _cmd, aColor, ucw, us)
{
    self._color = aColor;
    objj_msgSend(self._previewColorView, "setBackgroundColor:", self._color);
    var hsb = objj_msgSend(self._color, "hsbComponents");
    objj_msgSend(self._brightnessSlider, "setBackgroundColor:", objj_msgSend(CPColor, "colorWithHue:saturation:brightness:alpha:", hsb[0].toPrecision(3), hsb[1].toPrecision(3), 1.0, 1.0));
    objj_msgSend(self._brightnessSlider, "setDoubleValue:", ROUND(hsb[2].toPrecision(3) * 100));
    objj_msgSend(self._colorWheel, "setWheelBrightness:", hsb[2].toPrecision(3));
    objj_msgSend(self._opacitySlider, "setDoubleValue:", objj_msgSend(self._color, "alphaComponent"));
    if (ucw)
        objj_msgSend(self._colorWheel, "setPositionToColor:", aColor);
    if (us)
        objj_msgSend(self._colorSliderView, "setColor:", self._color);
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPColorPanelColorDidChangeNotification, self);
}

), new objj_method(sel_getUid("setOpacity:"), function $CPColorPanel__setOpacity_(self, _cmd, opacity)
{
    self._opacity = opacity;
    objj_msgSend(self, "updateColor");
}

), new objj_method(sel_getUid("opacitySliderDidChange:"), function $CPColorPanel__opacitySliderDidChange_(self, _cmd, sender)
{
    objj_msgSend(self, "setOpacity:", objj_msgSend(sender, "doubleValue"));
}

), new objj_method(sel_getUid("brightnessSliderDidChange:"), function $CPColorPanel__brightnessSliderDidChange_(self, _cmd, sender)
{
    objj_msgSend(self._colorWheel, "setWheelBrightness:", objj_msgSend(sender, "doubleValue"));
    objj_msgSend(self, "updateColor");
}

), new objj_method(sel_getUid("colorWheelDidChange:"), function $CPColorPanel__colorWheelDidChange_(self, _cmd, aColorWheel)
{
    objj_msgSend(self, "updateColor");
}

), new objj_method(sel_getUid("selectColorSlider:"), function $CPColorPanel__selectColorSlider_(self, _cmd, sender)
{
    objj_msgSend(self._colorWheelView, "setHidden:", YES);
    objj_msgSend(self._colorSliderView, "setHidden:", NO);
    objj_msgSend(self, "setColor:", self._color);
}

), new objj_method(sel_getUid("selectColorWheel:"), function $CPColorPanel__selectColorWheel_(self, _cmd, sender)
{
    objj_msgSend(self._colorWheelView, "setHidden:", NO);
    objj_msgSend(self._colorSliderView, "setHidden:", YES);
    objj_msgSend(self, "setColor:", self._color);
}

), new objj_method(sel_getUid("updateColor"), function $CPColorPanel__updateColor(self, _cmd)
{
    var hue = objj_msgSend(self._colorWheel, "angle") / 360.0,
        sat = objj_msgSend(self._colorWheel, "distance") / 100.0,
        bri = objj_msgSend(self._brightnessSlider, "intValue") / 100.0;
    objj_msgSend(self, "_setColor:updateColorWheel:updateSliders:", objj_msgSend(CPColor, "colorWithHue:saturation:brightness:alpha:", hue, sat, bri, self._opacity), NO, NO);
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("sharedColorPanel"), function $CPColorPanel__sharedColorPanel(self, _cmd)
{
    if (!_CPSharedColorPanel)
        _CPSharedColorPanel = objj_msgSend(objj_msgSend(CPColorPanel, "alloc"), "initWithContentRect:styleMask:", CGRectMake(50, 50, 220.0, 370.0), CPClosableWindowMask);
    return _CPSharedColorPanel;
}

)]);
}var CPPushOnPushOffButton = 0,
    CPMomentaryPushButton = 1;
{var the_class = objj_allocateClassPair(CPControl, "CPButton"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_bezelStyle"), new objj_ivar("_buttonType"), new objj_ivar("_border"), new objj_ivar("_imageStateMap"), new objj_ivar("_titleStateMap"), new objj_ivar("_imageView"), new objj_ivar("_allowsMixedState"), new objj_ivar("_titleView"), new objj_ivar("_continuousTimer")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("bezelStyle"), function $CPButton__bezelStyle(self, _cmd)
{
    return self._bezelStyle;
}

), new objj_method(sel_getUid("_setBezelStyle:"), function $CPButton___setBezelStyle_(self, _cmd, newValue)
{
    self._bezelStyle = newValue;
}

), new objj_method(sel_getUid("buttonType"), function $CPButton__buttonType(self, _cmd)
{
    return self._buttonType;
}

), new objj_method(sel_getUid("setButtonType:"), function $CPButton__setButtonType_(self, _cmd, newValue)
{
    self._buttonType = newValue;
}

), new objj_method(sel_getUid("isBordered"), function $CPButton__isBordered(self, _cmd)
{
    return self._border;
}

), new objj_method(sel_getUid("_setBorder:"), function $CPButton___setBorder_(self, _cmd, newValue)
{
    self._border = newValue;
}

), new objj_method(sel_getUid("allowsMixedState"), function $CPButton__allowsMixedState(self, _cmd)
{
    return self._allowsMixedState;
}

), new objj_method(sel_getUid("setAllowsMixedState:"), function $CPButton__setAllowsMixedState_(self, _cmd, newValue)
{
    self._allowsMixedState = newValue;
}

), new objj_method(sel_getUid("initWithFrame:"), function $CPButton__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPButton").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._allowsMixedState = NO;
        self._titleStateMap = objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "init");
        self._imageStateMap = objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "init");
        self._bezelStyle = CPRoundRectBezelStyle;
        self._imageView = Nil;
        self._border = YES;
        self._buttonType = CPMomentaryPushButton;
        self._DOMElement.addClass("cpbutton");
        self._titleView = objj_msgSend(CPTextField, "labelWithString:", "");
        self._imageView = objj_msgSend(objj_msgSend(CPImageView, "alloc"), "initWithFrame:", CGRectMakeZero());
        self._imageView._DOMElement.addClass("cpbutton-image");
        objj_msgSend(self._imageView, "setImageScaling:", CPScaleProportionally);
        objj_msgSend(self, "addSubview:", self._imageView);
        objj_msgSend(self._ephemeralSubviews, "addObject:", self._imageView);
        objj_msgSend(self._ephemeralSubviews, "addObject:", self._titleView);
        objj_msgSend(self, "addSubview:", self._titleView);
        self._titleView._text.addClass("cpbutton-title");
        self._DOMElement.addClass("cpbutton");
    }
    return self;
}

), new objj_method(sel_getUid("setBezelStyle:"), function $CPButton__setBezelStyle_(self, _cmd, bezelStyle)
{
    self._bezelStyle = bezelStyle;
    self._DOMElement.removeClass("rounded");
    self._DOMElement.removeClass("square");
    self._DOMElement.removeClass("hud");
    self._DOMElement.removeClass("textured");
    if (self._bezelStyle === CPHUDBezelStyle)
        self._DOMElement.addClass("hud");
    else if (self._bezelStyle === CPRoundedBezelStyle)
        self._DOMElement.addClass("rounded");
    else if (self._bezelStyle === CPTexturedRoundedBezelStyle)
        self._DOMElement.addClass("textured");
    else if (self._bezelStyle === CPRegularSquareBezelStyle)
        self._DOMElement.addClass("square");
}

), new objj_method(sel_getUid("setImage:"), function $CPButton__setImage_(self, _cmd, anImage)
{
    objj_msgSend(self, "setImage:forState:", anImage, CPControlNormalState);
}

), new objj_method(sel_getUid("setImage:forState:"), function $CPButton__setImage_forState_(self, _cmd, anImage, state)
{
    objj_msgSend(self._imageStateMap, "setObject:forKey:", objj_msgSend(anImage, "copy"), state);
    objj_msgSend(self, "setNeedsLayout");
}

), new objj_method(sel_getUid("setObjectValue:"), function $CPButton__setObjectValue_(self, _cmd, value)
{
    if (!value || value === "" || value === 0)
        value = CPControlNormalState;
    else if (typeof value !== "number")
    {
        value = CPControlSelectedState;
    }
    else if (value >= CPControlSelectedState)
        value = CPControlSelectedState;
    else if (value < CPControlNormalState)
    {
        if (self._allowsMixedState)
            value = CPControlMixedState;
        else
            value = CPControlSelectedState;
    }
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPButton").super_class }, "setObjectValue:", value);
    if (objj_msgSend(self._imageStateMap, "objectForKey:", CPControlNormalState))
        objj_msgSend(self._imageView, "setImage:", objj_msgSend(self._imageStateMap, "objectForKey:", CPControlNormalState));
    if (objj_msgSend(self._titleStateMap, "objectForKey:", CPControlNormalState))
        objj_msgSend(self._titleView, "setStringValue:", objj_msgSend(self._titleStateMap, "objectForKey:", CPControlNormalState));
    switch(value) {
        case CPControlMixedState:
        {
            objj_msgSend(self, "unsetThemeState:", "selected");
            objj_msgSend(self, "unsetThemeState:", "highlighted");
            objj_msgSend(self, "setThemeState:", "mixed");
            if (objj_msgSend(self._imageStateMap, "objectForKey:", CPControlMixedState))
                objj_msgSend(self._imageView, "setImage:", objj_msgSend(self._imageStateMap, "objectForKey:", CPControlMixedState));
            if (objj_msgSend(self._titleStateMap, "objectForKey:", CPControlMixedState))
                objj_msgSend(self._titleView, "setStringValue:", objj_msgSend(self._titleStateMap, "objectForKey:", CPControlMixedState));
        }
            break;
        case CPControlSelectedState:
        {
            objj_msgSend(self, "setThemeState:", "selected");
            objj_msgSend(self, "unsetThemeState:", "mixed");
            if (objj_msgSend(self._imageStateMap, "objectForKey:", CPControlSelectedState))
                objj_msgSend(self._imageView, "setImage:", objj_msgSend(self._imageStateMap, "objectForKey:", CPControlSelectedState));
            if (objj_msgSend(self._titleStateMap, "objectForKey:", CPControlSelectedState))
                objj_msgSend(self._titleView, "setStringValue:", objj_msgSend(self._titleStateMap, "objectForKey:", CPControlSelectedState));
        }
            break;
        case CPControlNormalState:
        {
            objj_msgSend(self, "unsetThemeState:", "selected");
            objj_msgSend(self, "unsetThemeState:", "highlighted");
            objj_msgSend(self, "unsetThemeState:", "mixed");
        }
            break;
    }
}

), new objj_method(sel_getUid("nextState"), function $CPButton__nextState(self, _cmd)
{
    if (self._allowsMixedState)
    {
        var value = objj_msgSend(self, "state");
        return value - (value === -1 ? -2 : 1);
    }
    return 1 - objj_msgSend(self, "state");
}

), new objj_method(sel_getUid("setNextState"), function $CPButton__setNextState(self, _cmd)
{
    objj_msgSend(self, "setState:", objj_msgSend(self, "nextState"));
}

), new objj_method(sel_getUid("setState:"), function $CPButton__setState_(self, _cmd, aState)
{
    objj_msgSend(self, "setIntValue:", aState);
}

), new objj_method(sel_getUid("state"), function $CPButton__state(self, _cmd)
{
    return objj_msgSend(self, "intValue");
}

), new objj_method(sel_getUid("setTitle:"), function $CPButton__setTitle_(self, _cmd, aTitle)
{
    objj_msgSend(self, "setTitle:forState:", aTitle, CPControlNormalState);
}

), new objj_method(sel_getUid("setTitle:forState:"), function $CPButton__setTitle_forState_(self, _cmd, aTitle, state)
{
    objj_msgSend(self._titleStateMap, "setObject:forKey:", aTitle, state);
    objj_msgSend(self, "setNeedsLayout");
}

), new objj_method(sel_getUid("setWidth:"), function $CPButton__setWidth_(self, _cmd, awidth)
{
    objj_msgSend(self, "setFrameSize:", CGSizeMake(awidth, self._frame.size.height));
}

), new objj_method(sel_getUid("mouseDown:"), function $CPButton__mouseDown_(self, _cmd, theEvent)
{
    if (objj_msgSend(theEvent, "buttonNumber") === 1 && objj_msgSend(self, "isEnabled"))
    {
        if (!self._conttimeout)
            self._conttimeout = 250;
        if (objj_msgSend(self, "continuous"))
        {
            var fireTrigger =             function()
            {
                objj_msgSend(self, "triggerAction");
                self._conttimeout = MAX(50, self._conttimeout - 20);
                self._continuousTimer = setTimeout(fireTrigger, self._conttimeout);
            };
            self._continuousTimer = setTimeout(fireTrigger, self._conttimeout);
        }
    }
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPButton").super_class }, "mouseDown:", theEvent);
}

), new objj_method(sel_getUid("mouseClicked:"), function $CPButton__mouseClicked_(self, _cmd, theEvent)
{
    if (!objj_msgSend(self, "isEnabled"))
        return;
    objj_msgSend(self, "triggerAction");
    if (self._buttonType === CPPushOnPushOffButton)
        objj_msgSend(self, "setNextState");
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPButton").super_class }, "mouseClicked:", theEvent);
}

), new objj_method(sel_getUid("mouseUp:"), function $CPButton__mouseUp_(self, _cmd, theEvent)
{
    clearInterval(self._continuousTimer);
    self._continuousTimer = null;
    self._conttimeout = null;
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPButton").super_class }, "mouseUp:", theEvent);
}

), new objj_method(sel_getUid("keyDown:"), function $CPButton__keyDown_(self, _cmd, theEvent)
{
    if (objj_msgSend(self, "continuous") && objj_msgSend(theEvent, "keyCode") === CPReturnKeyCode)
        objj_msgSend(self, "triggerAction");
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPButton").super_class }, "keyDown:", theEvent);
}

), new objj_method(sel_getUid("keyUp:"), function $CPButton__keyUp_(self, _cmd, theEvent)
{
    if (objj_msgSend(theEvent, "keyCode") === CPReturnKeyCode)
    {
        if (!objj_msgSend(self, "continuous"))
        {
            objj_msgSend(self, "triggerAction");
            if (self._buttonType === CPPushOnPushOffButton)
                objj_msgSend(self, "setNextState");
        }
    }
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPButton").super_class }, "keyUp:", theEvent);
}

), new objj_method(sel_getUid("sizeToFit"), function $CPButton__sizeToFit(self, _cmd)
{
    objj_msgSend(self, "setState:", self._value);
    objj_msgSend(self._titleView, "setThemeAttributes:", self._themeAttributes);
    objj_msgSend(self._titleView, "sizeToFit");
    var txtSz = CGSizeMake(self._titleView._frame.size.width + 20, self._titleView._frame.size.height + 10);
    if (self._imageView)
    {
        var imageSize = objj_msgSend(self, "imageSize");
        var imagePosition = objj_msgSend(self, "imagePosition");
        if (imagePosition === CPImageOnly)
        {
            objj_msgSend(self, "setFrameSize:", CGSizeMake(imageSize.width + 8, imageSize.height + 12));
        }
        else if (imagePosition === CPImageLeft || imagePosition === CPImageRight)
        {
            objj_msgSend(self, "setFrameSize:", CGSizeMake(imageSize.width + txtSz.width, txtSz.height));
        }
        else if (imagePosition === CPImageAbove || imagePosition === CPImageBelow)
        {
            objj_msgSend(self, "setFrameSize:", CGSizeMake(txtSz.width, txtSz.height + imageSize.height + 5));
        }
        else
            objj_msgSend(self, "setFrameSize:", txtSz);
    }
    else
        objj_msgSend(self, "setFrameSize:", txtSz);
}

), new objj_method(sel_getUid("layoutSubviews"), function $CPButton__layoutSubviews(self, _cmd)
{
    objj_msgSend(self, "setState:", self._value);
    objj_msgSend(self._titleView, "setThemeAttributes:", self._themeAttributes);
    objj_msgSend(self._titleView, "sizeToFit");
    objj_msgSend(self._titleView, "setCenter:", objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(self, "center"), self._superview));
    var imagePosition = objj_msgSend(self, "imagePosition");
    if (imagePosition == CPNoImage)
    {
        objj_msgSend(self._imageView, "setHidden:", YES);
    }
    else
    {
        objj_msgSend(self._titleView, "setHidden:", NO);
        var imageSize = objj_msgSend(self, "imageSize"),
            iw = imageSize.width,
            ih = imageSize.height;
        if (imagePosition === CPImageOnly)
        {
            objj_msgSend(self._imageView, "setFrameSize:", imageSize);
            objj_msgSend(self._imageView, "setFrameOrigin:", CGPointMake((self._frame.size.width - iw) / 2.0, (self._frame.size.height - ih) / 2.0 - 1));
            objj_msgSend(self._titleView, "setHidden:", YES);
        }
        else if (imagePosition === CPImageBelow)
        {
            objj_msgSend(self._imageView, "setFrame:", CGRectMake((self._frame.size.width - iw) / 2.0, self._frame.size.height - ih - 3, iw, ih));
            objj_msgSend(self._titleView, "setFrameOrigin:", CGPointMake(self._titleView._frame.origin.x, MIN(self._titleView._frame.origin.y, CGRectGetMinY(self._imageView._frame) - CGRectGetHeight(self._titleView._frame) - 4)));
        }
        else if (imagePosition === CPImageAbove)
        {
            objj_msgSend(self._imageView, "setFrame:", CGRectMake((self._frame.size.width - iw) / 2.0, 3, iw, ih));
            objj_msgSend(self._titleView, "setFrameOrigin:", CGPointMake(self._titleView._frame.origin.x, MAX(self._titleView._frame.origin.y, CGRectGetMaxY(self._imageView._frame) + 4)));
        }
        else if (imagePosition === CPImageRight)
        {
            objj_msgSend(self._imageView, "setFrame:", CGRectMake(self._frame.size.width - iw - 3, (self._frame.size.height - ih) / 2.0, iw, ih));
            objj_msgSend(self._titleView, "setFrameOrigin:", CGPointMake(MIN(self._titleView._frame.origin.x, CGRectGetMinX(self._imageView._frame) - CGRectGetWidth(self._titleView._frame) - 6), self._titleView._frame.origin.y));
        }
        else if (imagePosition === CPImageLeft)
        {
            objj_msgSend(self._imageView, "setFrame:", CGRectMake(3, (self._frame.size.height - ih) / 2.0, iw, ih));
            objj_msgSend(self._titleView, "setFrameOrigin:", CGPointMake(MAX(self._titleView._frame.origin.x, CGRectGetMaxX(self._imageView._frame) + 6), self._titleView._frame.origin.y));
        }
        if (objj_msgSend(self._imageView, "superview") !== self)
            objj_msgSend(self, "addSubview:", self._imageView);
    }
}

), new objj_method(sel_getUid("setBordered:"), function $CPButton__setBordered_(self, _cmd, aFlag)
{
    self._border = aFlag;
    if (aFlag)
    {
        self._DOMElement.removeClass("no-border");
        objj_msgSend(self, "setBorderWidth:", 1.0);
    }
    else
    {
        self._DOMElement.addClass("no-border");
        objj_msgSend(self, "setBorderWidth:", 0.0);
    }
}

), new objj_method(sel_getUid("setThemeState:"), function $CPButton__setThemeState_(self, _cmd, state)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPButton").super_class }, "setThemeState:", state);
    objj_msgSend(self._titleView, "setThemeState:", state);
}

), new objj_method(sel_getUid("unsetThemeState:"), function $CPButton__unsetThemeState_(self, _cmd, state)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPButton").super_class }, "unsetThemeState:", state);
    objj_msgSend(self._titleView, "unsetThemeState:", state);
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("buttonWithTitle:"), function $CPButton__buttonWithTitle_(self, _cmd, aTitle)
{
    var b = objj_msgSend(objj_msgSend(CPButton, "alloc"), "initWithFrame:", CGRectMakeZero());
    objj_msgSend(b, "setTitle:", aTitle);
    objj_msgSend(b, "sizeToFit");
    return b;
}

)]);
}var CPButtonTitleKey = "CPButtonTitleKey",
    CPButtonBezelStyleKey = "CPButtonBezelStyleKey",
    CPButtonAllowsMixedStateKey = "CPButtonAllowsMixedStateKey",
    CPButtonTitleViewKey = "CPButtonTitleViewKey",
    CPButtonImageKey = "CPButtonImageKey",
    CPButtonAlternateImageKey = "CPButtonAlternateImageKey",
    CPButtonImagePositionKey = "CPButtonImagePositionKey",
    CPButtonBorderKey = "CPButtonBorderKey",
    CPButtonTypeKey = "CPButtonTypeKey";
{
var the_class = objj_getClass("CPButton")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPButton\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPButton__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPButton").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        self._allowsMixedState = objj_msgSend(aCoder, "decodeBoolForKey:", CPButtonAllowsMixedStateKey);
        self._DOMElement.addClass("cpbutton");
        self._titleView = objj_msgSend(CPTextField, "labelWithString:", "");
        objj_msgSend(self._ephemeralSubviews, "addObject:", self._titleView);
        objj_msgSend(self, "addSubview:", self._titleView);
        self._titleView._text.addClass("cpbutton-title");
        self._DOMElement.addClass("cpbutton");
        self._imageView = objj_msgSend(objj_msgSend(CPImageView, "alloc"), "initWithFrame:", CGRectMakeZero());
        self._imageView._DOMElement.addClass("cpbutton-image");
        objj_msgSend(self._imageView, "setImageScaling:", CPScaleProportionally);
        objj_msgSend(self, "addSubview:", self._imageView);
        objj_msgSend(self._ephemeralSubviews, "addObject:", self._imageView);
        objj_msgSend(self, "setBezelStyle:", objj_msgSend(aCoder, "decodeIntForKey:", CPButtonBezelStyleKey));
        self._imageStateMap = objj_msgSend(aCoder, "decodeObjectForKey:", CPButtonImageKey);
        _imageTitleMap = objj_msgSend(aCoder, "decodeObjectForKey:", CPButtonTitleKey);
        objj_msgSend(self, "setButtonType:", objj_msgSend(aCoder, "decodeIntForKey:", CPButtonTypeKey));
        objj_msgSend(self, "setBordered:", objj_msgSend(aCoder, "decodeBoolForKey:", CPButtonBorderKey));
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPButton__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPButton").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._imageStateMap, CPButtonImageKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._titleStateMap, CPButtonTitleKey);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._bezelStyle, CPButtonBezelStyleKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._allowsMixedState, CPButtonAllowsMixedStateKey);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._buttonType, CPButtonTypeKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._border, CPButtonBorderKey);
}

)]);
}{var the_class = objj_allocateClassPair(CPObject, "CPToolbar"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_delegate"), new objj_ivar("_identifier"), new objj_ivar("_height"), new objj_ivar("_minWidth"), new objj_ivar("_visible"), new objj_ivar("_itemsView"), new objj_ivar("_window"), new objj_ivar("_overflowArrow"), new objj_ivar("_overflowMenu"), new objj_ivar("_flexSpaceItems"), new objj_ivar("_toolItems"), new objj_ivar("_items"), new objj_ivar("_posTimer")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("delegate"), function $CPToolbar__delegate(self, _cmd)
{
    return self._delegate;
}

), new objj_method(sel_getUid("_setDelegate:"), function $CPToolbar___setDelegate_(self, _cmd, newValue)
{
    self._delegate = newValue;
}

), new objj_method(sel_getUid("height"), function $CPToolbar__height(self, _cmd)
{
    return self._height;
}

), new objj_method(sel_getUid("_setHeight:"), function $CPToolbar___setHeight_(self, _cmd, newValue)
{
    self._height = newValue;
}

), new objj_method(sel_getUid("isVisible"), function $CPToolbar__isVisible(self, _cmd)
{
    return self._visible;
}

), new objj_method(sel_getUid("_setVisible:"), function $CPToolbar___setVisible_(self, _cmd, newValue)
{
    self._visible = newValue;
}

), new objj_method(sel_getUid("window"), function $CPToolbar__window(self, _cmd)
{
    return self._window;
}

), new objj_method(sel_getUid("_setWindow:"), function $CPToolbar___setWindow_(self, _cmd, newValue)
{
    self._window = newValue;
}

), new objj_method(sel_getUid("items"), function $CPToolbar__items(self, _cmd)
{
    return self._items;
}

), new objj_method(sel_getUid("_setItems:"), function $CPToolbar___setItems_(self, _cmd, newValue)
{
    self._items = newValue;
}

), new objj_method(sel_getUid("init"), function $CPToolbar__init(self, _cmd)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithIdentifier:", "");
}

), new objj_method(sel_getUid("initWithIdentifier:"), function $CPToolbar__initWithIdentifier_(self, _cmd, anIden)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPToolbar").super_class }, "init");
    if (self)
    {
        objj_msgSend(self, "_init");
    }
    return self;
}

), new objj_method(sel_getUid("_init"), function $CPToolbar___init(self, _cmd)
{
    self._itemsView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", CGRectMake(0, 0, 100, 58.0));
    self._itemsView._DOMElement.addClass("cptoolbar");
    self._overflowArrow = objj_msgSend(objj_msgSend(CPButton, "alloc"), "initWithFrame:", CGRectMake(76, 0, 24, 58.0 - 1));
    objj_msgSend(self._overflowArrow, "setBezelStyle:", CPRegularSquareBezelStyle);
    objj_msgSend(self._overflowArrow, "setAutoresizingMask:", CPViewMinXMargin);
    objj_msgSend(self._overflowArrow, "setImagePosition:", CPImageOnly);
    objj_msgSend(self._overflowArrow, "setImageSize:", CGSizeMake(10, 15));
    objj_msgSend(self._overflowArrow, "setTarget:", self);
    objj_msgSend(self._overflowArrow, "setAction:", sel_getUid("_showOverflowMenu:"));
    var arrowImgData = objj_msgSend(objj_msgSend(CPApp, "theme"), "themeAttribute:forClass:", "overflow-arrow-image", objj_msgSend(CPToolbar, "class"));
    objj_msgSend(self._overflowArrow, "setBordered:", NO);
    objj_msgSend(self._overflowArrow, "setBackgroundColor:", objj_msgSend(CPColor, "clearColor"));
    objj_msgSend(self._overflowArrow, "setImage:", objj_msgSend(objj_msgSend(CPImage, "alloc"), "initWithData:", objj_msgSend(CPData, "dataWithBase64:", arrowImgData)));
    self._overflowMenu = objj_msgSend(objj_msgSend(CPMenu, "alloc"), "init");
    objj_msgSend(self._overflowMenu, "setTitle:", "overflow items");
    objj_msgSend(self._itemsView, "addSubview:", self._overflowArrow);
    objj_msgSend(self._overflowArrow, "setHidden:", YES);
    self._flexSpaceItems = [];
    self._toolItems = [];
    self._items = [];
    self._posTimer = null;
    self._delegate = null;
    self._minWidth = -1;
    self._height = 58.0;
    objj_msgSend(self, "setVisible:", YES);
}

), new objj_method(sel_getUid("setDelegate:"), function $CPToolbar__setDelegate_(self, _cmd, delegate)
{
    if (self._delegate === delegate)
        return;
    self._delegate = delegate;
    objj_msgSend(self._items, "removeAllObjects");
    objj_msgSend(self._flexSpaceItems, "removeAllObjects");
    objj_msgSend(self._toolItems, "removeAllObjects");
    objj_msgSend(self, "loadItems");
}

), new objj_method(sel_getUid("setVisible:"), function $CPToolbar__setVisible_(self, _cmd, aFlag)
{
    self._visible = aFlag;
    objj_msgSend(self._itemsView, "setHidden:", !aFlag);
}

), new objj_method(sel_getUid("layout"), function $CPToolbar__layout(self, _cmd)
{
    objj_msgSend(self, "_adjustFlexSpaceItems");
    objj_msgSend(self._overflowMenu, "removeAllItems");
    var x = 6;
    var count = self._items.length,
        index = 0;
    for (; index < count; index++)
    {
        var item = self._items[index];
        if (x + CGRectGetWidth(item._toolbarItemView._frame) > CGRectGetWidth(self._itemsView._frame) - CGRectGetWidth(self._overflowArrow._frame) + 9 && CGRectGetWidth(self._itemsView._frame) <= self._minWidth)
        {
            objj_msgSend(item._toolbarItemView, "setHidden:", YES);
            var itemID = objj_msgSend(item, "itemIdentifier");
            if (itemID !== CPToolbarFlexibleSpaceItemIdentifier && itemID !== CPToolbarSeparatorItemIdentifier)
            {
                var overflowItem = objj_msgSend(CPMenuItem, "menuItemWithTitle:", objj_msgSend(item, "label"));
                objj_msgSend(overflowItem, "setIcon:", objj_msgSend(item, "image") ? objj_msgSend(objj_msgSend(item, "image"), "copy") : nil);
                if (!item._view)
                {
                    objj_msgSend(overflowItem, "setTarget:", objj_msgSend(item, "target"));
                    objj_msgSend(overflowItem, "setAction:", objj_msgSend(item, "action"));
                    objj_msgSend(overflowItem, "setEnabled:", objj_msgSend(item, "isEnabled"));
                }
                objj_msgSend(self._overflowMenu, "addItem:", overflowItem);
            }
        }
        else if (objj_msgSend(item, "itemIdentifier") === CPToolbarSeparatorItemIdentifier)
        {
            objj_msgSend(item._toolbarItemView, "setFrameOrigin:", CGPointMake(x, 4));
            objj_msgSend(item._toolbarItemView, "setHidden:", NO);
        }
        else
        {
            objj_msgSend(item, "layout");
            objj_msgSend(item._toolbarItemView, "setFrameOrigin:", CGPointMake(x, 0));
            objj_msgSend(item._toolbarItemView, "setHidden:", NO);
        }
        x += CGRectGetWidth(item._toolbarItemView._frame) + 6;
    }
    if (objj_msgSend(self._overflowMenu, "numberOfItems") > 0)
        objj_msgSend(self._overflowArrow, "setHidden:", NO);
    else
        objj_msgSend(self._overflowArrow, "setHidden:", YES);
}

), new objj_method(sel_getUid("_showOverflowMenu:"), function $CPToolbar___showOverflowMenu_(self, _cmd, sender)
{
    var frame = objj_msgSend(self._window, "frame");
    objj_msgSend(self._overflowMenu, "setPosition:", CGPointMake(CGRectGetMaxX(frame) - objj_msgSend(self._overflowMenu, "width") - 2, (self._itemsView._DOMElement.offset()).top + 58.0 - 20));
    setTimeout(    function()
    {
        objj_msgSend(self._overflowMenu, "show:", nil);
    }, 50);
}

), new objj_method(sel_getUid("loadItems"), function $CPToolbar__loadItems(self, _cmd)
{
    if (self._items.length === 0)
    {
        if (self._delegate && objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("toolbarItemIdentifiers:")))
        {
            var itemIds = objj_msgSend(self._delegate, "toolbarItemIdentifiers:", self);
            if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("toolbar:itemForItemIdentifier:")))
            {
                var count = itemIds.length,
                    index = 0;
                for (; index < count; index++)
                {
                    var item = objj_msgSend(self._delegate, "toolbar:itemForItemIdentifier:", self, itemIds[index]);
                    objj_msgSend(item, "setToolbar:", self);
                    if (objj_msgSend(item, "itemIdentifier") === CPToolbarFlexibleSpaceItemIdentifier)
                        objj_msgSend(self._flexSpaceItems, "addObject:", item);
                    else
                        objj_msgSend(self._toolItems, "addObject:", item);
                    if (objj_msgSend(item, "itemIdentifier") === CPToolbarSeparatorItemIdentifier)
                        objj_msgSend(item._toolbarItemView, "setFrameSize:", CGSizeMake(1, CGRectGetHeight(item._toolbarItemView._frame) - 6));
                    objj_msgSend(self._items, "addObject:", item);
                    objj_msgSend(self._itemsView, "addSubview:", item._toolbarItemView);
                }
            }
            else
            {
                objj_msgSend(CPException, "raise:reason:", "CPToolbarDelegateException", "CPToolbar delegate does not implement toolbar:itemForItemIdentifier:");
            }
        }
        else
        {
            objj_msgSend(CPException, "raise:reason:", "CPToolbarDelegateException", "CPToolbar delegate does not implemenet selector toolbarItemIdentifiers:");
        }
    }
}

), new objj_method(sel_getUid("_adjustFlexSpaceItems"), function $CPToolbar___adjustFlexSpaceItems(self, _cmd)
{
    if (self._flexSpaceItems.length > 0)
    {
        var remWidth = CGRectGetWidth(self._itemsView._frame) - 6 * self._items.length - 12;
        var minWidth = 0;
        var count = self._toolItems.length,
            index = 0;
        for (; index < count; index++)
        {
            var item = self._toolItems[index];
            remWidth = remWidth - CGRectGetWidth(item._toolbarItemView._frame);
            minWidth += CGRectGetWidth(item._toolbarItemView._frame) + 6;
        }
        var share = MAX(0, remWidth) / self._flexSpaceItems.length;
        (count = self._flexSpaceItems.length, index = 0);
        for (; index < count; index++)
        {
            var item = self._flexSpaceItems[index];
            objj_msgSend(item._toolbarItemView, "setFrameSize:", CGSizeMake(share, self._height));
        }
        self._minWidth = minWidth + 12;
    }
}

), new objj_method(sel_getUid("setWindow:"), function $CPToolbar__setWindow_(self, _cmd, aWindow)
{
    self._window = aWindow;
    objj_msgSend(self._itemsView, "_setWindow:", self._window);
    objj_msgSend(self._itemsView, "setNextResponder:", self._window);
}

)]);
}var CPToolbarItemsKey = "CPToolbarItemsKey",
    CPToolbarDelegateKey = "CPToolbarDelegateKey";
{
var the_class = objj_getClass("CPToolbar")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPToolbar\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPToolbar__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPToolbar").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        objj_msgSend(self, "_init");
        self._items = objj_msgSend(aCoder, "decodeObjectForKey:", CPToolbarItemsKey);
        var count = self._items.length,
            index = 0;
        for (; index < count; index++)
        {
            var item = self._items[index];
            objj_msgSend(item, "setToolbar:", self);
            if (objj_msgSend(item, "itemIdentifier") === CPToolbarFlexibleSpaceItemIdentifier)
                objj_msgSend(self._flexSpaceItems, "addObject:", item);
            else
                objj_msgSend(self._toolItems, "addObject:", item);
            if (objj_msgSend(item, "itemIdentifier") === CPToolbarSeparatorItemIdentifier)
                objj_msgSend(item._toolbarItemView, "setFrameSize:", CGSizeMake(1, CGRectGetHeight(item._toolbarItemView._frame) - 6));
            objj_msgSend(self._itemsView, "addSubview:", item._toolbarItemView);
        }
        objj_msgSend(self, "setDelegate:", objj_msgSend(aCoder, "decodeObjectForKey:", CPToolbarDelegateKey));
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPToolbar__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPToolbar").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._items, CPToolbarItemsKey);
    objj_msgSend(aCoder, "encodeConditionalObject:forKey:", self._delegate, CPToolbarDelegateKey);
}

)]);
}var CPDisclosureBezelStyle = 10;
{var the_class = objj_allocateClassPair(CPButton, "CPPopUpButton"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_pullsdown"), new objj_ivar("_menu"), new objj_ivar("_setMenuWidth")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("pullsdown"), function $CPPopUpButton__pullsdown(self, _cmd)
{
    return self._pullsdown;
}

), new objj_method(sel_getUid("_setPullsdown:"), function $CPPopUpButton___setPullsdown_(self, _cmd, newValue)
{
    self._pullsdown = newValue;
}

), new objj_method(sel_getUid("menu"), function $CPPopUpButton__menu(self, _cmd)
{
    return self._menu;
}

), new objj_method(sel_getUid("_setMenu:"), function $CPPopUpButton___setMenu_(self, _cmd, newValue)
{
    self._menu = newValue;
}

), new objj_method(sel_getUid("initWithFrame:"), function $CPPopUpButton__initWithFrame_(self, _cmd, aFrame)
{
    return objj_msgSend(self, "initWithFrame:pullsdown:", aFrame, NO);
}

), new objj_method(sel_getUid("initWithFrame:pullsdown:"), function $CPPopUpButton__initWithFrame_pullsdown_(self, _cmd, aFrame, aFlag)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPPopUpButton").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._setMenuWidth = NO;
        var h = objj_msgSend(self, "valueForThemeAttribute:", "optimal-height");
        objj_msgSend(self, "setFrameSize:", CGSizeMake(aFrame.size.width, h));
        self._DOMElement.addClass("cppopupbutton");
        objj_msgSend(self, "setBezelStyle:", CPRoundRectBezelStyle);
        self._menu = objj_msgSend(objj_msgSend(CPMenu, "alloc"), "init");
        self._menu._delegate = self;
        objj_msgSend(self, "setPullsDown:", aFlag);
    }
    return self;
}

), new objj_method(sel_getUid("setPullsDown:"), function $CPPopUpButton__setPullsDown_(self, _cmd, aFlag)
{
    self._pullsdown = aFlag;
    objj_msgSend(self._menu, "setIsRadio:", !self._pullsdown);
    if (self._pullsdown)
    {
        self._DOMElement.addClass("pullsdown");
        objj_msgSend(self, "setButtonType:", CPPushOnPushOffButton);
    }
    else
    {
        if (objj_msgSend(self._menu, "numberOfItems") > 0)
            objj_msgSend(self, "setTitle:", objj_msgSend(objj_msgSend(self._menu, "itemAtIndex:", 0), "title"));
        self._DOMElement.removeClass("pullsdown");
        objj_msgSend(self, "setButtonType:", CPMomentaryPushButton);
    }
}

), new objj_method(sel_getUid("setBezelStyle:"), function $CPPopUpButton__setBezelStyle_(self, _cmd, bs)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPPopUpButton").super_class }, "setBezelStyle:", bs);
    (self._DOMElement.children(".cppopupbutton-buttonview")).remove();
    (self._DOMElement.children(".cppopupbutton-trigger")).remove();
    if (self._bezelStyle !== CPDisclosureBezelStyle)
    {
        var w = objj_msgSend(self, "valueForThemeAttribute:", "trigger-width");
        self._DOMElement.append((($("<div></div>")).addClass("cppopupbutton-buttonview")).css("width", self._frame.size.width - w));
        self._DOMElement.append(($("<div></div>")).addClass("cppopupbutton-trigger"));
    }
}

), new objj_method(sel_getUid("setFrameSize:"), function $CPPopUpButton__setFrameSize_(self, _cmd, aSize)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPPopUpButton").super_class }, "setFrameSize:", aSize);
    (self._DOMElement.children(".cppopupbutton-buttonview")).css("width", aSize.width - objj_msgSend(self, "valueForThemeAttribute:", "trigger-width"));
    if (self._bezelStyle !== CPDisclosureBezelStyle)
        objj_msgSend(self._menu, "setWidth:", self._frame.size.width);
}

), new objj_method(sel_getUid("layoutSubviews"), function $CPPopUpButton__layoutSubviews(self, _cmd)
{
    if (self._bezelStyle === CPDisclosureBezelStyle)
    {
        objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPPopUpButton").super_class }, "layoutSubviews");
    }
    else
    {
        objj_msgSend(self, "setState:", self._value);
        var w = objj_msgSend(self, "valueForThemeAttribute:", "trigger-width");
        objj_msgSend(self._titleView, "setThemeAttributes:", self._themeAttributes);
        objj_msgSend(self._titleView, "sizeToFit");
        objj_msgSend(self._titleView, "setCenter:", objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(self, "center"), self._superview));
        var f = objj_msgSend(self._titleView, "frame");
        f.origin.x = (self._frame.size.width - w - CGRectGetWidth(self._titleView._frame)) / 2.0;
        objj_msgSend(self._titleView, "setFrame:", f);
    }
}

), new objj_method(sel_getUid("becomeFirstResponder"), function $CPPopUpButton__becomeFirstResponder(self, _cmd)
{
    if (objj_msgSend(self._menu, "isVisible"))
        self._menu._DOMElement.makeKey();
    return objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPPopUpButton").super_class }, "becomeFirstResponder");
}

), new objj_method(sel_getUid("addItemWithTitle:"), function $CPPopUpButton__addItemWithTitle_(self, _cmd, aTitle)
{
    objj_msgSend(self._menu, "addItem:", objj_msgSend(CPMenuItem, "menuItemWithTitle:", aTitle));
    if (objj_msgSend(self._menu, "numberOfItems") === 1 && !self._pullsdown)
    {
        objj_msgSend(self._menu, "selectItemAtIndex:", 0);
        objj_msgSend(self, "setTitle:", aTitle);
    }
}

), new objj_method(sel_getUid("menuDidClose:"), function $CPPopUpButton__menuDidClose_(self, _cmd, menu)
{
    if (!self._pullsdown)
    {
        var selItem = objj_msgSend(menu, "selectedItem");
        objj_msgSend(self, "setTitle:", objj_msgSend(selItem, "title"));
        objj_msgSend(self, "setNeedsLayout");
    }
    objj_msgSend(self, "setState:", CPControlNormalState);
}

), new objj_method(sel_getUid("mouseUp:"), function $CPPopUpButton__mouseUp_(self, _cmd, theEvent)
{
    var mouseLocation = objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(theEvent, "locationInWindow"), nil);
    if (!CGRectContainsPoint(objj_msgSend(self, "bounds"), mouseLocation))
        objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPPopUpButton").super_class }, "mouseUp:", theEvent);
}

), new objj_method(sel_getUid("mouseDown:"), function $CPPopUpButton__mouseDown_(self, _cmd, theEvent)
{
    if (!objj_msgSend(self, "isEnabled"))
        return;
    if (objj_msgSend(theEvent, "buttonNumber") === 1)
    {
        objj_msgSend(objj_msgSend(self, "window"), "makeFirstResponder:", self);
        if (self._pullsdown)
        {
            if (objj_msgSend(self, "state") === CPControlSelectedState)
            {
                objj_msgSend(self._menu, "close:", self);
                objj_msgSend(self, "setState:", CPControlNormalState);
            }
            else
            {
                objj_msgSend(self, "_showPulldownMenu");
                objj_msgSend(self, "setState:", CPControlSelectedState);
            }
        }
        else
        {
            objj_msgSend(self, "setHighlighted:", YES);
            objj_msgSend(self, "_showPopupMenu");
        }
    }
}

), new objj_method(sel_getUid("keyDown:"), function $CPPopUpButton__keyDown_(self, _cmd, theEvent)
{
    if (!objj_msgSend(self, "isEnabled"))
        return;
    if (objj_msgSend(theEvent, "keyCode") === CPReturnKeyCode)
    {
        if (self._pullsdown)
        {
            if (objj_msgSend(self._menu, "isVisible"))
            {
                objj_msgSend(self._menu, "close:", self);
                objj_msgSend(self, "setState:", CPControlNormalState);
            }
            else
            {
                objj_msgSend(self, "_showPulldownMenu");
                objj_msgSend(self, "setState:", CPControlSelectedState);
            }
        }
        else
        {
            objj_msgSend(self, "setHighlighted:", YES);
            objj_msgSend(self, "_showPopupMenu");
        }
    }
}

), new objj_method(sel_getUid("_showPulldownMenu"), function $CPPopUpButton___showPulldownMenu(self, _cmd)
{
    var offset = self._DOMElement.offset();
    var h = objj_msgSend(self, "valueForThemeAttribute:", "optimal-height");
    var mh = ($(window)).height() - offset.top - h;
    if (!self._setMenuWidth)
    {
        objj_msgSend(self._menu, "setWidth:", self._frame.size.width);
        self._setMenuWidth = YES;
    }
    if (mh < 120)
        objj_msgSend(self._menu, "setPosition:", CGPointMake(offset.left, MAX(0, offset.top - objj_msgSend(self._menu, "menuHeight"))));
    else
        objj_msgSend(self._menu, "setPosition:", CGPointMake(offset.left, offset.top + h));
    objj_msgSend(self._menu, "fadeIn:sender:", 0, self);
}

), new objj_method(sel_getUid("_showPopupMenu"), function $CPPopUpButton___showPopupMenu(self, _cmd)
{
    var offset = self._DOMElement.offset();
    var yshift = 0;
    var selItem = objj_msgSend(self._menu, "selectedItem");
    if (!selItem)
    {
        objj_msgSend(self._menu, "selectItemAtIndex:", 0);
        selItem = objj_msgSend(self._menu, "selectedItem");
    }
    var count = objj_msgSend(self._menu, "numberOfItems"),
        i = 0;
    for (; i < count; i++)
    {
        var mi = objj_msgSend(self._menu, "itemAtIndex:", i);
        if (!objj_msgSend(mi, "isEqual:", selItem))
            yshift += 25.0;
        else
        {
            selItem = mi;
            break;
        }
    }
    if (!self._setMenuWidth && self._bezelStyle !== CPDisclosureBezelStyle)
    {
        objj_msgSend(self._menu, "setWidth:", self._frame.size.width);
        self._setMenuWidth = YES;
    }
    var mh = ($(window)).height() - MAX(0, offset.top - yshift);
    if (mh < 120)
        objj_msgSend(self._menu, "setPosition:", CGPointMake(offset.left, MAX(0, ($(window)).height() - objj_msgSend(self._menu, "menuHeight"))));
    else
        objj_msgSend(self._menu, "setPosition:", CGPointMake(offset.left, MAX(0, offset.top - yshift)));
    objj_msgSend(self._menu, "fadeIn:sender:", 0, self);
    if (selItem)
        objj_msgSend(self._menu, "setHighlightedMenuItem:", selItem);
    else
        objj_msgSend(self._menu, "selectItemAtIndex:", 0);
}

), new objj_method(sel_getUid("sizeToFit"), function $CPPopUpButton__sizeToFit(self, _cmd)
{
    var count = objj_msgSend(self._menu, "numberOfItems"),
        i = 0;
    var maxW = 0;
    for (; i < count; i++)
    {
        var mi = objj_msgSend(self._menu, "itemAtIndex:", i);
        var sz = objj_msgSend(objj_msgSend(mi, "title"), "sizeWithFont:", objj_msgSend(self, "font"));
        if (sz.width > maxW)
            maxW = sz.width;
    }
    if (self._bezelStyle !== CPDisclosureBezelStyle)
        objj_msgSend(self, "setFrameSize:", CGSizeMake(maxW + 2 * objj_msgSend(self, "valueForThemeAttribute:", "trigger-width"), objj_msgSend(self, "valueForThemeAttribute:", "optimal-height")));
    else
    {
        objj_msgSend(self._menu, "setWidth:", maxW + 60);
        self._setMenuWidth = YES;
    }
}

)]);
}var CPPopUpButtonMenuKey = "CPPopUpButtonMenuKey",
    CPPopUpButtonPullsDownKey = "CPPopUpButtonPullsDownKey";
{
var the_class = objj_getClass("CPPopUpButton")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPPopUpButton\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPPopUpButton__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPPopUpButton").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        self._setMenuWidth = NO;
        var h = objj_msgSend(self, "valueForThemeAttribute:", "optimal-height");
        self._DOMElement.addClass("cppopupbutton");
        self._menu = objj_msgSend(aCoder, "decodeObjectForKey:", CPPopUpButtonMenuKey);
        self._menu._delegate = self;
        objj_msgSend(self, "setPullsDown:", objj_msgSend(aCoder, "decodeBoolForKey:", CPPopUpButtonPullsDownKey));
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPPopUpButton__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPPopUpButton").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._menu, CPPopUpButtonMenuKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._pullsdown, CPPopUpButtonPullsDownKey);
}

)]);
}var CPSegmentStyleRounded = 1,
    CPSegmentStyleTexturedRounded = 2,
    CPSegmentStyleSquare = 3;
var CPSegmentSwitchTrackingSelectOne = 0,
    CPSegmentSwitchTrackingSelectAny = 1,
    CPSegmentSwitchTrackingMomentary = 2;
{var the_class = objj_allocateClassPair(CPControl, "CPSegmentedControl"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_segmentTitles"), new objj_ivar("_segmentWidths"), new objj_ivar("_segmentImages"), new objj_ivar("_segmentTags"), new objj_ivar("_segments"), new objj_ivar("_selectedIndexes"), new objj_ivar("_lastChangedSegment"), new objj_ivar("_segmentCount"), new objj_ivar("_segmentStyle"), new objj_ivar("_trackingStyle")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("selectedSegments"), function $CPSegmentedControl__selectedSegments(self, _cmd)
{
    return self._selectedIndexes;
}

), new objj_method(sel_getUid("_setSelectedIndexes:"), function $CPSegmentedControl___setSelectedIndexes_(self, _cmd, newValue)
{
    self._selectedIndexes = newValue;
}

), new objj_method(sel_getUid("changedSegment"), function $CPSegmentedControl__changedSegment(self, _cmd)
{
    return self._lastChangedSegment;
}

), new objj_method(sel_getUid("_setLastChangedSegment:"), function $CPSegmentedControl___setLastChangedSegment_(self, _cmd, newValue)
{
    self._lastChangedSegment = newValue;
}

), new objj_method(sel_getUid("segmentCount"), function $CPSegmentedControl__segmentCount(self, _cmd)
{
    return self._segmentCount;
}

), new objj_method(sel_getUid("_setSegmentCount:"), function $CPSegmentedControl___setSegmentCount_(self, _cmd, newValue)
{
    self._segmentCount = newValue;
}

), new objj_method(sel_getUid("segmentStyle"), function $CPSegmentedControl__segmentStyle(self, _cmd)
{
    return self._segmentStyle;
}

), new objj_method(sel_getUid("_setSegmentStyle:"), function $CPSegmentedControl___setSegmentStyle_(self, _cmd, newValue)
{
    self._segmentStyle = newValue;
}

), new objj_method(sel_getUid("trackingStyle"), function $CPSegmentedControl__trackingStyle(self, _cmd)
{
    return self._trackingStyle;
}

), new objj_method(sel_getUid("_setTrackingStyle:"), function $CPSegmentedControl___setTrackingStyle_(self, _cmd, newValue)
{
    self._trackingStyle = newValue;
}

), new objj_method(sel_getUid("initWithFrame:"), function $CPSegmentedControl__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSegmentedControl").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._segmentTitles = {};
        self._segmentWidths = {};
        self._segmentImages = {};
        self._segmentTags = {};
        self._segments = [];
        self._selectedIndexes = objj_msgSend(CPIndexSet, "indexSet");
        self._segmentCount = 0;
        self._segmentStyle = CPSegmentStyleRounded;
        self._trackingStyle = CPSegmentSwitchTrackingSelectOne;
    }
    return self;
}

), new objj_method(sel_getUid("acceptsFirstResponder"), function $CPSegmentedControl__acceptsFirstResponder(self, _cmd)
{
    return NO;
}

), new objj_method(sel_getUid("labelForSegment:"), function $CPSegmentedControl__labelForSegment_(self, _cmd, segment)
{
    if (self._segmentTitles.hasOwnProperty(segment))
        return self._segmentTitles[segment];
    return "";
}

), new objj_method(sel_getUid("tagForSegment:"), function $CPSegmentedControl__tagForSegment_(self, _cmd, segment)
{
    if (self._segmentTags.hasOwnProperty(segment))
        return self._segmentTags[segment];
    return -1;
}

), new objj_method(sel_getUid("setTag:forSegment:"), function $CPSegmentedControl__setTag_forSegment_(self, _cmd, tag, segment)
{
    if (segment > -1 && segment < self._segmentCount)
        self._segmentTags[segment] = tag;
}

), new objj_method(sel_getUid("setLabel:forSegment:"), function $CPSegmentedControl__setLabel_forSegment_(self, _cmd, aString, segment)
{
    objj_msgSend(self, "setLabel:forSegment:inState:", aString, segment, CPControlNormalState);
}

), new objj_method(sel_getUid("setLabel:forSegment:inState:"), function $CPSegmentedControl__setLabel_forSegment_inState_(self, _cmd, aString, segment, state)
{
    if (segment > -1 && segment < self._segmentCount)
    {
        if (!self._segmentTitles[segment])
            self._segmentTitles[segment] = {};
        self._segmentTitles[segment][state] = aString;
        if (segment < objj_msgSend(self._segments, "count"))
        {
            objj_msgSend(objj_msgSend(self._segments, "objectAtIndex:", segment), "setTitle:forState:", aString, state);
        }
        else
            objj_msgSend(self, "setNeedsLayout");
    }
}

), new objj_method(sel_getUid("imageForSegment:inState:"), function $CPSegmentedControl__imageForSegment_inState_(self, _cmd, segment, state)
{
    if (self._segmentImages.hasOwnProperty(segment))
    {
        if (self._segmentImages[segment].hasOwnProperty(state))
            return self._segmentImages[segment][state];
    }
    return nil;
}

), new objj_method(sel_getUid("setImage:forSegment:"), function $CPSegmentedControl__setImage_forSegment_(self, _cmd, anImage, segment)
{
    objj_msgSend(self, "setImage:forSegment:inState:", anImage, segment, CPControlNormalState);
}

), new objj_method(sel_getUid("setImage:forSegment:inState:"), function $CPSegmentedControl__setImage_forSegment_inState_(self, _cmd, anImage, segment, state)
{
    if (segment > -1 && segment < self._segmentCount)
    {
        if (!self._segmentImages[segment])
            self._segmentImages[segment] = {};
        self._segmentImages[segment][state] = anImage;
        if (segment < objj_msgSend(self._segments, "count"))
        {
            objj_msgSend(objj_msgSend(self._segments, "objectAtIndex:", segment), "setImage:forState:", anImage, state);
        }
        else
            objj_msgSend(self, "setNeedsLayout");
    }
}

), new objj_method(sel_getUid("widthForSegment:"), function $CPSegmentedControl__widthForSegment_(self, _cmd, segment)
{
    if (self._segmentWidths.hasOwnProperty(segment))
        return self._segmentWidths[segment];
    return 0.0;
}

), new objj_method(sel_getUid("setWidth:forSegment:"), function $CPSegmentedControl__setWidth_forSegment_(self, _cmd, aWidth, segment)
{
    if (segment > -1 && segment < self._segmentCount)
    {
        self._segmentWidths[segment] = aWidth;
        objj_msgSend(self, "setNeedsLayout");
    }
}

), new objj_method(sel_getUid("setSegmentCount:"), function $CPSegmentedControl__setSegmentCount_(self, _cmd, segCount)
{
    if (self._segmentCount === segCount)
        return;
    self._segmentCount = segCount;
    objj_msgSend(self, "setNeedsLayout");
}

), new objj_method(sel_getUid("setSegmentStyle:"), function $CPSegmentedControl__setSegmentStyle_(self, _cmd, segStyle)
{
    if (self._segmentStyle === segStyle)
        return;
    self._segmentStyle = segStyle;
    objj_msgSend(self, "setNeedsLayout");
}

), new objj_method(sel_getUid("setTrackingStyle:"), function $CPSegmentedControl__setTrackingStyle_(self, _cmd, trackingStyle)
{
    self._trackingStyle = trackingStyle;
}

), new objj_method(sel_getUid("selectSegmentWithTag:"), function $CPSegmentedControl__selectSegmentWithTag_(self, _cmd, aTag)
{
    for (var idx in self._segmentTags)
    {
        if (self._segmentTags[idx] === aTag)
        {
            if (self._trackingStyle == CPSegmentSwitchTrackingSelectOne)
                objj_msgSend(self, "setSelected:forSegment:", NO, objj_msgSend(self._selectedIndexes, "firstIndex"));
            objj_msgSend(self, "setSelected:forSegment:", YES, idx);
            return;
        }
    }
}

), new objj_method(sel_getUid("isSelectedForSegment:"), function $CPSegmentedControl__isSelectedForSegment_(self, _cmd, segment)
{
    return objj_msgSend(self._selectedIndexes, "containsIndex:", segment);
}

), new objj_method(sel_getUid("setSelected:forSegment:"), function $CPSegmentedControl__setSelected_forSegment_(self, _cmd, aFlag, segment)
{
    if (segment > -1 && segment < self._segmentCount)
    {
        if (aFlag)
            objj_msgSend(self._selectedIndexes, "addIndex:", segment);
        else
            objj_msgSend(self._selectedIndexes, "removeIndex:", segment);
        if (segment < objj_msgSend(self._segments, "count"))
        {
            if (aFlag)
                objj_msgSend(objj_msgSend(self._segments, "objectAtIndex:", segment), "setState:", CPControlSelectedState);
            else
                objj_msgSend(objj_msgSend(self._segments, "objectAtIndex:", segment), "setState:", CPControlNormalState);
        }
        else
            objj_msgSend(self, "setNeedsLayout");
    }
}

), new objj_method(sel_getUid("layoutSubviews"), function $CPSegmentedControl__layoutSubviews(self, _cmd)
{
    if (objj_msgSend(self._segments, "count") !== self._segmentCount)
    {
        objj_msgSend(self._segments, "removeAllObjects");
        objj_msgSend(self._ephemeralSubviews, "removeAllObjects");
        while (objj_msgSend(objj_msgSend(self, "subviews"), "count"))
            objj_msgSend(objj_msgSend(objj_msgSend(self, "subviews"), "objectAtIndex:", 0), "removeFromSuperview");
        var x = 0,
            w = self._frame.size.width / self._segmentCount;
        for (var i = 0; i < self._segmentCount; i++)
        {
            var segment = objj_msgSend(objj_msgSend(CPButton, "alloc"), "initWithFrame:", CGRectMake(x, 0, w, self._frame.size.height));
            objj_msgSend(segment, "setTarget:", self);
            objj_msgSend(segment, "setAction:", sel_getUid("_onSelect:"));
            objj_msgSend(segment, "setThemeAttributes:", objj_msgSend(self, "themeAttributes"));
            objj_msgSend(segment, "setEnabled:", objj_msgSend(self, "isEnabled"));
            if (self._segmentStyle === CPSegmentStyleTexturedRounded)
                objj_msgSend(segment, "setBezelStyle:", CPTexturedRoundedBezelStyle);
            else if (self._segmentStyle === CPSegmentStyleSquare)
                objj_msgSend(segment, "setBezelStyle:", CPRegularSquareBezelStyle);
            segment._DOMElement.addClass("cpsegment");
            if (i === 0)
                segment._DOMElement.addClass("left");
            if (i === self._segmentCount - 1)
                segment._DOMElement.addClass("right");
            if (objj_msgSend(self._selectedIndexes, "containsIndex:", i))
            {
                objj_msgSend(segment, "setState:", CPControlSelectedState);
            }
            else
                objj_msgSend(segment, "setState:", CPControlNormalState);
            if (self._segmentTitles.hasOwnProperty(i))
            {
                for (var state in self._segmentTitles[i])
                {
                    if (self._segmentTitles[i].hasOwnProperty(state))
                        objj_msgSend(segment, "setTitle:forState:", self._segmentTitles[i][state], state);
                }
            }
            if (self._segmentImages.hasOwnProperty(i))
            {
                for (var state in self._segmentImages[i])
                {
                    if (self._segmentImages[i].hasOwnProperty(state))
                        objj_msgSend(segment, "setImage:forState:", self._segmentImages[i][state], state);
                }
            }
            if (self._segmentWidths.hasOwnProperty(i))
                objj_msgSend(segment, "setFrameSize:", CGSizeMake(self._segmentWidths[i], CGRectGetHeight(segment._frame)));
            objj_msgSend(self, "addSubview:", segment);
            objj_msgSend(self._ephemeralSubviews, "addObject:", segment);
            objj_msgSend(self._segments, "addObject:", segment);
            x += CGRectGetWidth(segment._frame) - 1;
            w = (self._frame.size.width - CGRectGetMaxX(segment._frame)) / (self._segmentCount - i - 1);
        }
        self._autoresizesSubviews = NO;
        objj_msgSend(self, "setFrameSize:", CGSizeMake(x + self._segmentCount - 1, self._frame.size.height));
        self._autoresizesSubviews = YES;
    }
}

), new objj_method(sel_getUid("_onSelect:"), function $CPSegmentedControl___onSelect_(self, _cmd, sender)
{
    self._lastChangedSegment = objj_msgSend(self._segments, "indexOfObject:", sender);
    if (self._trackingStyle == CPSegmentSwitchTrackingSelectOne)
        objj_msgSend(self, "setSelected:forSegment:", NO, objj_msgSend(self._selectedIndexes, "firstIndex"));
    if (self._trackingStyle === CPSegmentSwitchTrackingSelectAny || self._trackingStyle === CPSegmentSwitchTrackingSelectOne)
    {
        objj_msgSend(self, "setSelected:forSegment:", !objj_msgSend(self._selectedIndexes, "containsIndex:", self._lastChangedSegment), self._lastChangedSegment);
    }
    objj_msgSend(self, "triggerAction");
}

), new objj_method(sel_getUid("sizeToFit"), function $CPSegmentedControl__sizeToFit(self, _cmd)
{
    var index = 0,
        w = 0,
        h = 0,
        width = 0;
    for (; index < self._segmentCount; index++)
    {
        w = 0;
        if (self._segmentImages.hasOwnProperty(index))
        {
            w = MIN(MAX(16, self._frame.size.height - 2), 32);
        }
        if (self._segmentTitles.hasOwnProperty(index))
        {
            var sz = objj_msgSend(self._segmentTitles[index], "sizeWithFont:", objj_msgSend(self, "font"));
            w += sz.width + 22;
            h = MAX(h, sz.height + 10);
        }
        else
            w += 10;
        self._segmentWidths[index] = w;
        width += w;
    }
    objj_msgSend(self, "setFrameSize:", CGSizeMake(width, self._frame.size.height));
}

), new objj_method(sel_getUid("setEnabled:"), function $CPSegmentedControl__setEnabled_(self, _cmd, bool)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSegmentedControl").super_class }, "setEnabled:", bool);
    var count = objj_msgSend(self._subviews, "count"),
        i = 0;
    for (; i < count; i++)
    {
        objj_msgSend(objj_msgSend(self._subviews, "objectAtIndex:", i), "setEnabled:", bool);
    }
}

), new objj_method(sel_getUid("setEnable:forSegment:"), function $CPSegmentedControl__setEnable_forSegment_(self, _cmd, bool, segment)
{
    if (segment > -1 && segment < self._segments.length)
    {
        objj_msgSend(objj_msgSend(self._subviews, "objectAtIndex:", segment), "setEnabled:", bool);
    }
}

), new objj_method(sel_getUid("resizeSubviewsWithOldSize:"), function $CPSegmentedControl__resizeSubviewsWithOldSize_(self, _cmd, aSize)
{
    var count = self._segments.length,
        i = 0;
    var x = 0;
    for (; i < count; i++)
    {
        var seg = objj_msgSend(self._segments, "objectAtIndex:", i);
        var p = seg._frame.size.width / aSize.width;
        var newWidth = p * self._frame.size.width;
        objj_msgSend(self, "setWidth:forSegment:", newWidth, i);
        objj_msgSend(seg, "setFrame:", CGRectMake(x, 0, newWidth, self._frame.size.height));
        x += newWidth - 1;
    }
}

)]);
}var CPSegmentedControlTitlesKey = "CPSegmentedControlTitlesKey",
    CPSegmentedControlWidthsKey = "CPSegmentedControlWidthsKey",
    CPSegmentedControlImagesKey = "CPSegmentedControlImagesKey",
    CPSegmentControlAltImagesKey = "CPSegmentControlAltImagesKey",
    CPSegmentedControlCountKey = "CPSegmentedControlCountKey",
    CPSegmentedControlStyleKey = "CPSegmentedControlStyleKey",
    CPSegmentControlTagsKey = "CPSegmentedControlTagsKey",
    CPSegmentedControlTrackingKey = "CPSegmentedControlTrackingKey";
{
var the_class = objj_getClass("CPSegmentedControl")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPSegmentedControl\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPSegmentedControl__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSegmentedControl").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        self._segmentTitles = objj_msgSend(aCoder, "decodeObjectForKey:", CPSegmentedControlTitlesKey);
        self._segmentWidths = objj_msgSend(aCoder, "decodeObjectForKey:", CPSegmentedControlWidthsKey);
        self._segmentTags = objj_msgSend(aCoder, "decodeObjectForKey:", CPSegmentedControlTagsKey);
        self._segmentImages = objj_msgSend(aCoder, "decodeObjectForKey:", CPSegmentedControlImagesKey);
        self._segments = [];
        self._selectedIndexes = objj_msgSend(CPIndexSet, "indexSet");
        self._segmentCount = objj_msgSend(aCoder, "decodeObjectForKey:", CPSegmentedControlCountKey);
        self._segmentStyle = objj_msgSend(aCoder, "decodeObjectForKey:", CPSegmentedControlStyleKey);
        self._trackingStyle = objj_msgSend(aCoder, "decodeObjectForKey:", CPSegmentedControlTrackingKey);
        self._DOMElement.css("overflow", "visible");
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPSegmentedControl__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSegmentedControl").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._segmentTitles, CPSegmentedControlTitlesKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._segmentWidths, CPSegmentedControlWidthsKey);
    objj_msgSend(aCdoer, "encodeObject:forKey:", self._segmentTags, CPSegmentedControlTagsKey);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._segmentCount, CPSegmentedControlCountKey);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._segmentStyle, CPSegmentedControlStyleKey);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._trackingStyle, CPSegmentedControlTrackingKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._segmentImages, CPSegmentedControlImagesKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", imgPaths, CPSegmentedControlImagesKey);
}

)]);
}var CPWarningAlertStyle = 0,
    CPInformationalAlertStyle = 1,
    CPCriticalAlertStyle = 2;
{var the_class = objj_allocateClassPair(CPObject, "CPAlert"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_theWindow"), new objj_ivar("_messageText"), new objj_ivar("_informativeText"), new objj_ivar("_icon"), new objj_ivar("_messageTextField"), new objj_ivar("_informativeTextField"), new objj_ivar("_iconImageView"), new objj_ivar("_buttons"), new objj_ivar("_alertStyle")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("window"), function $CPAlert__window(self, _cmd)
{
    return self._theWindow;
}

), new objj_method(sel_getUid("_setTheWindow:"), function $CPAlert___setTheWindow_(self, _cmd, newValue)
{
    self._theWindow = newValue;
}

), new objj_method(sel_getUid("messageText"), function $CPAlert__messageText(self, _cmd)
{
    return self._messageText;
}

), new objj_method(sel_getUid("_setMessageText:"), function $CPAlert___setMessageText_(self, _cmd, newValue)
{
    self._messageText = newValue;
}

), new objj_method(sel_getUid("informativeText"), function $CPAlert__informativeText(self, _cmd)
{
    return self._informativeText;
}

), new objj_method(sel_getUid("_setInformativeText:"), function $CPAlert___setInformativeText_(self, _cmd, newValue)
{
    self._informativeText = newValue;
}

), new objj_method(sel_getUid("icon"), function $CPAlert__icon(self, _cmd)
{
    return self._icon;
}

), new objj_method(sel_getUid("_setIcon:"), function $CPAlert___setIcon_(self, _cmd, newValue)
{
    self._icon = newValue;
}

), new objj_method(sel_getUid("buttons"), function $CPAlert__buttons(self, _cmd)
{
    return self._buttons;
}

), new objj_method(sel_getUid("_setButtons:"), function $CPAlert___setButtons_(self, _cmd, newValue)
{
    self._buttons = newValue;
}

), new objj_method(sel_getUid("alertStyle"), function $CPAlert__alertStyle(self, _cmd)
{
    return self._alertStyle;
}

), new objj_method(sel_getUid("_setAlertStyle:"), function $CPAlert___setAlertStyle_(self, _cmd, newValue)
{
    self._alertStyle = newValue;
}

), new objj_method(sel_getUid("init"), function $CPAlert__init(self, _cmd)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPAlert").super_class }, "init");
    if (self)
    {
        self._theWindow = objj_msgSend(objj_msgSend(CPWindow, "alloc"), "initWithContentRect:styleMask:", CGRectMake(0, 0, 400, 150), 0);
        self._messageTextField = objj_msgSend(CPTextField, "labelWithString:", "");
        objj_msgSend(self._messageTextField, "setLineBreakMode:", CPLineBreakByWordWrapping);
        objj_msgSend(self._messageTextField, "setFont:", objj_msgSend(CPFont, "boldSystemFontOfSize:", 13.0));
        self._informativeTextField = objj_msgSend(CPTextField, "labelWithString:", "");
        objj_msgSend(self._informativeTextField, "setLineBreakMode:", CPLineBreakByWordWrapping);
        objj_msgSend(self._informativeTextField, "setFont:", objj_msgSend(CPFont, "systemFontOfSize:", 12.0));
        self._iconImageView = objj_msgSend(objj_msgSend(CPImageView, "alloc"), "initWithFrame:", CGRectMake(0, 0, 64, 64));
        var cv = objj_msgSend(self._theWindow, "contentView");
        objj_msgSend(cv, "addSubview:", self._messageTextField);
        objj_msgSend(cv, "addSubview:", self._informativeTextField);
        objj_msgSend(cv, "addSubview:", self._iconImageView);
        self._buttons = [];
    }
    return self;
}

), new objj_method(sel_getUid("setAlertStyle:"), function $CPAlert__setAlertStyle_(self, _cmd, aStyle)
{
    self._alertStyle = aStyle;
    var theme = objj_msgSend(CPApp, "theme");
    if (self._alertStyle === CPWarningAlertStyle)
    {
        objj_msgSend(self, "setIcon:", objj_msgSend(objj_msgSend(CPImage, "alloc"), "initWithData:", objj_msgSend(CPData, "dataWithBase64:", objj_msgSend(theme, "themeAttribute:forClass:", "warning-icon", objj_msgSend(self, "class")))));
    }
    else if (self._alertStyle === CPInformationalAlertStyle)
    {
        objj_msgSend(self, "setIcon:", objj_msgSend(objj_msgSend(CPImage, "alloc"), "initWithData:", objj_msgSend(CPData, "dataWithBase64:", objj_msgSend(theme, "themeAttribute:forClass:", "informational-icon", objj_msgSend(self, "class")))));
    }
    else if (self._alertStyle === CPCriticalAlertStyle)
    {
        objj_msgSend(self, "setIcon:", objj_msgSend(objj_msgSend(CPImage, "alloc"), "initWithData:", objj_msgSend(CPData, "dataWithBase64:", objj_msgSend(theme, "themeAttribute:forClass:", "critical-icon", objj_msgSend(self, "class")))));
    }
}

), new objj_method(sel_getUid("setMessageText:"), function $CPAlert__setMessageText_(self, _cmd, aString)
{
    self._messageText = aString;
    objj_msgSend(self._messageTextField, "setStringValue:", self._messageText);
}

), new objj_method(sel_getUid("setInformativeText:"), function $CPAlert__setInformativeText_(self, _cmd, aString)
{
    self._informativeText = aString;
    objj_msgSend(self._informativeTextField, "setStringValue:", self._informativeText);
}

), new objj_method(sel_getUid("setIcon:"), function $CPAlert__setIcon_(self, _cmd, anImage)
{
    self._icon = objj_msgSend(anImage, "copy");
    objj_msgSend(self._iconImageView, "setImage:", self._icon);
}

), new objj_method(sel_getUid("runModal"), function $CPAlert__runModal(self, _cmd)
{
    objj_msgSend(self, "layout");
    objj_msgSend(self._theWindow, "setModal:", YES);
    objj_msgSend(self._theWindow, "center");
    objj_msgSend(self._theWindow, "makeKeyAndOrderFront:", nil);
}

), new objj_method(sel_getUid("addButtonWithTitle:"), function $CPAlert__addButtonWithTitle_(self, _cmd, aTitle)
{
    var b = objj_msgSend(CPButton, "buttonWithTitle:", aTitle);
    objj_msgSend(b, "setFrameSize:", CGSizeMake(MAX(80, b._frame.size.width), 25));
    objj_msgSend(b, "setTarget:", self);
    objj_msgSend(b, "setAction:", sel_getUid("_endAlert:"));
    objj_msgSend(b, "setAutoresizingMask:", CPViewMaxYMargin | CPViewMaxXMargin);
    objj_msgSend(self._buttons, "addObject:", b);
    objj_msgSend(objj_msgSend(self._theWindow, "contentView"), "addSubview:", b);
    return b;
}

), new objj_method(sel_getUid("_endAlert:"), function $CPAlert___endAlert_(self, _cmd, sender)
{
    if (objj_msgSend(self._theWindow, "isSheet"))
        objj_msgSend(CPApp, "endSheet:", self._theWindow);
    else
        objj_msgSend(self._theWindow, "orderOut:", sender);
}

), new objj_method(sel_getUid("layout"), function $CPAlert__layout(self, _cmd)
{
    objj_msgSend(self._iconImageView, "setFrameOrigin:", CGPointMake(15, 15));
    objj_msgSend(self._messageTextField, "sizeToFitInWidth:", 400 - 110);
    objj_msgSend(self._messageTextField, "setFrameOrigin:", CGPointMake(94, 15));
    objj_msgSend(self._informativeTextField, "sizeToFitInWidth:", 400 - 110);
    objj_msgSend(self._informativeTextField, "setFrameOrigin:", CGPointMake(94, CGRectGetMaxY(objj_msgSend(self._messageTextField, "frame")) + 10));
    if (CGRectGetMaxY(objj_msgSend(self._informativeTextField, "frame")) >= 150 - 60)
        objj_msgSend(self._theWindow, "setFrameSize:", CGSizeMake(self._theWindow._frame.size.width, CGRectGetMaxY(objj_msgSend(self._informativeTextField, "frame")) + 80));
    var count = objj_msgSend(self._buttons, "count"),
        i = 0;
    var cvframe = objj_msgSend(objj_msgSend(self._theWindow, "contentView"), "frame");
    var x = cvframe.size.width - 15,
        y = cvframe.size.height - 15;
    for (; i < count; i++)
    {
        var b = self._buttons[i];
        objj_msgSend(b, "setFrameOrigin:", CGPointMake(x - b._frame.size.width, y - b._frame.size.height));
        x = x - b._frame.size.width - 15;
    }
}

), new objj_method(sel_getUid("beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:"), function $CPAlert__beginSheetModalForWindow_modalDelegate_didEndSelector_contextInfo_(self, _cmd, window, modalDelegate, alertDidEndSelector, contextInfo)
{
    objj_msgSend(self, "layout");
    objj_msgSend(CPApp, "beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:", self._theWindow, window, modalDelegate, alertDidEndSelector, contextInfo);
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("warningAlertWithMessageText:defaultButton:informativeText:"), function $CPAlert__warningAlertWithMessageText_defaultButton_informativeText_(self, _cmd, text, buttonText, infoText)
{
    var a = objj_msgSend(objj_msgSend(CPAlert, "alloc"), "init");
    objj_msgSend(a, "setMessageText:", text);
    objj_msgSend(a, "setInformativeText:", infoText);
    objj_msgSend(a, "setAlertStyle:", CPWarningAlertStyle);
    objj_msgSend(a, "addButtonWithTitle:", buttonText);
    return a;
}

), new objj_method(sel_getUid("informativeAlertWithMessageText:defaultButton:informativeText:"), function $CPAlert__informativeAlertWithMessageText_defaultButton_informativeText_(self, _cmd, text, buttonText, infoText)
{
    var a = objj_msgSend(objj_msgSend(CPAlert, "alloc"), "init");
    objj_msgSend(a, "setMessageText:", text);
    objj_msgSend(a, "setInformativeText:", infoText);
    objj_msgSend(a, "setAlertStyle:", CPInformationalAlertStyle);
    objj_msgSend(a, "addButtonWithTitle:", buttonText);
    return a;
}

), new objj_method(sel_getUid("criticalAlertWithMessageText:defaultButton:informativeText:"), function $CPAlert__criticalAlertWithMessageText_defaultButton_informativeText_(self, _cmd, text, buttonText, infoText)
{
    var a = objj_msgSend(objj_msgSend(CPAlert, "alloc"), "init");
    objj_msgSend(a, "setMessageText:", text);
    objj_msgSend(a, "setInformativeText:", infoText);
    objj_msgSend(a, "setAlertStyle:", CPCriticalAlertStyle);
    objj_msgSend(a, "addButtonWithTitle:", buttonText);
    return a;
}

)]);
}var CPScrollerVertical = 0,
    CPScrollerHorizontal = 1;
{var the_class = objj_allocateClassPair(CPObject, "_CPScrollerKnob"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_scroller"), new objj_ivar("_position"), new objj_ivar("_DOMElement")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("position"), function $_CPScrollerKnob__position(self, _cmd)
{
    return self._position;
}

), new objj_method(sel_getUid("_setPosition:"), function $_CPScrollerKnob___setPosition_(self, _cmd, newValue)
{
    self._position = newValue;
}

), new objj_method(sel_getUid("initWithScroller:"), function $_CPScrollerKnob__initWithScroller_(self, _cmd, aScroller)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPScrollerKnob").super_class }, "init");
    if (self)
    {
        self._DOMElement = $("<div></div>");
        self._scroller = aScroller;
        if (objj_msgSend(self._scroller, "orientation") === CPScrollerVertical)
        {
            self._DOMElement.addClass("cpscrollview-vscrollthumb");
            self._DOMElement.append(($("<div></div>")).addClass("cpscrollview-vthumb-top"));
            self._DOMElement.append(($("<div></div>")).addClass("cpscrollview-vthumb-center"));
            self._DOMElement.append(($("<div></div>")).addClass("cpscrollview-vthumb-bottom"));
        }
        else
        {
            self._DOMElement.addClass("cpscrollview-hscrollthumb");
            self._DOMElement.append(($("<div></div>")).addClass("cpscrollview-hthumb-left"));
            self._DOMElement.append(($("<div></div>")).addClass("cpscrollview-hthumb-center"));
            self._DOMElement.append(($("<div></div>")).addClass("cpscrollview-hthumb-right"));
        }
        self._DOMElement.bind({mousedown:         function(evt)
        {
            if (evt.which === 1)
            {
                objj_msgSend(self, "setActive:", YES);
                if (objj_msgSend(self._scroller, "orientation") === CPScrollerVertical)
                    self._scroller._mouseThumbDown = evt.pageY - (self._DOMElement.offset()).top;
                else
                    self._scroller._mouseThumbDown = evt.pageX - (self._DOMElement.offset()).left;
            }            objj_msgSend(CPDOMEventDispatcher, "dispatchDOMMouseEvent:toView:", evt, self._scroller);
        }});
    }
    return self;
}

), new objj_method(sel_getUid("setActive:"), function $_CPScrollerKnob__setActive_(self, _cmd, aFlag)
{
    if (objj_msgSend(self._scroller, "orientation") === CPScrollerVertical)
    {
        if (aFlag)
            (self._DOMElement.children(".cpscrollview-vthumb-center")).addClass("active");
        else
            (self._DOMElement.children(".cpscrollview-vthumb-center")).removeClass("active");
    }
    else
    {
        if (aFlag)
            (self._DOMElement.children(".cpscrollview-hthumb-center")).addClass("active");
        else
            (self._DOMElement.children(".cpscrollview-hthumb-center")).removeClass("active");
    }
}

), new objj_method(sel_getUid("setPosition:"), function $_CPScrollerKnob__setPosition_(self, _cmd, aPosition)
{
    self._position = aPosition;
    var s = objj_msgSend(self._scroller, "valueForThemeAttribute:", "scroller-buttons-height");
    if (objj_msgSend(self._scroller, "orientation") === CPScrollerVertical)
        self._DOMElement.css("top", self._position + s);
    else
        self._DOMElement.css("left", self._position + s);
}

)]);
}{var the_class = objj_allocateClassPair(CPControl, "CPScroller"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_scrollButton1"), new objj_ivar("_scrollButton2"), new objj_ivar("_scrollInterval"), new objj_ivar("_mouseThumbDown"), new objj_ivar("_scrollLength"), new objj_ivar("_pointsPerScroll"), new objj_ivar("_knob"), new objj_ivar("_orientation")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("pointsPerScroll"), function $CPScroller__pointsPerScroll(self, _cmd)
{
    return self._pointsPerScroll;
}

), new objj_method(sel_getUid("_setPointsPerScroll:"), function $CPScroller___setPointsPerScroll_(self, _cmd, newValue)
{
    self._pointsPerScroll = newValue;
}

), new objj_method(sel_getUid("orientation"), function $CPScroller__orientation(self, _cmd)
{
    return self._orientation;
}

), new objj_method(sel_getUid("_setOrientation:"), function $CPScroller___setOrientation_(self, _cmd, newValue)
{
    self._orientation = newValue;
}

), new objj_method(sel_getUid("initWithFrame:"), function $CPScroller__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPScroller").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._mouseThumbDown = -1;
        self._scrollLength = -1;
        self._orientation = CPScrollerVertical;
        self._scrollButton1 = $("<div></div>");
        self._scrollButton2 = $("<div></div>");
        self._scrollInterval = null;
    }
    return self;
}

), new objj_method(sel_getUid("setOrientation:"), function $CPScroller__setOrientation_(self, _cmd, orientation)
{
    self._orientation = orientation;
    self._DOMElement.empty();
    if (self._orientation === CPScrollerVertical)
    {
        self._DOMElement.removeClass("cpscrollview-hscrollarea");
        self._DOMElement.addClass("cpscrollview-vscrollarea");
        self._scrollButton1.removeClass("cpscrollview-hscrollleft");
        self._scrollButton1.addClass("cpscrollview-vscrollup");
        self._scrollButton2.removeClass("cpscrollview-hscrollright");
        self._scrollButton2.addClass("cpscrollview-vscrolldown");
        self._DOMElement.css({"tabindex": "1", "role": "scrollbar", "aria-orientation": "1", "aria-valuemin": "0", "aria-valuemax": "100", "aria-valuenow": "0", "aria-label": "vertical scroll bar"});
    }
    else
    {
        self._DOMElement.removeClass("cpscrollview-vscrollarea");
        self._DOMElement.addClass("cpscrollview-hscrollarea");
        self._scrollButton1.addClass("cpscrollview-hscrollleft");
        self._scrollButton1.removeClass("cpscrollview-vscrollup");
        self._scrollButton2.addClass("cpscrollview-hscrollright");
        self._scrollButton2.removeClass("cpscrollview-vscrolldown");
        self._DOMElement.css({"role": "scrollbar", "aria-orientation": "horizontal", "aria-valuemin": "0", "aria-valuemax": "100", "aria-valuenow": "0", "aria-label": "horizontal scroll bar"});
    }
    self._DOMElement.append(self._scrollButton1);
    self._DOMElement.append(self._scrollButton2);
    self._knob = objj_msgSend(objj_msgSend(_CPScrollerKnob, "alloc"), "initWithScroller:", self);
    objj_msgSend(self, "setKnobPosition:", 0);
    self._DOMElement.append(self._knob._DOMElement);
    objj_msgSend(self, "computeKnobProportion");
}

), new objj_method(sel_getUid("setScrollLength:"), function $CPScroller__setScrollLength_(self, _cmd, sl)
{
    self._scrollLength = sl;
    objj_msgSend(self, "computeKnobProportion");
}

), new objj_method(sel_getUid("knobProportion"), function $CPScroller__knobProportion(self, _cmd)
{
    if (self._knob)
        return self._knob._DOMElement.height() / self._frame.size.height;
    return 0;
}

), new objj_method(sel_getUid("setKnobProportion:"), function $CPScroller__setKnobProportion_(self, _cmd, aProportion)
{
    if (self._knob)
    {
        if (objj_msgSend(self, "orientation") === CPScrollerVertical)
        {
            var h = aProportion * self._frame.size.height;
            self._knob._DOMElement.css("height", h);
        }
        else
        {
            var w = aProportion * self._frame.size.width;
            self._knob._DOMElement.css("width", w);
        }
    }
}

), new objj_method(sel_getUid("knobPosition"), function $CPScroller__knobPosition(self, _cmd)
{
    if (self._knob)
        return objj_msgSend(self._knob, "position");
    return 0;
}

), new objj_method(sel_getUid("setKnobPosition:"), function $CPScroller__setKnobPosition_(self, _cmd, aPosition)
{
    if (self._knob)
    {
        var s = objj_msgSend(self, "valueForThemeAttribute:", "scroller-buttons-height");
        if (objj_msgSend(self, "orientation") === CPScrollerVertical)
            objj_msgSend(self._knob, "setPosition:", MAX(0, MIN(aPosition, self._frame.size.height - 2 * s - self._knob._DOMElement.height())));
        else
            objj_msgSend(self._knob, "setPosition:", MAX(0, MIN(aPosition, self._frame.size.width - 2 * s - self._knob._DOMElement.width())));
    }
}

), new objj_method(sel_getUid("computeKnobProportion"), function $CPScroller__computeKnobProportion(self, _cmd)
{
    var minknobsize = objj_msgSend(self, "valueForThemeAttribute:", "minimum-scroller-knob-size"),
        dpps = objj_msgSend(self, "valueForThemeAttribute:", "default-points-per-scroll"),
        s = objj_msgSend(self, "valueForThemeAttribute:", "scroller-buttons-height");
    if (objj_msgSend(self, "orientation") === CPScrollerVertical)
    {
        var dy = self._scrollLength - self._frame.size.height;
        var thumbHeight = MAX(minknobsize, self._frame.size.height - FLOOR(dy / dpps) - 2 * s);
        var proportion = thumbHeight / self._frame.size.height;
        objj_msgSend(self, "setKnobProportion:", proportion);
        var oldPPS = self._pointsPerScroll;
        self._pointsPerScroll = MAX(dpps, dy / MAX(0.01, self._frame.size.height - thumbHeight - 2 * s));
        var vp = objj_msgSend(self._knob, "position");
        if (vp + thumbHeight > self._frame.size.height - 2 * s)
        {
            vp = self._frame.size.height - 2 * s - thumbHeight;
        }
        objj_msgSend(self, "setKnobPosition:", vp);
    }
    else
    {
        var dx = self._scrollLength - self._frame.size.width;
        var thumbWidth = MAX(minknobsize, self._frame.size.width - FLOOR(dx / dpps) - 2 * s);
        var proportion = thumbWidth / self._frame.size.width;
        objj_msgSend(self, "setKnobProportion:", proportion);
        var oldPPS = self._pointsPerScroll;
        self._pointsPerScroll = MAX(dpps, dx / MAX(0.01, self._frame.size.width - thumbWidth - 2 * s));
        var hp = objj_msgSend(self._knob, "position");
        if (hp + thumbWidth > self._frame.size.width - 2 * s)
        {
            hp = self._frame.size.width - 2 * s - thumbWidth;
        }
        objj_msgSend(self, "setKnobPosition:", hp);
    }
}

), new objj_method(sel_getUid("mouseDragged:"), function $CPScroller__mouseDragged_(self, _cmd, theEvent)
{
    if (self._mouseThumbDown !== -1)
    {
        var s = objj_msgSend(self, "valueForThemeAttribute:", "scroller-buttons-height"),
            p = objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(theEvent, "locationInWindow"), nil);
        if (objj_msgSend(self, "orientation") === CPScrollerVertical)
            objj_msgSend(self, "setKnobPosition:", p.y - self._mouseThumbDown - s);
        else
            objj_msgSend(self, "setKnobPosition:", p.x - self._mouseThumbDown - s);
        objj_msgSend(self, "triggerAction");
    }
}

), new objj_method(sel_getUid("mouseUp:"), function $CPScroller__mouseUp_(self, _cmd, theEvent)
{
    self._mouseThumbDown = -1;
    self._scrollButton1.removeClass("active");
    self._scrollButton2.removeClass("active");
    if (self._scrollInterval)
        clearInterval(self._scrollInterval);
    objj_msgSend(self._knob, "setActive:", NO);
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPScroller").super_class }, "mouseUp:", theEvent);
}

), new objj_method(sel_getUid("mouseDown:"), function $CPScroller__mouseDown_(self, _cmd, theEvent)
{
    var p = objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(theEvent, "locationInWindow"), nil);
    if (objj_msgSend(theEvent, "buttonNumber") < 2)
    {
        var minknobsize = objj_msgSend(self, "valueForThemeAttribute:", "minimum-scroller-knob-size"),
            dpps = objj_msgSend(self, "valueForThemeAttribute:", "default-points-per-scroll"),
            h = objj_msgSend(self, "valueForThemeAttribute:", "scroller-buttons-height"),
            w = objj_msgSend(self, "valueForThemeAttribute:", "scroller-buttons-width");
        if (self._mouseThumbDown === -1)
        {
            if (objj_msgSend(self, "orientation") === CPScrollerVertical)
            {
                if (CGRectContainsPoint(CPMakeRect(0, 0, w, h), p))
                {
                    self._scrollButton1.addClass("active");
                    self._scrollInterval = setInterval(                    function()
                    {
                        var p = objj_msgSend(self, "knobPosition");
                        objj_msgSend(self, "setKnobPosition:", p - 1);
                        objj_msgSend(self, "triggerAction");
                        objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
                    }, 30);
                }
                else if (CGRectContainsPoint(CPMakeRect(0, self._frame.size.height - h, w, h), p))
                {
                    self._scrollButton2.addClass("active");
                    self._scrollInterval = setInterval(                    function()
                    {
                        var p = objj_msgSend(self, "knobPosition");
                        objj_msgSend(self, "setKnobPosition:", p + 1);
                        objj_msgSend(self, "triggerAction");
                        objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
                    }, 30);
                }
                else
                {
                    objj_msgSend(self, "setKnobPosition:", p.y - self._knob._DOMElement.height() / 2.0);
                }
            }
            else
            {
                if (CGRectContainsPoint(CPMakeRect(0, 0, h, w), p))
                {
                    self._scrollButton1.addClass("active");
                    self._scrollInterval = setInterval(                    function()
                    {
                        var p = objj_msgSend(self, "knobPosition");
                        objj_msgSend(self, "setKnobPosition:", p - 1);
                        objj_msgSend(self, "triggerAction");
                        objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
                    }, 30);
                }
                else if (CGRectContainsPoint(CPMakeRect(self._frame.size.width - h, 0, h, w), p))
                {
                    self._scrollButton2.addClass("active");
                    self._scrollInterval = setInterval(                    function()
                    {
                        var p = objj_msgSend(self, "knobPosition");
                        objj_msgSend(self, "setKnobPosition:", p + 1);
                        objj_msgSend(self, "triggerAction");
                        objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
                    }, 30);
                }
                else
                {
                    objj_msgSend(self, "setKnobPosition:", p.x - self._knob._DOMElement.width() / 2.0);
                }
            }
            objj_msgSend(self, "triggerAction");
        }
    }
}

), new objj_method(sel_getUid("setFrameSize:"), function $CPScroller__setFrameSize_(self, _cmd, aSize)
{
    var oldSize = CGSizeCreateCopy(self._frame.size);
    var oldPos = objj_msgSend(self, "knobPosition") * self._pointsPerScroll;
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPScroller").super_class }, "setFrameSize:", aSize);
    objj_msgSend(self, "computeKnobProportion");
    var newPos = oldPos / self._pointsPerScroll;
    objj_msgSend(self, "setKnobPosition:", newPos);
    objj_msgSend(self, "triggerAction");
}

)]);
}var CPScrollLeftNotification = "CPScrollLeftNotification",
    CPScrollTopNotification = "CPScrollTopNotification";
{var the_class = objj_allocateClassPair(CPView, "CPScrollView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_documentView"), new objj_ivar("_clipView"), new objj_ivar("_verticalScroller"), new objj_ivar("_horizontalScroller"), new objj_ivar("_hasVerticalScroller"), new objj_ivar("_hasHorizontalScroller"), new objj_ivar("_horizontalBars"), new objj_ivar("_verticalBars"), new objj_ivar("_mousewheelXStart"), new objj_ivar("_mousewheelYStart")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithFrame:"), function $CPScrollView__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPScrollView").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._mousewheelYStart = NO;
        self._mousewheelXStart = NO;
        self._horizontalBars = NO;
        self._verticalBars = NO;
        self._hasHorizontalScroller = YES;
        self._hasVerticalScroller = YES;
        objj_msgSend(self, "_init");
    }
    return self;
}

), new objj_method(sel_getUid("_init"), function $CPScrollView___init(self, _cmd)
{
    self._DOMElement.addClass("cpscrollview");
    if (!self._clipView)
    {
        self._clipView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", objj_msgSend(self, "bounds"));
        objj_msgSend(self._clipView, "setAutoresizingMask:", CPViewWidthSizable | CPViewHeightSizable);
        objj_msgSend(self._ephemeralSubviews, "addObject:", self._clipView);
        objj_msgSend(self, "addSubview:", self._clipView);
    }
    var st = objj_msgSend(self, "valueForThemeAttribute:", "scroller-thickness");
    if (!self._verticalScroller)
    {
        self._verticalScroller = objj_msgSend(objj_msgSend(CPScroller, "alloc"), "initWithFrame:", CGRectMake(self._frame.size.width - st, 0, st, self._frame.size.height));
        objj_msgSend(self._verticalScroller, "setOrientation:", CPScrollerVertical);
        objj_msgSend(self._verticalScroller, "setAutoresizingMask:", CPViewMinXMargin | CPViewHeightSizable);
        objj_msgSend(self._verticalScroller, "setTarget:", self);
        objj_msgSend(self._verticalScroller, "setAction:", sel_getUid("_onMoveVerticalScroller:"));
        objj_msgSend(self._verticalScroller, "setHidden:", YES);
        objj_msgSend(self._ephemeralSubviews, "addObject:", self._verticalScroller);
        objj_msgSend(self, "addSubview:", self._verticalScroller);
    }
    if (!self._horizontalScroller)
    {
        self._horizontalScroller = objj_msgSend(objj_msgSend(CPScroller, "alloc"), "initWithFrame:", CGRectMake(0, self._frame.size.height - st, self._frame.size.width, st));
        objj_msgSend(self._horizontalScroller, "setOrientation:", CPScrollerHorizontal);
        objj_msgSend(self._horizontalScroller, "setAutoresizingMask:", CPViewMinYMargin | CPViewWidthSizable);
        objj_msgSend(self._horizontalScroller, "setTarget:", self);
        objj_msgSend(self._horizontalScroller, "setAction:", sel_getUid("_onMoveHorizontalScroller:"));
        objj_msgSend(self._horizontalScroller, "setHidden:", YES);
        objj_msgSend(self._ephemeralSubviews, "addObject:", self._horizontalScroller);
        objj_msgSend(self, "addSubview:", self._horizontalScroller);
    }
    if (!self._documentView)
        self._documentView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", objj_msgSend(self, "bounds"));
    if (self._documentView)
    {
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "addObserver:selector:name:object:", self, sel_getUid("_computeScrollerSizes"), CPViewFrameDidChangeNotification, self._documentView);
        objj_msgSend(self._clipView, "addSubview:", self._documentView);
    }
    self._DOMElement.append(($("<div></div>")).addClass("cpscrollview-bottom-right"));
    objj_msgSend(self, "_computeScrollerSizes");
}

), new objj_method(sel_getUid("_onMoveHorizontalScroller:"), function $CPScrollView___onMoveHorizontalScroller_(self, _cmd, sender)
{
    var knobPos = objj_msgSend(sender, "knobPosition");
    var pps = objj_msgSend(sender, "pointsPerScroll");
    objj_msgSend(self, "setScrollLeft:", knobPos * pps);
}

), new objj_method(sel_getUid("_onMoveVerticalScroller:"), function $CPScrollView___onMoveVerticalScroller_(self, _cmd, sender)
{
    var knobPos = objj_msgSend(sender, "knobPosition");
    var pps = objj_msgSend(sender, "pointsPerScroll");
    objj_msgSend(self, "setScrollTop:", knobPos * pps);
}

), new objj_method(sel_getUid("setScrollLeft:"), function $CPScrollView__setScrollLeft_(self, _cmd, leftVal)
{
    var oldPos = objj_msgSend(self, "scrollLeft");
    if (self._documentView)
    {
        var leftVal = MAX(0, MIN(leftVal, self._documentView._frame.size.width - self._horizontalScroller._frame.size.width));
        objj_msgSend(self._clipView, "setBoundsOrigin:", CGPointMake(leftVal, self._clipView._bounds.origin.y));
        objj_msgSend(self._horizontalScroller, "setKnobPosition:", leftVal / objj_msgSend(self._horizontalScroller, "pointsPerScroll"));
    }
    if (oldPos !== leftVal)
    {
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPScrollLeftNotification, self);
        objj_msgSend(self, "setNeedsDisplay:", YES);
    }
}

), new objj_method(sel_getUid("setScrollTop:"), function $CPScrollView__setScrollTop_(self, _cmd, topVal)
{
    var oldPos = objj_msgSend(self, "scrollTop");
    if (self._documentView)
    {
        topVal = MAX(0, MIN(topVal, self._documentView._frame.size.height - self._verticalScroller._frame.size.height));
        objj_msgSend(self._clipView, "setBoundsOrigin:", CGPointMake(self._clipView._bounds.origin.x, topVal));
        objj_msgSend(self._verticalScroller, "setKnobPosition:", topVal / objj_msgSend(self._verticalScroller, "pointsPerScroll"));
    }
    if (oldPos !== topVal)
    {
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", CPScrollTopNotification, self);
        objj_msgSend(self, "setNeedsDisplay:", YES);
    }
}

), new objj_method(sel_getUid("scrollToBottom"), function $CPScrollView__scrollToBottom(self, _cmd)
{
    objj_msgSend(self, "setScrollTop:", Number.MAX_VALUE);
}

), new objj_method(sel_getUid("scrollToTop"), function $CPScrollView__scrollToTop(self, _cmd)
{
    objj_msgSend(self, "setScrollTop:", 0);
}

), new objj_method(sel_getUid("scrollLeft"), function $CPScrollView__scrollLeft(self, _cmd)
{
    if (self._clipView)
        return self._clipView._bounds.origin.x;
    return 0;
}

), new objj_method(sel_getUid("scrollTop"), function $CPScrollView__scrollTop(self, _cmd)
{
    if (self._clipView)
        return self._clipView._bounds.origin.y;
    return 0;
}

), new objj_method(sel_getUid("setDocumentView:"), function $CPScrollView__setDocumentView_(self, _cmd, aView)
{
    if (self._documentView)
    {
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "removeObserver:name:object:", self, CPViewFrameDidChangeNotification, self._documentView);
        objj_msgSend(self._documentView, "removeFromSuperview");
    }
    self._documentView = aView;
    if (self._documentView)
    {
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "addObserver:selector:name:object:", self, sel_getUid("_computeScrollerSizes"), CPViewFrameDidChangeNotification, self._documentView);
        objj_msgSend(self._clipView, "addSubview:", self._documentView);
    }
    objj_msgSend(self, "_computeScrollerSizes");
}

), new objj_method(sel_getUid("mouseDown:"), function $CPScrollView__mouseDown_(self, _cmd, theEvent)
{
    objj_msgSend(objj_msgSend(self, "window"), "makeFirstResponder:", self);
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPScrollView").super_class }, "mouseDown:", theEvent);
}

), new objj_method(sel_getUid("keyUp:"), function $CPScrollView__keyUp_(self, _cmd, theEvent)
{
    var kc = objj_msgSend(theEvent, "keyCode");
    if (kc === CPUpArrowKeyCode && self._verticalBars)
        objj_msgSend(self, "setScrollTop:", MAX(0, objj_msgSend(self, "scrollTop") - 10.0));
    else if (kc === CPDownArrowKeyCode && self._verticalBars)
        objj_msgSend(self, "setScrollTop:", objj_msgSend(self, "scrollTop") + 10.0);
    else if (kc === CPLeftArrowKeyCode && self._horizontalBars)
        objj_msgSend(self, "setScrollLeft:", MAX(0, objj_msgSend(self, "scrollLeft") - 10.0));
    else if (kc === CPRightArrowKeyCode && self._horizontalBars)
        objj_msgSend(self, "setScrollLeft:", objj_msgSend(self, "scrollLeft") + 10.0);
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPScrollView").super_class }, "keyUp:", theEvent);
}

), new objj_method(sel_getUid("scrollWheel:"), function $CPScrollView__scrollWheel_(self, _cmd, theEvent)
{
    var deltaY = objj_msgSend(theEvent, "deltaY");
    var deltaX = objj_msgSend(theEvent, "deltaX");
    if (deltaY != 0)
    {
        if (self._mousewheelYStart && self._verticalBars)
        {
            var vp = objj_msgSend(self, "scrollTop") - deltaY * 50;
            objj_msgSend(self, "setScrollTop:", vp);
        }
        self._mousewheelYStart = true;
        self._mousewheelXStart = false;
    }
    else if (deltaX != 0)
    {
        if (self._mousewheelXStart && self._horizontalBars)
        {
            var hp = objj_msgSend(self, "scrollLeft") + deltaX * 10;
            objj_msgSend(self, "setScrollLeft:", hp);
        }
        self._mousewheelYStart = false;
        self._mousewheelXStart = true;
    }
}

), new objj_method(sel_getUid("setFrameSize:"), function $CPScrollView__setFrameSize_(self, _cmd, aSize)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPScrollView").super_class }, "setFrameSize:", aSize);
    objj_msgSend(self, "_computeScrollerSizes");
}

), new objj_method(sel_getUid("setHasHorizontalScroller:"), function $CPScrollView__setHasHorizontalScroller_(self, _cmd, aFlag)
{
    self._hasHorizontalScroller = aFlag;
    objj_msgSend(self._horizontalScroller, "setHidden:", !aFlag);
}

), new objj_method(sel_getUid("setHasVerticalScroller:"), function $CPScrollView__setHasVerticalScroller_(self, _cmd, aFlag)
{
    self._hasVerticalScroller = aFlag;
    objj_msgSend(self._verticalScroller, "setHidden:", !aFlag);
}

), new objj_method(sel_getUid("hasVerticalScroller"), function $CPScrollView__hasVerticalScroller(self, _cmd)
{
    return !objj_msgSend(self._verticalScroller, "isHidden");
}

), new objj_method(sel_getUid("hasHorizontalScroller"), function $CPScrollView__hasHorizontalScroller(self, _cmd)
{
    return !objj_msgSend(self._horizontalScroller, "isHidden");
}

), new objj_method(sel_getUid("_computeScrollerSizes"), function $CPScrollView___computeScrollerSizes(self, _cmd)
{
    if (self._documentView)
    {
        self._horizontalBars = NO;
        self._verticalBars = NO;
        var cwidth = self._documentView._frame.size.width;
        var cheight = self._documentView._frame.size.height;
        self._horizontalBars = cwidth > self._frame.size.width && self._hasHorizontalScroller;
        self._verticalBars = cheight > self._frame.size.height && self._hasVerticalScroller;
        var scrollViewWidth = self._frame.size.width - self._verticalBars * 14.0;
        var scrollViewHeight = self._frame.size.height - self._horizontalBars * 14.0;
        self._horizontalBars = cwidth > scrollViewWidth && self._hasHorizontalScroller;
        self._verticalBars = cheight > scrollViewHeight && self._hasVerticalScroller;
        scrollViewWidth = self._frame.size.width - self._verticalBars * 14.0;
        scrollViewHeight = self._frame.size.height - self._horizontalBars * 14.0;
        objj_msgSend(self._horizontalScroller, "setScrollLength:", cwidth);
        objj_msgSend(self._verticalScroller, "setScrollLength:", cheight);
        if (!self._horizontalBars)
        {
            objj_msgSend(self._horizontalScroller, "setHidden:", YES);
            objj_msgSend(self, "setScrollLeft:", 0);
        }
        else
        {
            var newFrame = objj_msgSend(self._horizontalScroller, "frame");
            newFrame.size.width = scrollViewWidth;
            objj_msgSend(self._horizontalScroller, "setFrameSize:", newFrame.size);
            objj_msgSend(self._horizontalScroller, "setHidden:", NO);
        }
        if (!self._verticalBars)
        {
            objj_msgSend(self._verticalScroller, "setHidden:", YES);
            objj_msgSend(self, "setScrollTop:", 0);
        }
        else
        {
            var newFrame = objj_msgSend(self._verticalScroller, "frame");
            newFrame.size.height = scrollViewHeight;
            objj_msgSend(self._verticalScroller, "setFrameSize:", newFrame.size);
            objj_msgSend(self._verticalScroller, "setHidden:", NO);
        }
        objj_msgSend(self._horizontalScroller, "computeKnobProportion");
        objj_msgSend(self._verticalScroller, "computeKnobProportion");
        if (self._horizontalBars && self._verticalBars)
        {
            if (self._DOMElement.children(".cpscrollview-bottom-right"))
            {
                (self._DOMElement.children(".cpscrollview-bottom-right")).show();
            }
        }
        else
        {
            if (self._DOMElement.children(".cpscrollview-bottom-right"))
            {
                (self._DOMElement.children(".cpscrollview-bottom-right")).hide();
            }
        }
    }
}

), new objj_method(sel_getUid("isRectVisible:"), function $CPScrollView__isRectVisible_(self, _cmd, aRect)
{
    return CGRectContainsRect(objj_msgSend(self._documentView, "visibleRect"), aRect);
}

), new objj_method(sel_getUid("isPointVisible:"), function $CPScrollView__isPointVisible_(self, _cmd, aPoint)
{
    return CGRectContainsPoint(objj_msgSend(self._documentView, "visibleRect"), aPoint);
}

)]);
}var CPScrollViewHasHorizontalScrollerKey = "CPScrollViewHasHorizontalScrollerKey",
    CPScrollViewHasVerticalScrollerKey = "CPScrollViewHasVerticalScrollerKey",
    CPScrollViewDocumentViewKey = "CPScrollViewDocumentViewKey";
{
var the_class = objj_getClass("CPScrollView")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPScrollView\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPScrollView__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPScrollView").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        self._mousewheelYStart = NO;
        self._mousewheelXStart = NO;
        self._horizontalBars = NO;
        self._verticalBars = NO;
        self._hasHorizontalScroller = objj_msgSend(aCoder, "decodeBoolForKey:", CPScrollViewHasHorizontalScrollerKey);
        self._hasVerticalScroller = objj_msgSend(aCoder, "decodeBoolForKey:", CPScrollViewHasVerticalScrollerKey);
        objj_msgSend(self, "setDocumentView:", objj_msgSend(aCoder, "decodeObjectForKey:", CPScrollViewDocumentViewKey));
        objj_msgSend(self, "_init");
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPScrollView__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPScrollView").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._hasHorizontalScroller, CPScrollViewHasHorizontalScrollerKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._hasVerticalScroller, CPScrollViewHasVerticalScrollerKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._documentView, CPScrollViewDocumentViewKey);
}

)]);
}var CPKeyedArchiverClassKey = "__CLASS__";
{var the_class = objj_allocateClassPair(CPCoder, "CPKeyedArchiver"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_json")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initForWritingWithMutableData:"), function $CPKeyedArchiver__initForWritingWithMutableData_(self, _cmd, json)
{
    if (self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPKeyedArchiver").super_class }, "init"))
    {
        self._json = json;
    }
    return self;
}

), new objj_method(sel_getUid("encodeConditionalObject:forKey:"), function $CPKeyedArchiver__encodeConditionalObject_forKey_(self, _cmd, objectToEncode, aKey)
{
    self._json["$$" + aKey + "$$"] = objj_msgSend(objectToEncode, "UID");
}

), new objj_method(sel_getUid("encodeObject:forKey:"), function $CPKeyedArchiver__encodeObject_forKey_(self, _cmd, objectToEncode, aKey)
{
    self._json[aKey] = objj_msgSend(self, "_encodeObject:", objectToEncode);
}

), new objj_method(sel_getUid("_encodeObject:"), function $CPKeyedArchiver___encodeObject_(self, _cmd, objectToEncode)
{
    var encodedJSON = {};
    if (objj_msgSend(self, "_isObjectAPrimitive:", objectToEncode))
    {
        encodedJSON = objectToEncode;
    }
    else if (objectToEncode.isa != undefined)
    {
        var archiver = objj_msgSend(objj_msgSend(objj_msgSend(self, "class"), "alloc"), "initForWritingWithMutableData:", encodedJSON);
        encodedJSON[CPKeyedArchiverClassKey] = class_getName(objj_msgSend(objectToEncode, "class"));
        objj_msgSend(objectToEncode, "encodeWithCoder:", archiver);
    }
    else
    {
        encodedJSON = objectToEncode;
    }
    return encodedJSON;
}

), new objj_method(sel_getUid("_encodeArrayOfObjects:forKey:"), function $CPKeyedArchiver___encodeArrayOfObjects_forKey_(self, _cmd, array, key)
{
    var jsonArray = [];
    var count = objj_msgSend(array, "count");
    for (var i = 0; i < count; i++)
    {
        var obj = array[i];
        jsonArray.push(objj_msgSend(self, "_encodeObject:", obj));
    }
    self._json[key] = jsonArray;
}

), new objj_method(sel_getUid("encodeNumber:forKey:"), function $CPKeyedArchiver__encodeNumber_forKey_(self, _cmd, aNumber, aKey)
{
    objj_msgSend(self, "encodeObject:forKey:", aNumber, aKey);
}

), new objj_method(sel_getUid("encodeDouble:forKey:"), function $CPKeyedArchiver__encodeDouble_forKey_(self, _cmd, aNumber, aKey)
{
    objj_msgSend(self, "encodeObject:forKey:", aNumber, aKey);
}

), new objj_method(sel_getUid("encodeFloat:forKey:"), function $CPKeyedArchiver__encodeFloat_forKey_(self, _cmd, aNumber, aKey)
{
    objj_msgSend(self, "encodeObject:forKey:", aNumber, aKey);
}

), new objj_method(sel_getUid("encodeBool:forKey:"), function $CPKeyedArchiver__encodeBool_forKey_(self, _cmd, aBoolean, aKey)
{
    objj_msgSend(self, "encodeObject:forKey:", aBoolean, aKey);
}

), new objj_method(sel_getUid("encodeRect:forKey:"), function $CPKeyedArchiver__encodeRect_forKey_(self, _cmd, aRect, aKey)
{
    objj_msgSend(self, "encodeObject:forKey:", JSON.stringify(aRect), aKey);
}

), new objj_method(sel_getUid("encodePoint:forKey:"), function $CPKeyedArchiver__encodePoint_forKey_(self, _cmd, aPoint, aKey)
{
    objj_msgSend(self, "encodeObject:forKey:", JSON.stringify(aPoint), aKey);
}

), new objj_method(sel_getUid("encodeSize:forKey:"), function $CPKeyedArchiver__encodeSize_forKey_(self, _cmd, aSize, aKey)
{
    objj_msgSend(self, "encodeObject:forKey:", JSON.stringify(aSize), aKey);
}

), new objj_method(sel_getUid("encodeInt:forKey:"), function $CPKeyedArchiver__encodeInt_forKey_(self, _cmd, anInt, aKey)
{
    objj_msgSend(self, "encodeObject:forKey:", anInt, aKey);
}

), new objj_method(sel_getUid("_encodeDictionaryOfObjects:forKey:"), function $CPKeyedArchiver___encodeDictionaryOfObjects_forKey_(self, _cmd, dictionaryToEncode, aKey)
{
    var encodedDictionary = {};
    var keys = objj_msgSend(dictionaryToEncode, "allKeys");
    for (var i = 0; i < objj_msgSend(keys, "count"); i++)
    {
        encodedDictionary[keys[i]] = objj_msgSend(self, "_encodeObject:", objj_msgSend(dictionaryToEncode, "objectForKey:", keys[i]));
    }
    self._json[aKey] = encodedDictionary;
}

), new objj_method(sel_getUid("_isObjectAPrimitive:"), function $CPKeyedArchiver___isObjectAPrimitive_(self, _cmd, anObject)
{
    var typeOfObject = typeof anObject;
    return typeOfObject === "string" || typeOfObject === "number" || typeOfObject === "boolean" || anObject === null;
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("archivedDataWithRootObject:"), function $CPKeyedArchiver__archivedDataWithRootObject_(self, _cmd, rootObject)
{
    var json = {};
    var archiver = objj_msgSend(objj_msgSend(self, "alloc"), "initForWritingWithMutableData:", json);
    return objj_msgSend(archiver, "_encodeObject:", rootObject);
}

), new objj_method(sel_getUid("allowsKeyedCoding"), function $CPKeyedArchiver__allowsKeyedCoding(self, _cmd)
{
    return YES;
}

)]);
}var CPKeyedUnarchiverClassKey = "__CLASS__";
var _CPDecodedObjectsByUID = {};
var _CPRootObject = null;
{var the_class = objj_allocateClassPair(CPCoder, "CPKeyedUnarchiver"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_json")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initForReadingWithData:"), function $CPKeyedUnarchiver__initForReadingWithData_(self, _cmd, json)
{
    if (self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPKeyedUnarchiver").super_class }, "init"))
    {
        self._json = json;
    }
    return self;
}

), new objj_method(sel_getUid("decodeObjectForKey:"), function $CPKeyedUnarchiver__decodeObjectForKey_(self, _cmd, aKey)
{
    if (objj_msgSend(self, "_isConditionalKey:", aKey))
    {
        var UID = self._json["$$" + aKey + "$$"];
        if (UID)
        {
            if (_CPDecodedObjectsByUID.hasOwnProperty(UID))
                return _CPDecodedObjectsByUID[UID];
            else
            {
                var dependency = _CPCoderFindObjectWithUID(UID, _CPRootObject);
                if (dependency)
                    return objj_msgSend(self, "_decodeObject:", dependency);
                return null;
            }
        }
    }
    return objj_msgSend(self, "_decodeObject:", self._json[aKey]);
}

), new objj_method(sel_getUid("_isConditionalKey:"), function $CPKeyedUnarchiver___isConditionalKey_(self, _cmd, aKey)
{
    return self._json.hasOwnProperty("$$" + aKey + "$$");
}

), new objj_method(sel_getUid("decodeNumberForKey:"), function $CPKeyedUnarchiver__decodeNumberForKey_(self, _cmd, aKey)
{
    return objj_msgSend(self, "_decodeObject:", self._json[aKey]);
}

), new objj_method(sel_getUid("decodeIntForKey:"), function $CPKeyedUnarchiver__decodeIntForKey_(self, _cmd, aKey)
{
    return objj_msgSend(self, "_decodeObject:", self._json[aKey]);
}

), new objj_method(sel_getUid("decodeDoubleForKey:"), function $CPKeyedUnarchiver__decodeDoubleForKey_(self, _cmd, aKey)
{
    return objj_msgSend(self, "_decodeObject:", self._json[aKey]);
}

), new objj_method(sel_getUid("decodeFloatForKey:"), function $CPKeyedUnarchiver__decodeFloatForKey_(self, _cmd, aKey)
{
    return objj_msgSend(self, "_decodeObject:", self._json[aKey]);
}

), new objj_method(sel_getUid("decodeBoolForKey:"), function $CPKeyedUnarchiver__decodeBoolForKey_(self, _cmd, aKey)
{
    return objj_msgSend(self, "_decodeObject:", self._json[aKey]);
}

), new objj_method(sel_getUid("decodeRectForKey:"), function $CPKeyedUnarchiver__decodeRectForKey_(self, _cmd, aKey)
{
    return JSON.parse(objj_msgSend(self, "_decodeObject:", self._json[aKey]));
}

), new objj_method(sel_getUid("decodePointForKey:"), function $CPKeyedUnarchiver__decodePointForKey_(self, _cmd, aKey)
{
    return JSON.parse(objj_msgSend(self, "_decodeObject:", self._json[aKey]));
}

), new objj_method(sel_getUid("decodeSizeForKey:"), function $CPKeyedUnarchiver__decodeSizeForKey_(self, _cmd, aKey)
{
    return JSON.parse(objj_msgSend(self, "_decodeObject:", self._json[aKey]));
}

), new objj_method(sel_getUid("containsValueForKey:"), function $CPKeyedUnarchiver__containsValueForKey_(self, _cmd, key)
{
    return self._json.hasOwnProperty(key) || self._json.hasOwnProperty("$$" + key + "$$");
}

), new objj_method(sel_getUid("_decodeObject:"), function $CPKeyedUnarchiver___decodeObject_(self, _cmd, encodedJSON)
{
    if (objj_msgSend(self, "_isJSONAPrimitive:", encodedJSON))
    {
        return encodedJSON;
    }
    else if (Object.prototype.toString.call(encodedJSON) === '[object Array]')
    {
        var array = [];
        var jsonArray = encodedJSON;
        var length = jsonArray.length;
        for (var i = 0; i < length; i++)
        {
            if (jsonArray[i] != undefined)
                array.push(objj_msgSend(self, "_decodeObject:", jsonArray[i]));
        }
        return array;
    }
    else
    {
        if (encodedJSON === undefined)
            return null;
        if (encodedJSON.hasOwnProperty(CPKeyedUnarchiverClassKey))
        {
            if (_CPDecodedObjectsByUID.hasOwnProperty(encodedJSON["UID"]))
                return _CPDecodedObjectsByUID[encodedJSON["UID"]];
            _CPDecodedObjectsByUID[encodedJSON["UID"]] = null;
            var unarchiver = objj_msgSend(objj_msgSend(objj_msgSend(self, "class"), "alloc"), "initForReadingWithData:", encodedJSON);
            var theClass = objj_getClass(encodedJSON[CPKeyedUnarchiverClassKey]);
            _CPDecodedObjectsByUID[encodedJSON["UID"]] = objj_msgSend(objj_msgSend(objj_msgSend(theClass, "class"), "alloc"), "initWithCoder:", unarchiver);
            return _CPDecodedObjectsByUID[encodedJSON["UID"]];
        }
        else
        {
            return encodedJSON;
        }
    }
    return nil;
}

), new objj_method(sel_getUid("_decodeDictionaryOfObjectsForKey:"), function $CPKeyedUnarchiver___decodeDictionaryOfObjectsForKey_(self, _cmd, aKey)
{
    var decodedDictionary = objj_msgSend(CPDictionary, "dictionary");
    var encodedJSON = self._json[aKey];
    for (var key in encodedJSON)
    {
        if (key !== CPKeyedUnarchiverClassKey)
        {
            objj_msgSend(decodedDictionary, "setObject:forKey:", objj_msgSend(self, "_decodeObject:", encodedJSON[key]), key);
        }
    }
    return decodedDictionary;
}

), new objj_method(sel_getUid("_isJSONAPrimitive:"), function $CPKeyedUnarchiver___isJSONAPrimitive_(self, _cmd, json)
{
    var typeOfObject = typeof json;
    return typeOfObject === "string" || typeOfObject === "number" || typeOfObject === "boolean" || json === null;
}

)]);
class_addMethods(meta_class, [new objj_method(sel_getUid("unarchiveObjectWithData:"), function $CPKeyedUnarchiver__unarchiveObjectWithData_(self, _cmd, json)
{
    _CPRootObject = json;
    var unarchiver = objj_msgSend(objj_msgSend(self, "alloc"), "initForReadingWithData:", json);
    var decodedObject = objj_msgSend(unarchiver, "_decodeObject:", json);
    _CPDecodedObjectsByUID = {};
    _CPRootObject = null;
    return decodedObject;
}

)]);
}function _CPCoderGetChildNodes(rootObject)
{
    if (rootObject.hasOwnProperty(CPKeyedUnarchiverClassKey))
    {
        var className = rootObject[CPKeyedUnarchiverClassKey];
        if (className === class_getName(objj_msgSend(CPArray, "class")) || className === class_getName(objj_msgSend(CPSet, "class")))
            return rootObject["CP.objects"];
        var childNodes = [];
        if (className === class_getName(objj_msgSend(CPDictionary, "class")))
        {
            var objs = rootObject["CP.objects"];
            for (var key in objs)
            {
                var obj = objs[key];
                if (obj instanceof Object && obj.hasOwnProperty(CPKeyedUnarchiverClassKey))
                    childNodes.push(obj);
            }
            return childNodes;
        }
        for (var property in rootObject)
        {
            var obj = rootObject[property];
            if (obj instanceof Object && obj.hasOwnProperty(CPKeyedUnarchiverClassKey))
                childNodes.push(obj);
        }
        return childNodes;
    }
    return [];
}
function _CPCoderFindObjectWithUID(UID, rootObject)
{
    if (rootObject.hasOwnProperty("UID"))
    {
        if (rootObject["UID"] === UID)
            return rootObject;
    }
    var childNodes = _CPCoderGetChildNodes(rootObject);
    var count = childNodes.length,
        index = 0;
    for (; index < count; index++)
    {
        var object = _CPCoderFindObjectWithUID(UID, childNodes[index]);
        if (object)
            return object;
    }
    return null;
}
{var the_class = objj_allocateClassPair(CPControl, "_CPTableColumnHeaderView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_textField"), new objj_ivar("_imageIndicator")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithFrame:"), function $_CPTableColumnHeaderView__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPTableColumnHeaderView").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._textField = objj_msgSend(objj_msgSend(CPTextField, "alloc"), "labelWithString:", "");
    }
    return self;
}

), new objj_method(sel_getUid("setObjectValue:"), function $_CPTableColumnHeaderView__setObjectValue_(self, _cmd, value)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPTableColumnHeaderView").super_class }, "setObjectValue:", value);
    objj_msgSend(self._textField, "setStringValue:", value);
}

), new objj_method(sel_getUid("layoutSubviews"), function $_CPTableColumnHeaderView__layoutSubviews(self, _cmd)
{
    objj_msgSend(self, "setFont:", objj_msgSend(CPFont, "systemFontOfSize:", 12.0));
    self._DOMElement.addClass("cptablecolumnheaderview");
    if (!self._textField)
        self._textField = self._subviews[0];
    objj_msgSend(self._textField, "setThemeAttributes:", self._themeAttributes);
    objj_msgSend(self._textField, "sizeToFit");
    objj_msgSend(self._textField, "setFrame:", CGRectMake(4, (22.0 - CGRectGetHeight(objj_msgSend(self._textField, "frame"))) / 2.0, self._frame.size.width - 8, CGRectGetHeight(objj_msgSend(self._textField, "frame"))));
    if (objj_msgSend(self._textField, "superview") !== self)
        objj_msgSend(self, "addSubview:", self._textField);
}

), new objj_method(sel_getUid("setFrameSize:"), function $_CPTableColumnHeaderView__setFrameSize_(self, _cmd, aSize)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPTableColumnHeaderView").super_class }, "setFrameSize:", aSize);
    objj_msgSend(self, "setNeedsLayout");
}

), new objj_method(sel_getUid("setIndicatorWithClassName:"), function $_CPTableColumnHeaderView__setIndicatorWithClassName_(self, _cmd, aClassName)
{
    if (self._imageIndicator)
        self._imageIndicator.remove();
    if (aClassName)
    {
        self._imageIndicator = ($("<div></div>")).addClass(aClassName);
        self._DOMElement.append(self._imageIndicator);
    }
}

)]);
}{var the_class = objj_allocateClassPair(CPView, "CPTableHeaderView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_mouseDownLocation"), new objj_ivar("_previousTrackingLocation"), new objj_ivar("_activeColumn"), new objj_ivar("_pressedColumn"), new objj_ivar("_isResizing"), new objj_ivar("_isDragging"), new objj_ivar("_isTrackingColumn"), new objj_ivar("_drawsColumnLines"), new objj_ivar("_columnOldWidth"), new objj_ivar("_draggedStartXPos"), new objj_ivar("_columnDragView"), new objj_ivar("_tableView")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("tableView"), function $CPTableHeaderView__tableView(self, _cmd)
{
    return self._tableView;
}

), new objj_method(sel_getUid("setTableView:"), function $CPTableHeaderView__setTableView_(self, _cmd, newValue)
{
    self._tableView = newValue;
}

), new objj_method(sel_getUid("initWithFrame:"), function $CPTableHeaderView__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTableHeaderView").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._mouseDownLocation = CGPointMake(0, 0);
        self._previousTrackingLocation = CGPointMake(0, 0);
        self._activeColumn = -1;
        self._pressedColumn = -1;
        self._isResizing = NO;
        self._isDragging = NO;
        self._isTrackingColumn = NO;
        self._drawsColumnLines = YES;
        self._columnOldWidth = 0.0;
        self._draggedStartXPos = -1;
        self._columnDragView = Nil;
        self._DOMElement.addClass("cptableviewheader");
        self._DOMElement.bind("dblclick",         function(evt)
        {
            evt.preventDefault();
            evt.stopPropagation();
            evt._window = objj_msgSend(self, "window");
            objj_msgSend(self, "doubleAction:", objj_msgSend(CPEvent, "event:", evt));
        });
    }
    return self;
}

), new objj_method(sel_getUid("doubleAction:"), function $CPTableHeaderView__doubleAction_(self, _cmd, theEvent)
{
    var currentLocation = objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(theEvent, "locationInWindow"), nil);
    var col = objj_msgSend(self, "columnAtPoint:", currentLocation);
    objj_msgSend(self._tableView, "_changeSortDescriptorsForClickOnColumn:", col);
}

), new objj_method(sel_getUid("_moveColumn:toColumn:"), function $CPTableHeaderView___moveColumn_toColumn_(self, _cmd, aFromIndex, aToIndex)
{
    objj_msgSend(self._tableView, "moveColumn:toColumn:", aFromIndex, aToIndex);
    self._activeColumn = aToIndex;
    self._pressedColumn = self._activeColumn;
    objj_msgSend(self, "setNeedsDisplay:", YES);
}

), new objj_method(sel_getUid("columnAtPoint:"), function $CPTableHeaderView__columnAtPoint_(self, _cmd, aPoint)
{
    return objj_msgSend(self._tableView, "columnAtPoint:", CGPointCreateCopy(aPoint));
}

), new objj_method(sel_getUid("headerRectOfColumn:"), function $CPTableHeaderView__headerRectOfColumn_(self, _cmd, aColumnIndex)
{
    var headerRect = objj_msgSend(self, "bounds"),
        columnRect = objj_msgSend(self._tableView, "rectOfColumn:", aColumnIndex);
    headerRect.origin.x = CGRectGetMinX(columnRect);
    headerRect.size.width = CGRectGetWidth(columnRect);
    return headerRect;
}

), new objj_method(sel_getUid("_cursorRectForColumn:"), function $CPTableHeaderView___cursorRectForColumn_(self, _cmd, aColumnIndex)
{
    if (aColumnIndex < 0)
        return CGRectMakeZero();
    var rect = objj_msgSend(self, "headerRectOfColumn:", aColumnIndex);
    rect.origin.x = CGRectGetMaxX(rect) - 3;
    rect.size.width = 6;
    return rect;
}

), new objj_method(sel_getUid("_setPressedColumn:"), function $CPTableHeaderView___setPressedColumn_(self, _cmd, aColumnIndex)
{
    if (self._pressedColumn >= 0)
    {
        var headerView = objj_msgSend(objj_msgSend(self._tableView, "tableColumns")[self._pressedColumn], "headerView");
        objj_msgSend(headerView, "unsetThemeState:", "highlighted");
    }
    if (aColumnIndex >= 0)
    {
        var headerView = objj_msgSend(objj_msgSend(self._tableView, "tableColumns")[aColumnIndex], "headerView");
        objj_msgSend(headerView, "setThemeState:", "highlighted");
    }
    self._pressedColumn = aColumnIndex;
}

), new objj_method(sel_getUid("mouseDown:"), function $CPTableHeaderView__mouseDown_(self, _cmd, theEvent)
{
    var currentLocation = objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(theEvent, "locationInWindow"), nil);
    currentLocation.x -= 5.0;
    var columnIndex = objj_msgSend(self, "columnAtPoint:", currentLocation),
        shouldResize = objj_msgSend(self, "shouldResizeTableColumn:at:", columnIndex, CGPointMake(currentLocation.x + 5.0, currentLocation.y));
    if (columnIndex < 0)
        return;
    self._mouseDownLocation = currentLocation;
    self._activeColumn = columnIndex;
    if (shouldResize)
        objj_msgSend(self, "startResizingTableColumn:at:", columnIndex, currentLocation);
    else
    {
        objj_msgSend(self, "startTrackingTableColumn:at:", columnIndex, currentLocation);
        self._isTrackingColumn = YES;
    }
    self._previousTrackingLocation = currentLocation;
}

), new objj_method(sel_getUid("mouseExited:"), function $CPTableHeaderView__mouseExited_(self, _cmd, theEvent)
{
    if (!self._isResizing)
        self._DOMElement.css("cursor", "inherit");
}

), new objj_method(sel_getUid("mouseDragged:"), function $CPTableHeaderView__mouseDragged_(self, _cmd, theEvent)
{
    if (self._activeColumn > -1)
    {
        var currentLocation = objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(theEvent, "locationInWindow"), nil);
        currentLocation.x -= 5.0;
        var columnIndex = objj_msgSend(self, "columnAtPoint:", currentLocation),
            tableColumn = objj_msgSend(self._tableView, "tableColumns")[columnIndex],
            shouldResize = objj_msgSend(self, "shouldResizeTableColumn:at:", columnIndex, CGPointMake(currentLocation.x + 5.0, currentLocation.y));
        if (shouldResize)
            objj_msgSend(self, "continueResizingTableColumn:at:", self._activeColumn, currentLocation);
        else
        {
            if (self._activeColumn === columnIndex && CGRectContainsPoint(objj_msgSend(self, "headerRectOfColumn:", columnIndex), currentLocation))
            {
                if (self._isTrackingColumn && self._pressedColumn >= 0)
                    objj_msgSend(self, "continueTrackingTableColumn:at:", columnIndex, currentLocation);
                else
                    objj_msgSend(self, "startTrackingTableColumn:at:", columnIndex, currentLocation);
            }
            else if (self._isTrackingColumn && self._pressedColumn >= 0)
            {
                objj_msgSend(self, "stopTrackingTableColumn:at:", self._activeColumn, currentLocation);
            }
        }
        self._previousTrackingLocation = currentLocation;
        if (self._isDragging)
        {
            var draggedRect = objj_msgSend(self, "headerRectOfColumn:", self._activeColumn),
                viewLocation = CGPointMake(0, 0);
            viewLocation.x = MAX(1, self._draggedStartXPos + currentLocation.x - self._mouseDownLocation.x);
            viewLocation.y = 0;
            objj_msgSend(self._columnDragView, "setFrameOrigin:", CGPointMake(viewLocation.x - 2 * CGRectGetMinX(objj_msgSend(self, "bounds")), 0));
            var hoveredColumn = objj_msgSend(self, "columnAtPoint:", CGPointMake(viewLocation.x - CGRectGetMinX(objj_msgSend(self, "bounds")), 0));
            if (hoveredColumn === self._activeColumn)
                hoveredColumn = objj_msgSend(self, "columnAtPoint:", CGPointMake(viewLocation.x + draggedRect.size.width - CGRectGetMinX(objj_msgSend(self, "bounds")), 0));
            if (hoveredColumn >= 0 && hoveredColumn !== self._activeColumn && objj_msgSend(objj_msgSend(self._tableView, "tableColumns")[hoveredColumn], "isDraggable"))
            {
                var columnRect = objj_msgSend(self, "headerRectOfColumn:", hoveredColumn),
                    columnCenterPoint = CGPointMake(CGRectGetMidX(columnRect) - CGRectGetMinX(objj_msgSend(self, "bounds")), CGRectGetMidY(columnRect));
                if (hoveredColumn < self._activeColumn && CGRectGetMinX(self._columnDragView._frame) < columnCenterPoint.x || hoveredColumn > self._activeColumn && CGRectGetMaxX(self._columnDragView._frame) > columnCenterPoint.x)
                    objj_msgSend(self, "_moveColumn:toColumn:", self._activeColumn, hoveredColumn);
            }
        }
    }
}

), new objj_method(sel_getUid("mouseMoved:"), function $CPTableHeaderView__mouseMoved_(self, _cmd, theEvent)
{
    var currentLocation = objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(theEvent, "locationInWindow"), nil);
    currentLocation.x -= 5.0;
    var columnIndex = objj_msgSend(self, "columnAtPoint:", currentLocation),
        shouldResize = objj_msgSend(self, "shouldResizeTableColumn:at:", columnIndex, CGPointMake(currentLocation.x + 5.0, currentLocation.y));
    if (shouldResize)
    {
        self._DOMElement.css("cursor", "col-resize");
    }
    else
        self._DOMElement.css('cursor', "inherit");
}

), new objj_method(sel_getUid("mouseUp:"), function $CPTableHeaderView__mouseUp_(self, _cmd, theEvent)
{
    var currentLocation = objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(theEvent, "locationInWindow"), nil);
    currentLocation.x -= 5.0;
    var columnIndex = objj_msgSend(self, "columnAtPoint:", currentLocation),
        shouldResize = objj_msgSend(self, "shouldResizeTableColumn:at:", columnIndex, CGPointMake(currentLocation.x + 5.0, currentLocation.y));
    if (shouldResize)
        objj_msgSend(self, "stopResizingTableColumn:at:", self._activeColumn, currentLocation);
    else if (objj_msgSend(self, "_shouldStopTrackingTableColumn:at:", columnIndex, currentLocation))
    {
        objj_msgSend(self, "stopTrackingTableColumn:at:", columnIndex, currentLocation);
        self._isTrackingColumn = false;
    }
    self._DOMElement.css("cursor", "inherit");
    self._isDragging = NO;
    self._isTrackingColumn = NO;
    objj_msgSend(self._tableView, "_setDraggedColumn:", nil);
    if (self._columnDragView && self._activeColumn >= 0)
    {
        objj_msgSend(objj_msgSend(objj_msgSend(self._tableView, "tableColumns")[self._activeColumn], "headerView"), "setHidden:", NO);
        objj_msgSend(self, "stopTrackingTableColumn:at:", self._activeColumn, currentLocation);
        objj_msgSend(self._columnDragView, "removeFromSuperview");
        self._columnDragView._DOMElement.remove();
        self._columnDragView = null;
        objj_msgSend(self._tableView, "reloadData");
        document.onselectstart =         function()
        {
            return true;
        };
    }
    self._activeColumn = -1;
    self._previousTrackingLocation = currentLocation;
}

), new objj_method(sel_getUid("_shouldDragTableColumn:at:"), function $CPTableHeaderView___shouldDragTableColumn_at_(self, _cmd, aColumnIndex, aPoint)
{
    var theColumn = objj_msgSend(self._tableView, "tableColumns")[aColumnIndex];
    return objj_msgSend(theColumn, "isDraggable") && objj_msgSend(self._tableView, "allowsColumnReordering") && ABS(aPoint.x - self._mouseDownLocation.x) > 10.0;
}

), new objj_method(sel_getUid("shouldResizeTableColumn:at:"), function $CPTableHeaderView__shouldResizeTableColumn_at_(self, _cmd, aColumnIndex, aPoint)
{
    if (aColumnIndex > -1 && aColumnIndex < objj_msgSend(objj_msgSend(self._tableView, "tableColumns"), "count"))
        if (!objj_msgSend(objj_msgSend(self._tableView, "tableColumns")[aColumnIndex], "isResizable"))
            return NO;
    if (self._isTrackingColumn)
        return NO;
    if (self._isResizing)
        return YES;
    return objj_msgSend(self._tableView, "allowsColumnResizing") && CGRectContainsPoint(objj_msgSend(self, "_cursorRectForColumn:", aColumnIndex), aPoint);
}

), new objj_method(sel_getUid("startResizingTableColumn:at:"), function $CPTableHeaderView__startResizingTableColumn_at_(self, _cmd, aColumnIndex, aPoint)
{
    self._isResizing = YES;
}

), new objj_method(sel_getUid("stopResizingTableColumn:at:"), function $CPTableHeaderView__stopResizingTableColumn_at_(self, _cmd, aColumnIndex, aPoint)
{
    self._isResizing = NO;
}

), new objj_method(sel_getUid("continueResizingTableColumn:at:"), function $CPTableHeaderView__continueResizingTableColumn_at_(self, _cmd, aColumnIndex, aPoint)
{
    if (aColumnIndex >= 0 && aColumnIndex < objj_msgSend(self._tableView, "numberOfColumns"))
    {
        var tableColumn = objj_msgSend(self._tableView, "tableColumns")[aColumnIndex],
            columnRect = objj_msgSend(self, "headerRectOfColumn:", aColumnIndex),
            newWidth = objj_msgSend(tableColumn, "width") + aPoint.x - self._previousTrackingLocation.x;
        newWidth = MAX(objj_msgSend(tableColumn, "minWidth"), MIN(newWidth, objj_msgSend(tableColumn, "maxWidth")));
        objj_msgSend(tableColumn, "setWidth:", newWidth);
        objj_msgSend(self, "setNeedsLayout");
        objj_msgSend(self, "setNeedsDisplay:", YES);
        if (newWidth === objj_msgSend(tableColumn, "minWidth") || newWidth === objj_msgSend(tableColumn, "maxWidth"))
            self._isResizing = NO;
    }
}

), new objj_method(sel_getUid("startTrackingTableColumn:at:"), function $CPTableHeaderView__startTrackingTableColumn_at_(self, _cmd, aColumnIndex, aPoint)
{
    objj_msgSend(self, "_setPressedColumn:", aColumnIndex);
}

), new objj_method(sel_getUid("_shouldStopTrackingTableColumn:at:"), function $CPTableHeaderView___shouldStopTrackingTableColumn_at_(self, _cmd, aColumnIndex, aPoint)
{
    return self._isTrackingColumn && self._activeColumn === aColumnIndex && CGRectContainsPoint(objj_msgSend(self, "headerRectOfColumn:", aColumnIndex), aPoint);
}

), new objj_method(sel_getUid("stopTrackingTableColumn:at:"), function $CPTableHeaderView__stopTrackingTableColumn_at_(self, _cmd, aColumnIndex, aPoint)
{
    objj_msgSend(self, "_setPressedColumn:", -1);
}

), new objj_method(sel_getUid("continueTrackingTableColumn:at:"), function $CPTableHeaderView__continueTrackingTableColumn_at_(self, _cmd, aColumnIndex, aPoint)
{
    if (objj_msgSend(self, "_shouldDragTableColumn:at:", aColumnIndex, aPoint) && !self._isDragging)
    {
        self._isDragging = YES;
        if (!self._columnDragView)
        {
            document.onselectstart =             function()
            {
                return false;
            };
            self._columnDragView = objj_msgSend(self._tableView, "_createDragViewForColumn:", aColumnIndex);
            objj_msgSend(self._tableView, "addSubview:", self._columnDragView);
            var column = objj_msgSend(self._tableView, "tableColumns")[aColumnIndex];
            objj_msgSend(objj_msgSend(column, "headerView"), "setHidden:", YES);
            objj_msgSend(self._tableView, "_setDraggedColumn:", column);
            var draggedRect = objj_msgSend(self, "headerRectOfColumn:", aColumnIndex);
            viewLocation = CGPointMake(CGRectGetMinX(draggedRect) + CGRectGetMinX(objj_msgSend(self, "bounds")) + aPoint.x - self._mouseDownLocation.x, 0);
            self._draggedStartXPos = viewLocation.x;
            objj_msgSend(self._columnDragView, "setFrameOrigin:", viewLocation);
        }
        return NO;
    }
    return YES;
}

), new objj_method(sel_getUid("layoutSubviews"), function $CPTableHeaderView__layoutSubviews(self, _cmd)
{
    var tableColumns = objj_msgSend(self._tableView, "tableColumns"),
        count = tableColumns.length,
        index = 0;
    for (; index < count; index++)
    {
        var column = tableColumns[index],
            headerView = objj_msgSend(column, "headerView"),
            frame = objj_msgSend(self, "headerRectOfColumn:", index);
        frame.origin.x += 1.0;
        frame.size.width -= 1.0;
        frame.size.height -= 0.5;
        objj_msgSend(headerView, "setFrame:", frame);
        if (objj_msgSend(headerView, "superview") !== self)
            objj_msgSend(self, "addSubview:", headerView);
    }
}

), new objj_method(sel_getUid("drawRect:"), function $CPTableHeaderView__drawRect_(self, _cmd, aRect)
{
    var ctx = self._graphicsContext;
    var tableColumns = objj_msgSend(self._tableView, "tableColumns"),
        count = tableColumns.length,
        index = 0;
    ctx.fillStyle = "#b5b5b5";
    for (; index < count; index++)
    {
        if (!objj_msgSend(tableColumns[index], "nogrid"))
        {
            var colRect = objj_msgSend(self, "headerRectOfColumn:", index);
            ctx.fillRect(CGRectGetMaxX(colRect) - CGRectGetMinX(objj_msgSend(self, "bounds")), 0, 1, colRect.size.height);
        }
    }
}

)]);
}var CPTableViewDefaultRowHeight = 20.0;
{var the_class = objj_allocateClassPair(CPObject, "CPTableColumn"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_identifier"), new objj_ivar("_editable"), new objj_ivar("_draggable"), new objj_ivar("_resizable"), new objj_ivar("_nogrid"), new objj_ivar("_hidden"), new objj_ivar("_title"), new objj_ivar("_sortDescriptorPrototype"), new objj_ivar("_maxWidth"), new objj_ivar("_minWidth"), new objj_ivar("_width"), new objj_ivar("_dataViewData"), new objj_ivar("_headerView"), new objj_ivar("_tableView"), new objj_ivar("_dataView")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("identifier"), function $CPTableColumn__identifier(self, _cmd)
{
    return self._identifier;
}

), new objj_method(sel_getUid("setIdentifier:"), function $CPTableColumn__setIdentifier_(self, _cmd, newValue)
{
    self._identifier = newValue;
}

), new objj_method(sel_getUid("isEditable"), function $CPTableColumn__isEditable(self, _cmd)
{
    return self._editable;
}

), new objj_method(sel_getUid("setEditable:"), function $CPTableColumn__setEditable_(self, _cmd, newValue)
{
    self._editable = newValue;
}

), new objj_method(sel_getUid("isDraggable"), function $CPTableColumn__isDraggable(self, _cmd)
{
    return self._draggable;
}

), new objj_method(sel_getUid("setDraggable:"), function $CPTableColumn__setDraggable_(self, _cmd, newValue)
{
    self._draggable = newValue;
}

), new objj_method(sel_getUid("isResizable"), function $CPTableColumn__isResizable(self, _cmd)
{
    return self._resizable;
}

), new objj_method(sel_getUid("setResizable:"), function $CPTableColumn__setResizable_(self, _cmd, newValue)
{
    self._resizable = newValue;
}

), new objj_method(sel_getUid("nogrid"), function $CPTableColumn__nogrid(self, _cmd)
{
    return self._nogrid;
}

), new objj_method(sel_getUid("setNogrid:"), function $CPTableColumn__setNogrid_(self, _cmd, newValue)
{
    self._nogrid = newValue;
}

), new objj_method(sel_getUid("isHidden"), function $CPTableColumn__isHidden(self, _cmd)
{
    return self._hidden;
}

), new objj_method(sel_getUid("setHidden:"), function $CPTableColumn__setHidden_(self, _cmd, newValue)
{
    self._hidden = newValue;
}

), new objj_method(sel_getUid("title"), function $CPTableColumn__title(self, _cmd)
{
    return self._title;
}

), new objj_method(sel_getUid("_setTitle:"), function $CPTableColumn___setTitle_(self, _cmd, newValue)
{
    self._title = newValue;
}

), new objj_method(sel_getUid("sortDescriptorPrototype"), function $CPTableColumn__sortDescriptorPrototype(self, _cmd)
{
    return self._sortDescriptorPrototype;
}

), new objj_method(sel_getUid("setSortDescriptorPrototype:"), function $CPTableColumn__setSortDescriptorPrototype_(self, _cmd, newValue)
{
    self._sortDescriptorPrototype = newValue;
}

), new objj_method(sel_getUid("maxWidth"), function $CPTableColumn__maxWidth(self, _cmd)
{
    return self._maxWidth;
}

), new objj_method(sel_getUid("setMaxWidth:"), function $CPTableColumn__setMaxWidth_(self, _cmd, newValue)
{
    self._maxWidth = newValue;
}

), new objj_method(sel_getUid("minWidth"), function $CPTableColumn__minWidth(self, _cmd)
{
    return self._minWidth;
}

), new objj_method(sel_getUid("setMinWidth:"), function $CPTableColumn__setMinWidth_(self, _cmd, newValue)
{
    self._minWidth = newValue;
}

), new objj_method(sel_getUid("width"), function $CPTableColumn__width(self, _cmd)
{
    return self._width;
}

), new objj_method(sel_getUid("_setWidth:"), function $CPTableColumn___setWidth_(self, _cmd, newValue)
{
    self._width = newValue;
}

), new objj_method(sel_getUid("headerView"), function $CPTableColumn__headerView(self, _cmd)
{
    return self._headerView;
}

), new objj_method(sel_getUid("setHeaderView:"), function $CPTableColumn__setHeaderView_(self, _cmd, newValue)
{
    self._headerView = newValue;
}

), new objj_method(sel_getUid("tableView"), function $CPTableColumn__tableView(self, _cmd)
{
    return self._tableView;
}

), new objj_method(sel_getUid("setTableView:"), function $CPTableColumn__setTableView_(self, _cmd, newValue)
{
    self._tableView = newValue;
}

), new objj_method(sel_getUid("dataView"), function $CPTableColumn__dataView(self, _cmd)
{
    return self._dataView;
}

), new objj_method(sel_getUid("setDataView:"), function $CPTableColumn__setDataView_(self, _cmd, newValue)
{
    self._dataView = newValue;
}

), new objj_method(sel_getUid("init"), function $CPTableColumn__init(self, _cmd)
{
    return objj_msgSend(objj_msgSend(self, "alloc"), "initWithIdentifier:", "");
}

), new objj_method(sel_getUid("initWithIdentifier:"), function $CPTableColumn__initWithIdentifier_(self, _cmd, anIdentifier)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTableColumn").super_class }, "init");
    if (self)
    {
        self._identifier = anIdentifier;
        self._editable = YES;
        self._resizable = YES;
        self._draggable = YES;
        self._maxWidth = Number.MAX_VALUE;
        self._minWidth = 10.0;
        self._width = 120.0;
        self._title = "";
        self._nogrid = NO;
        self._sortDescriptorPrototype = nil;
        self._dataViewData = {};
        self._hidden = NO;
        self._headerView = objj_msgSend(objj_msgSend(_CPTableColumnHeaderView, "alloc"), "initWithFrame:", CGRectMake(0, 0, self._width, 15));
        var textView = objj_msgSend(CPTextField, "labelWithString:", "");
        objj_msgSend(textView, "setLineBreakMode:", CPLineBreakByWordWrapping);
        objj_msgSend(textView, "setFrameSize:", CGSizeMake(self._width, CPTableViewDefaultRowHeight));
        objj_msgSend(self, "setDataView:", textView);
    }
    return self;
}

), new objj_method(sel_getUid("setWidth:"), function $CPTableColumn__setWidth_(self, _cmd, aWidth)
{
    if (!self._resizable)
        return;
    var newWidth = MIN(MAX(aWidth, self._minWidth), self._maxWidth);
    if (self._width === newWidth)
        return;
    var oldWidth = self._width;
    self._width = newWidth;
    objj_msgSend(self._headerView, "setFrameSize:", CGSizeMake(self._width - 10, self._headerView._frame.size.height));
    if (self._tableView)
    {
        var index = objj_msgSend(self._tableView, "tableColumns").indexOf(self),
            dirtyTableColumnRangeIndex = self._tableView._dirtyTableColumnRangeIndex;
        if (dirtyTableColumnRangeIndex < 0)
            self._tableView._dirtyTableColumnRangeIndex = index;
        else
            self._tableView._dirtyTableColumnRangeIndex = MIN(index, self._tableView._dirtyTableColumnRangeIndex);
        var rows = self._tableView._exposedRows,
            columns = objj_msgSend(CPIndexSet, "indexSetWithIndexesInRange:", CPMakeRange(index, objj_msgSend(self._tableView._exposedColumns, "lastIndex") - index + 1));
        objj_msgSend(self._tableView, "_layoutDataViewsInRows:columns:", rows, columns);
        objj_msgSend(self._tableView, "load");
        objj_msgSend(self._tableView, "tile");
        objj_msgSend(self._tableView._scrollView, "setNeedsDisplay:", YES);
        objj_msgSend(self, "_postDidResizeNotificationWithOldWidth:", oldWidth);
    }
}

), new objj_method(sel_getUid("setMinWidth:"), function $CPTableColumn__setMinWidth_(self, _cmd, aMinWidth)
{
    if (self._minWidth === aMinWidth)
        return;
    self._minWidth = aMinWidth;
    var newWidth = MAX(self._width, self._minWidth);
    if (self._width != newWidth)
        objj_msgSend(self, "setWidth:", newWidth);
}

), new objj_method(sel_getUid("setMaxWidth:"), function $CPTableColumn__setMaxWidth_(self, _cmd, aMaxWidth)
{
    if (self._maxWidth === aMaxWidth)
        return;
    self._maxWidth = aMaxWidth;
    var newWidth = MIN(self._width, self._maxWidth);
    if (self._width !== newWidth)
        objj_msgSend(self, "setWidth:", newWidth);
}

), new objj_method(sel_getUid("setTitle:"), function $CPTableColumn__setTitle_(self, _cmd, aString)
{
    self._title = aString;
    objj_msgSend(self._headerView, "setStringValue:", self._title);
    objj_msgSend(self._headerView, "setNeedsLayout");
}

), new objj_method(sel_getUid("sizeToFit"), function $CPTableColumn__sizeToFit(self, _cmd)
{
    var width = CGRectGetWidth(self._headerView._frame);
    if (width < self._minWidth)
        objj_msgSend(self, "setMinWidth:", width);
    else if (width > self._maxWidth)
        objj_msgSend(self, "setMaxWidth:", width);
    if (self._width !== width)
        objj_msgSend(self, "setWidth:", width);
}

), new objj_method(sel_getUid("dataViewForRow:"), function $CPTableColumn__dataViewForRow_(self, _cmd, aRowIndex)
{
    var dataViewUID = objj_msgSend(self, "UID") + "," + aRowIndex;
    var x = self._tableView._cachedDataViews[dataViewUID];
    if (x && x.length)
    {
        var view = x.pop();
        return view;
    }
    if (self._tableView._delegate && objj_msgSend(self._tableView._delegate, "respondsToSelector:", sel_getUid("tableView:viewForTableColumn:row:")))
    {
        var view = objj_msgSend(self._tableView._delegate, "tableView:viewForTableColumn:row:", self._tableView, self, aRowIndex);
        if (view)
        {
            view.identifier = dataViewUID;
            view.column = self;
            view.row = aRowIndex;
            return view;
        }
    }
    var uid = objj_msgSend(self._dataView, "UID");
    if (!self._dataViewData[uid])
    {
        self._dataViewData[uid] = objj_msgSend(CPKeyedArchiver, "archivedDataWithRootObject:", self._dataView);
    }
    var newDataView = objj_msgSend(CPKeyedUnarchiver, "unarchiveObjectWithData:", self._dataViewData[uid]);
    newDataView.identifier = dataViewUID;
    newDataView.column = self;
    newDataView.row = aRowIndex;
    objj_msgSend(newDataView, "setAutoresizingMask:", CPViewNotSizable);
    newDataView._DOMElement.addClass("cptableview-dataview");
    return newDataView;
}

), new objj_method(sel_getUid("_newDataViewForRow:"), function $CPTableColumn___newDataViewForRow_(self, _cmd, aRowIndex)
{
    return objj_msgSend(self, "dataViewForRow:", aRowIndex);
}

), new objj_method(sel_getUid("_postDidResizeNotificationWithOldWidth:"), function $CPTableColumn___postDidResizeNotificationWithOldWidth_(self, _cmd, oldWidth)
{
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:userInfo:", CPTableViewColumnDidResizeNotification, self._tableView, objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", self, "tableColumn", oldWidth, "oldWidth"));
}

)]);
}var CPTableColumnIdentifierKey = "CPTableColumnIdentifierKey",
    CPTableColumnEditableKey = "CPTableColumnEditableKey",
    CPTableColumnDraggableKey = "CPTableColumnDraggableKey",
    CPTableColumnResizableKey = "CPTableColumnResizableKey",
    CPTableColumnNoGridKey = "CPTableColumnNoGridKey",
    CPTableColumnHiddenKey = "CPTableColumnHiddenKey",
    CPTableColumnTitleKey = "CPTableColumnTitleKey",
    CPTableColumnMaxWidthKey = "CPTableColumnMaxWidthKey",
    CPTableColumnMinWidthKey = "CPTableColumnMinWidthKey",
    CPTableColumnWidthKey = "CPTableColumnWidthKey",
    CPTableColumnDataViewKey = "CPTableColumnDataViewKey",
    CPTableColumnSortDescriptorPrototypeKey = "CPTableColumnSortDescriptorPrototypeKey";
{
var the_class = objj_getClass("CPTableColumn")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPTableColumn\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("encodeWithCoder:"), function $CPTableColumn__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTableColumn").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._identifier, CPTableColumnIdentifierKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._editable, CPTableColumnEditableKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._draggable, CPTableColumnDraggableKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._resizable, CPTableColumnResizableKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._nogrid, CPTableColumnNoGridKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._hidden, CPTableColumnHiddenKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._title, CPTableColumnTitleKey);
    objj_msgSend(aCoder, "encodeNumber:forKey:", self._maxWidth, CPTableColumnMaxWidthKey);
    objj_msgSend(aCoder, "encodeNumber:forKey:", self._minWidth, CPTableColumnMinWidthKey);
    objj_msgSend(aCoder, "encodeNumber:forKey:", self._width, CPTableColumnWidthKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._dataView, CPTableColumnDataViewKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._sortDescriptorPrototype, CPTableColumnSortDescriptorPrototypeKey);
}

), new objj_method(sel_getUid("initWithCoder:"), function $CPTableColumn__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTableColumn").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        self._identifier = objj_msgSend(aCoder, "decodeObjectForKey:", CPTableColumnIdentifierKey);
        self._editable = objj_msgSend(aCoder, "decodeBoolForKey:", CPTableColumnEditableKey);
        self._resizable = objj_msgSend(aCoder, "decodeBoolForKey:", CPTableColumnResizableKey);
        self._draggable = objj_msgSend(aCoder, "decodeBoolForKey:", CPTableColumnDraggableKey);
        self._maxWidth = objj_msgSend(aCoder, "decodeNumberForKey:", CPTableColumnMaxWidthKey);
        self._minWidth = objj_msgSend(aCoder, "decodeNumberForKey:", CPTableColumnMinWidthKey);
        self._width = objj_msgSend(aCoder, "decodeNumberForKey:", CPTableColumnWidthKey);
        self._title = objj_msgSend(aCoder, "decodeObjectForKey:", CPTableColumnTitleKey);
        self._nogrid = objj_msgSend(aCoder, "decodeBoolForKey:", CPTableColumnNoGridKey);
        self._sortDescriptorPrototype = objj_msgSend(aCoder, "decodeObjectForKey:", CPTableColumnSortDescriptorPrototypeKey);
        self._dataViewData = {};
        self._hidden = objj_msgSend(aCoder, "decodeBoolForKey:", CPTableColumnHiddenKey);
        self._headerView = objj_msgSend(objj_msgSend(_CPTableColumnHeaderView, "alloc"), "initWithFrame:", CGRectMake(0, 0, self._width, 15));
        objj_msgSend(self, "setDataView:", objj_msgSend(aCoder, "decodeObjectForKey:", CPTableColumnDataViewKey));
    }
    return self;
}

)]);
}var CPTableViewColumnDidMoveNotification = "CPTableViewColumnDidMoveNotification",
    CPTableViewColumnDidResizeNotification = "CPTableViewColumnDidResizeNotification",
    CPTableViewSelectionDidChangeNotification = "CPTableViewSelectionDidChangeNotification",
    CPTableViewSelectionIsChangingNotification = "CPTableViewSelectionIsChangingNotification";
var CPTableViewGridNone = 0,
    CPTableViewSolidVerticalGridLineMask = 1 << 0,
    CPTableViewSolidHorizontalGridLineMask = 1 << 1;
var CPTableViewCellEditor = null;
{var the_class = objj_allocateClassPair(CPScrollView, "_CPTableScrollView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_tableView")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("tableView"), function $_CPTableScrollView__tableView(self, _cmd)
{
    return self._tableView;
}

), new objj_method(sel_getUid("setTableView:"), function $_CPTableScrollView__setTableView_(self, _cmd, newValue)
{
    self._tableView = newValue;
}

), new objj_method(sel_getUid("mouseDown:"), function $_CPTableScrollView__mouseDown_(self, _cmd, theEvent)
{
    objj_msgSend(self._tableView._dataBodyView, "mouseDown:", theEvent);
}

), new objj_method(sel_getUid("keyUp:"), function $_CPTableScrollView__keyUp_(self, _cmd, theEvent)
{
}

), new objj_method(sel_getUid("drawRect:"), function $_CPTableScrollView__drawRect_(self, _cmd, aRect)
{
    var ctx = self._graphicsContext;
    var dataView = self._tableView._dataBodyView;
    var exposedRect = objj_msgSend(dataView, "visibleRect"),
        exposedRows = objj_msgSend(self._tableView, "rowsInRect:", exposedRect),
        count = exposedRows.location + exposedRows.length,
        index = exposedRows.location,
        rheight = 0;
    var theme = objj_msgSend(objj_msgSend(CPApp, "theme"), "CPTableView");
    var sourceListSelectionStartColor = objj_msgSend(theme, "objectForKey:", "sourceListSelectionStartColor"),
        sourceListSelectionEndColor = objj_msgSend(theme, "objectForKey:", "sourceListSelectionEndColor"),
        sourceListTopLineColor = objj_msgSend(theme, "objectForKey:", "sourceListTopLineColor"),
        sourceListBottomLineColor = objj_msgSend(theme, "objectForKey:", "sourceListBottomLineColor"),
        selectionColor = objj_msgSend(theme, "objectForKey:", "selectionColor"),
        gridLineColor = objj_msgSend(theme, "objectForKey:", "gridLineColor");
    var st = objj_msgSend(self, "scrollTop");
    ctx.fillStyle = 'transparent';
    ctx.fillRect(0, 0, self._frame.size.width, self._frame.size.height);
    for (; index < count; index++)
    {
        var rowBkIndex = index % 2 === 0 ? 0 : 1;
        var rowRect = objj_msgSend(self._tableView, "rectOfRow:", index);
        if (objj_msgSend(self._tableView._selectedRowIndexes, "containsIndex:", index))
        {
            if (objj_msgSend(self._tableView, "isSourceList"))
            {
                var grd = ctx.createLinearGradient(0, rowRect.origin.y - st, 0, rowRect.origin.y - st + rowRect.size.height);
                grd.addColorStop(0, sourceListSelectionStartColor);
                grd.addColorStop(1, sourceListSelectionEndColor);
                ctx.fillStyle = grd;
                ctx.fillRect(0, rowRect.origin.y - st, self._frame.size.width, rowRect.size.height);
                ctx.fillStyle = sourceListTopLineColor;
                ctx.fillRect(0, rowRect.origin.y - st, self._frame.size.width, 1);
                ctx.fillStyle = sourceListBottomLineColor;
                ctx.fillRect(0, rowRect.origin.y - st + rowRect.size.height - 1, self._frame.size.width, 1);
            }
            else
            {
                ctx.fillStyle = selectionColor;
                ctx.fillRect(0, rowRect.origin.y - st, self._frame.size.width, rowRect.size.height);
            }
            ctx.fillStyle = 'transparent';
        }
        else
        {
            if (objj_msgSend(self._tableView, "usesAlternatingRowBackgroundColors"))
                ctx.fillStyle = objj_msgSend(objj_msgSend(self._tableView, "alternatingRowBackgroundColors")[rowBkIndex], "cssString");
            else
            {
                if (objj_msgSend(self._tableView, "backgroundColor"))
                    ctx.fillStyle = objj_msgSend(objj_msgSend(self._tableView, "backgroundColor"), "hexString");
                else
                    ctx.fillStyle = "#ffffff";
            }
            ctx.fillRect(0, rowRect.origin.y - st, self._frame.size.width, rowRect.size.height);
        }
        if (self._tableView._gridStyleMask & CPTableViewSolidHorizontalGridLineMask)
        {
            ctx.fillStyle = gridLineColor;
            ctx.fillRect(0, rowRect.origin.y + rowRect.size.height - 1 - st, CGRectGetWidth(dataView._frame), 1);
        }
        rheight = CGRectGetMaxY(rowRect);
    }
    if (objj_msgSend(self._tableView, "usesAlternatingRowBackgroundColors"))
    {
        var index = count;
        while (rheight < CGRectGetMaxY(self._tableView._frame))
        {
            var rowBkIndex = index % 2 === 0 ? 0 : 1;
            ctx.fillStyle = objj_msgSend(objj_msgSend(self._tableView, "alternatingRowBackgroundColors")[rowBkIndex], "cssString");
            ctx.fillRect(0, rheight, self._frame.size.width, CPTableViewDefaultRowHeight);
            rheight += CPTableViewDefaultRowHeight;
            index++;
        }
    }
    if (self._tableView._gridStyleMask & CPTableViewSolidVerticalGridLineMask)
    {
        var nc = objj_msgSend(self._tableView, "numberOfColumns"),
            index = 0;
        ctx.fillStyle = gridLineColor;
        for (; index < nc; index++)
        {
            if (!objj_msgSend(objj_msgSend(self._tableView, "tableColumns")[index], "nogrid"))
            {
                var colRect = objj_msgSend(self._tableView, "rectOfColumn:", index);
                ctx.fillRect(CGRectGetMaxX(colRect) - objj_msgSend(self._tableView._scrollView, "scrollLeft"), 0, 1, CGRectGetHeight(self._tableView._scrollView._frame));
            }
        }
        ctx.fillRect(CGRectGetWidth(dataView._frame), 0, 1, CGRectGetHeight(dataView._frame));
    }
}

)]);
}{var the_class = objj_allocateClassPair(CPView, "_CPTableDataBodyView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_selectionAndAnchorRow"), new objj_ivar("_tableView")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("tableView"), function $_CPTableDataBodyView__tableView(self, _cmd)
{
    return self._tableView;
}

), new objj_method(sel_getUid("setTableView:"), function $_CPTableDataBodyView__setTableView_(self, _cmd, newValue)
{
    self._tableView = newValue;
}

), new objj_method(sel_getUid("acceptsFirstResponder"), function $_CPTableDataBodyView__acceptsFirstResponder(self, _cmd)
{
    return YES;
}

), new objj_method(sel_getUid("_getIsRowSelectable:"), function $_CPTableDataBodyView___getIsRowSelectable_(self, _cmd, aRow)
{
    if (aRow < 0)
        return NO;
    var ok = YES;
    if (self._tableView._delegate && objj_msgSend(self._tableView._delegate, "respondsToSelector:", sel_getUid("tableView:shouldSelectRow:")))
    {
        ok = objj_msgSend(self._tableView._delegate, "tableView:shouldSelectRow:", self._tableView, aRow);
    }
    return ok;
}

), new objj_method(sel_getUid("initWithFrame:"), function $_CPTableDataBodyView__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPTableDataBodyView").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._selectionAndAnchorRow = -1;
        _isRowSelectable = {};
        self._DOMElement.bind("dblclick",         function(evt)
        {
            evt.preventDefault();
            evt.stopPropagation();
            evt._window = objj_msgSend(self, "window");
            var theEvent = objj_msgSend(CPEvent, "event:", evt);
            objj_msgSend(self, "doubleAction:", theEvent);
            objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
        });
    }
    return self;
}

), new objj_method(sel_getUid("mouseDown:"), function $_CPTableDataBodyView__mouseDown_(self, _cmd, theEvent)
{
    var mouseLocation = objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(theEvent, "locationInWindow"), nil);
    var aRow = objj_msgSend(self._tableView, "rowAtPoint:", mouseLocation);
    var aCol = objj_msgSend(self._tableView, "columnAtPoint:", mouseLocation);
    var ok = objj_msgSend(self, "_getIsRowSelectable:", aRow);
    if (ok && aRow > -1)
    {
        self._tableView._clickedRow = aRow;
        self._tableView._clickedColumn = aCol;
        objj_msgSend(self._tableView, "_noteSelectionIsChanging");
        if (self._selectionAndAnchorRow > -1 && objj_msgSend(theEvent, "shiftKey") && objj_msgSend(self._tableView, "allowsMultipleSelection"))
        {
            var newSelection = objj_msgSend(CPIndexSet, "indexSetWithIndexesInRange:", CPMakeRange(MIN(aRow, self._selectionAndAnchorRow), ABS(aRow - self._selectionAndAnchorRow) + 1));
            objj_msgSend(self._tableView, "selectRowIndexes:shouldExtendSelection:", newSelection, NO);
        }
        else
        {
            if (aRow > -1 || objj_msgSend(self._tableView, "allowsEmptySelection"))
            {
                self._selectionAndAnchorRow = aRow;
                objj_msgSend(self._tableView, "selectRowIndexes:shouldExtendSelection:", objj_msgSend(CPIndexSet, "indexSetWithIndex:", aRow), NO);
            }
        }
    }
    objj_msgSend(objj_msgSend(self, "window"), "makeFirstResponder:", self);
    if (CPTableViewCellEditor)
        CPTableViewCellEditor.blur();
}

), new objj_method(sel_getUid("doubleAction:"), function $_CPTableDataBodyView__doubleAction_(self, _cmd, theEvent)
{
    var mouseLocation = objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(theEvent, "locationInWindow"), nil);
    var aRow = objj_msgSend(self._tableView, "rowAtPoint:", mouseLocation);
    var aCol = objj_msgSend(self._tableView, "columnAtPoint:", mouseLocation);
    self._tableView._clickedRow = aRow;
    self._tableView._clickedColumn = aCol;
    if (self._tableView._doubleAction)
    {
        objj_msgSend(CPApp, "sendAction:to:from:", self._tableView._doubleAction, objj_msgSend(self._tableView, "target"), self._tableView);
    }
    else
    {
        objj_msgSend(self._tableView, "editColumn:row:", aCol, aRow);
    }
}

), new objj_method(sel_getUid("keyDown:"), function $_CPTableDataBodyView__keyDown_(self, _cmd, theEvent)
{
    var KC = objj_msgSend(theEvent, "keyCode");
    var currentRow = objj_msgSend(self._tableView, "selectedRow");
    if (KC === CPDownArrowKeyCode)
    {
        currentRow++;
        while (!objj_msgSend(self, "_getIsRowSelectable:", currentRow) && currentRow < objj_msgSend(self._tableView, "numberOfRows"))
            currentRow++;
        if (currentRow < objj_msgSend(self._tableView, "numberOfRows"))
        {
            if (objj_msgSend(self, "_getIsRowSelectable:", currentRow))
            {
                objj_msgSend(self._tableView, "selectRowIndexes:shouldExtendSelection:", objj_msgSend(CPIndexSet, "indexSetWithIndex:", currentRow), NO);
                var rowbottom = (currentRow + 1) * (CPTableViewDefaultRowHeight + 3);
                if (currentRow < self._tableView._cachedRowHeights.length)
                {
                    var h = self._tableView._cachedRowHeights[currentRow];
                    rowbottom = h.heightAboveRow + h.height + 3;
                }
                if (!objj_msgSend(self._tableView._scrollView, "isPointVisible:", CGPointMake(objj_msgSend(self._tableView._scrollView, "scrollLeft") + 1, rowbottom)))
                {
                    var sv = self._tableView._scrollView;
                    var cs = objj_msgSend(sv, "scrollTop");
                    var sh = CGRectGetHeight(sv._frame) - sv._horizontalBars * 16.0;
                    objj_msgSend(self._tableView._scrollView, "setScrollTop:", cs + (rowbottom - (cs + sh)));
                }
                self._selectionAndAnchorRow = currentRow;
            }
            if (CPTableViewCellEditor)
                CPTableViewCellEditor.blur();
            objj_msgSend(objj_msgSend(self, "window"), "makeFirstResponder:", self);
        }
    }
    else if (KC === CPUpArrowKeyCode)
    {
        currentRow--;
        while (!objj_msgSend(self, "_getIsRowSelectable:", currentRow) && currentRow > -1)
            currentRow--;
        if (currentRow > -1)
        {
            if (objj_msgSend(self, "_getIsRowSelectable:", currentRow))
            {
                objj_msgSend(self._tableView, "selectRowIndexes:shouldExtendSelection:", objj_msgSend(CPIndexSet, "indexSetWithIndex:", currentRow), NO);
                var rowtop = currentRow * (CPTableViewDefaultRowHeight + 3);
                if (currentRow < self._tableView._cachedRowHeights.length)
                {
                    var h = self._tableView._cachedRowHeights[currentRow];
                    rowtop = h.heightAboveRow - 5;
                }
                if (!objj_msgSend(self._tableView._scrollView, "isPointVisible:", CGPointMake(objj_msgSend(self._tableView._scrollView, "scrollLeft") + 1, rowtop)))
                {
                    objj_msgSend(self._tableView._scrollView, "setScrollTop:", rowtop);
                }
                self._selectionAndAnchorRow = currentRow;
            }
            if (CPTableViewCellEditor)
                CPTableViewCellEditor.blur();
            objj_msgSend(objj_msgSend(self, "window"), "makeFirstResponder:", self);
        }
    }
    else if (KC === CPReturnKeyCode)
    {
        objj_msgSend(self._tableView, "editColumn:row:", self._tableView._firstUserColumn, currentRow);
    }
    else if (KC === CPTabKeyCode)
    {
        var ec = objj_msgSend(self._tableView, "editedColumn");
        if (ec + 1 >= objj_msgSend(self._tableView, "numberOfColumns"))
            ec = self._tableView._firstUserColumn - 1;
        objj_msgSend(self._tableView, "editColumn:row:", ec + 1, currentRow);
    }
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPTableDataBodyView").super_class }, "keyDown:", theEvent);
}

)]);
}{var the_class = objj_allocateClassPair(CPView, "_CPColumnDragView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_lineColor")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("lineColor"), function $_CPColumnDragView__lineColor(self, _cmd)
{
    return self._lineColor;
}

), new objj_method(sel_getUid("setLineColor:"), function $_CPColumnDragView__setLineColor_(self, _cmd, newValue)
{
    self._lineColor = newValue;
}

), new objj_method(sel_getUid("initWithFrame:"), function $_CPColumnDragView__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("_CPColumnDragView").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._DOMElement.addClass("cpcolumndragview");
    }
    return self;
}

)]);
}{var the_class = objj_allocateClassPair(CPControl, "CPTableView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_allowsColumnReordering"), new objj_ivar("_allowsColumnResizing"), new objj_ivar("_allowsMultipleSelection"), new objj_ivar("_allowsEmptySelection"), new objj_ivar("_usesAlternatingRowBackgroundColors"), new objj_ivar("_sourceList"), new objj_ivar("_hasHeader"), new objj_ivar("_alternatingRowBackgroundColors"), new objj_ivar("_gridStyleMask"), new objj_ivar("_gridColor"), new objj_ivar("_lastSelectedRow"), new objj_ivar("_clickedColumn"), new objj_ivar("_clickedRow"), new objj_ivar("_editedColumn"), new objj_ivar("_editedRow"), new objj_ivar("_rowHeight"), new objj_ivar("_selectedColumnIndexes"), new objj_ivar("_selectedRowIndexes"), new objj_ivar("_exposedRows"), new objj_ivar("_exposedColumns"), new objj_ivar("_exposedRect"), new objj_ivar("_tableColumnRanges"), new objj_ivar("_dirtyTableColumnRangeIndex"), new objj_ivar("_numberOfHiddenColumns"), new objj_ivar("_sortDescriptors"), new objj_ivar("_emptyText"), new objj_ivar("_dataSource"), new objj_ivar("_delegate"), new objj_ivar("_autoresizeColumns"), new objj_ivar("_firstUserColumn"), new objj_ivar("_tableColumns"), new objj_ivar("_intercellSpacing"), new objj_ivar("_currentHighlightedTableColumn"), new objj_ivar("_reloadAllRows"), new objj_ivar("_cachedDataViews"), new objj_ivar("_dataViewsForTableColumns"), new objj_ivar("_objectValues"), new objj_ivar("_cachedRowHeights"), new objj_ivar("_draggingViews"), new objj_ivar("_draggedColumn"), new objj_ivar("_dataBodyView"), new objj_ivar("_scrollView"), new objj_ivar("_headerView"), new objj_ivar("_dataSourceGetDataSel"), new objj_ivar("_dataSourceNumberOfRowsSel"), new objj_ivar("_dataSourceSetDataSel"), new objj_ivar("_delegateRowHeightSel"), new objj_ivar("_dataSourceSortDescChange"), new objj_ivar("_doubleAction")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("allowsColumnReordering"), function $CPTableView__allowsColumnReordering(self, _cmd)
{
    return self._allowsColumnReordering;
}

), new objj_method(sel_getUid("setAllowsColumnReordering:"), function $CPTableView__setAllowsColumnReordering_(self, _cmd, newValue)
{
    self._allowsColumnReordering = newValue;
}

), new objj_method(sel_getUid("allowsColumnResizing"), function $CPTableView__allowsColumnResizing(self, _cmd)
{
    return self._allowsColumnResizing;
}

), new objj_method(sel_getUid("setAllowsColumnResizing:"), function $CPTableView__setAllowsColumnResizing_(self, _cmd, newValue)
{
    self._allowsColumnResizing = newValue;
}

), new objj_method(sel_getUid("allowsMultipleSelection"), function $CPTableView__allowsMultipleSelection(self, _cmd)
{
    return self._allowsMultipleSelection;
}

), new objj_method(sel_getUid("setAllowsMultipleSelection:"), function $CPTableView__setAllowsMultipleSelection_(self, _cmd, newValue)
{
    self._allowsMultipleSelection = newValue;
}

), new objj_method(sel_getUid("allowsEmptySelection"), function $CPTableView__allowsEmptySelection(self, _cmd)
{
    return self._allowsEmptySelection;
}

), new objj_method(sel_getUid("setAllowsEmptySelection:"), function $CPTableView__setAllowsEmptySelection_(self, _cmd, newValue)
{
    self._allowsEmptySelection = newValue;
}

), new objj_method(sel_getUid("usesAlternatingRowBackgroundColors"), function $CPTableView__usesAlternatingRowBackgroundColors(self, _cmd)
{
    return self._usesAlternatingRowBackgroundColors;
}

), new objj_method(sel_getUid("setUsesAlternatingRowBackgroundColors:"), function $CPTableView__setUsesAlternatingRowBackgroundColors_(self, _cmd, newValue)
{
    self._usesAlternatingRowBackgroundColors = newValue;
}

), new objj_method(sel_getUid("isSourceList"), function $CPTableView__isSourceList(self, _cmd)
{
    return self._sourceList;
}

), new objj_method(sel_getUid("setSourceList:"), function $CPTableView__setSourceList_(self, _cmd, newValue)
{
    self._sourceList = newValue;
}

), new objj_method(sel_getUid("hasHeader"), function $CPTableView__hasHeader(self, _cmd)
{
    return self._hasHeader;
}

), new objj_method(sel_getUid("_setHasHeader:"), function $CPTableView___setHasHeader_(self, _cmd, newValue)
{
    self._hasHeader = newValue;
}

), new objj_method(sel_getUid("alternatingRowBackgroundColors"), function $CPTableView__alternatingRowBackgroundColors(self, _cmd)
{
    return self._alternatingRowBackgroundColors;
}

), new objj_method(sel_getUid("setAlternatingRowBackgroundColors:"), function $CPTableView__setAlternatingRowBackgroundColors_(self, _cmd, newValue)
{
    self._alternatingRowBackgroundColors = newValue;
}

), new objj_method(sel_getUid("gridStyleMask"), function $CPTableView__gridStyleMask(self, _cmd)
{
    return self._gridStyleMask;
}

), new objj_method(sel_getUid("setGridStyleMask:"), function $CPTableView__setGridStyleMask_(self, _cmd, newValue)
{
    self._gridStyleMask = newValue;
}

), new objj_method(sel_getUid("gridColor"), function $CPTableView__gridColor(self, _cmd)
{
    return self._gridColor;
}

), new objj_method(sel_getUid("setGridColor:"), function $CPTableView__setGridColor_(self, _cmd, newValue)
{
    self._gridColor = newValue;
}

), new objj_method(sel_getUid("clickedColumn"), function $CPTableView__clickedColumn(self, _cmd)
{
    return self._clickedColumn;
}

), new objj_method(sel_getUid("_setClickedColumn:"), function $CPTableView___setClickedColumn_(self, _cmd, newValue)
{
    self._clickedColumn = newValue;
}

), new objj_method(sel_getUid("clickedRow"), function $CPTableView__clickedRow(self, _cmd)
{
    return self._clickedRow;
}

), new objj_method(sel_getUid("_setClickedRow:"), function $CPTableView___setClickedRow_(self, _cmd, newValue)
{
    self._clickedRow = newValue;
}

), new objj_method(sel_getUid("editedColumn"), function $CPTableView__editedColumn(self, _cmd)
{
    return self._editedColumn;
}

), new objj_method(sel_getUid("_setEditedColumn:"), function $CPTableView___setEditedColumn_(self, _cmd, newValue)
{
    self._editedColumn = newValue;
}

), new objj_method(sel_getUid("editedRow"), function $CPTableView__editedRow(self, _cmd)
{
    return self._editedRow;
}

), new objj_method(sel_getUid("_setEditedRow:"), function $CPTableView___setEditedRow_(self, _cmd, newValue)
{
    self._editedRow = newValue;
}

), new objj_method(sel_getUid("sortDescriptors"), function $CPTableView__sortDescriptors(self, _cmd)
{
    return self._sortDescriptors;
}

), new objj_method(sel_getUid("_setSortDescriptors:"), function $CPTableView___setSortDescriptors_(self, _cmd, newValue)
{
    self._sortDescriptors = newValue;
}

), new objj_method(sel_getUid("emptyText"), function $CPTableView__emptyText(self, _cmd)
{
    return self._emptyText;
}

), new objj_method(sel_getUid("setEmptyText:"), function $CPTableView__setEmptyText_(self, _cmd, newValue)
{
    self._emptyText = newValue;
}

), new objj_method(sel_getUid("dataSource"), function $CPTableView__dataSource(self, _cmd)
{
    return self._dataSource;
}

), new objj_method(sel_getUid("setDataSource:"), function $CPTableView__setDataSource_(self, _cmd, newValue)
{
    self._dataSource = newValue;
}

), new objj_method(sel_getUid("delegate"), function $CPTableView__delegate(self, _cmd)
{
    return self._delegate;
}

), new objj_method(sel_getUid("_setDelegate:"), function $CPTableView___setDelegate_(self, _cmd, newValue)
{
    self._delegate = newValue;
}

), new objj_method(sel_getUid("autoresizeColumns"), function $CPTableView__autoresizeColumns(self, _cmd)
{
    return self._autoresizeColumns;
}

), new objj_method(sel_getUid("setAutoresizeColumns:"), function $CPTableView__setAutoresizeColumns_(self, _cmd, newValue)
{
    self._autoresizeColumns = newValue;
}

), new objj_method(sel_getUid("firstUserColumn"), function $CPTableView__firstUserColumn(self, _cmd)
{
    return self._firstUserColumn;
}

), new objj_method(sel_getUid("setFirstUserColumn:"), function $CPTableView__setFirstUserColumn_(self, _cmd, newValue)
{
    self._firstUserColumn = newValue;
}

), new objj_method(sel_getUid("tableColumns"), function $CPTableView__tableColumns(self, _cmd)
{
    return self._tableColumns;
}

), new objj_method(sel_getUid("_setTableColumns:"), function $CPTableView___setTableColumns_(self, _cmd, newValue)
{
    self._tableColumns = newValue;
}

), new objj_method(sel_getUid("doubleAction"), function $CPTableView__doubleAction(self, _cmd)
{
    return self._doubleAction;
}

), new objj_method(sel_getUid("setDoubleAction:"), function $CPTableView__setDoubleAction_(self, _cmd, newValue)
{
    self._doubleAction = newValue;
}

), new objj_method(sel_getUid("initWithFrame:"), function $CPTableView__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTableView").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        objj_msgSend(self, "_init");
    }
    return self;
}

), new objj_method(sel_getUid("_init"), function $CPTableView___init(self, _cmd)
{
    self._alternatingRowBackgroundColors = [objj_msgSend(CPColor, "whiteColor"), objj_msgSend(CPColor, "colorWithHexString:", "F5F9FC")];
    self._gridColor = objj_msgSend(CPColor, "colorWithHexString:", "dce0e2");
    self._delegate = nil;
    self._dataSource = nil;
    self._firstUserColumn = 0;
    self._allowsEmptySelection = YES;
    self._allowsMultipleSelection = NO;
    self._allowsColumnResizing = YES;
    self._allowsColumnReordering = YES;
    self._autoresizeColumns = NO;
    self._usesAlternatingRowBackgroundColors = NO;
    self._sourceList = NO;
    self._hasHeader = YES;
    self._gridStyleMask = CPTableViewSolidVerticalGridLineMask;
    self._doubleAction = nil;
    self._tableColumns = [];
    self._intercellSpacing = CGSizeMake(2.0, 3.0);
    self._currentHighlightedTableColumn = Nil;
    self._DOMElement.addClass("cptableview");
    self._cachedDataViews = {};
    self._cachedRowHeights = [];
    self._dataViewsForTableColumns = {};
    self._draggedColumn = null;
    self._draggingViews = [];
    self._objectValues = {};
    self._reloadAllRows = YES;
    self._emptyText = "No Records.";
    self._lastSelectedRow = -1;
    self._clickedColumn = -1;
    self._clickedRow = -1;
    self._editedColumn = -1;
    self._editedRow = -1;
    self._rowHeight = CPTableViewDefaultRowHeight;
    self._selectedColumnIndexes = objj_msgSend(CPIndexSet, "indexSet");
    self._selectedRowIndexes = objj_msgSend(CPIndexSet, "indexSet");
    self._exposedRows = objj_msgSend(CPIndexSet, "indexSet");
    self._exposedColumns = objj_msgSend(CPIndexSet, "indexSet");
    self._exposedRect = null;
    self._tableColumnRanges = [];
    self._dirtyTableColumnRangeIndex = 0;
    self._numberOfHiddenColumns = 0;
    self._sortDescriptors = [];
    self._dataSourceNumberOfRowsSel = sel_getUid("numberOfRowsInTableView:");
    self._dataSourceGetDataSel = sel_getUid("tableView:objectValueForTableColumn:row:");
    self._dataSourceSetDataSel = sel_getUid("tableView:setObjectValue:forTableColumn:row:");
    self._delegateRowHeightSel = sel_getUid("tableView:heightForRow:");
    self._dataSourceSortDescChange = sel_getUid("tableView:sortDescriptorsDidChange:");
    objj_msgSend(self, "setHeaderView:", objj_msgSend(objj_msgSend(CPTableHeaderView, "alloc"), "initWithFrame:", CGRectMake(0, 0, self._frame.size.width, 22.0)));
    self._dataBodyView = objj_msgSend(objj_msgSend(_CPTableDataBodyView, "alloc"), "init");
    self._dataBodyView._tableView = self;
    self._scrollView = objj_msgSend(objj_msgSend(_CPTableScrollView, "alloc"), "initWithFrame:", CGRectMake(0, 22.0 * self._hasHeader, self._frame.size.width, self._frame.size.height - 22.0 * self._hasHeader));
    objj_msgSend(self._scrollView, "setAutoresizingMask:", CPViewWidthSizable | CPViewHeightSizable);
    objj_msgSend(self._scrollView, "setDocumentView:", self._dataBodyView);
    objj_msgSend(self._scrollView, "setTableView:", self);
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "addObserver:selector:name:object:", self, sel_getUid("_onScrollLeft:"), CPScrollLeftNotification, self._scrollView);
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "addObserver:selector:name:object:", self, sel_getUid("_onScrollTop:"), CPScrollTopNotification, self._scrollView);
    objj_msgSend(self, "addSubview:", self._scrollView);
}

), new objj_method(sel_getUid("layoutSubviews"), function $CPTableView__layoutSubviews(self, _cmd)
{
    objj_msgSend(self, "reloadData");
}

), new objj_method(sel_getUid("setDelegate:"), function $CPTableView__setDelegate_(self, _cmd, aDelegate)
{
    if (self._delegate === aDelegate)
        return;
    var defaultCenter = objj_msgSend(CPNotificationCenter, "defaultCenter");
    if (self._delegate)
    {
        if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("tableViewColumnDidMove:")))
            objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, CPTableViewColumnDidMoveNotification, self);
        if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("tableViewColumnDidResize:")))
            objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, CPTableViewColumnDidResizeNotification, self);
        if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("tableViewSelectionDidChange:")))
            objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, CPTableViewSelectionDidChangeNotification, self);
        if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("tableViewSelectionIsChanging:")))
            objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, CPTableViewSelectionIsChangingNotification, self);
    }
    self._delegate = aDelegate;
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("tableViewColumnDidMove:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("tableViewColumnDidMove:"), CPTableViewColumnDidMoveNotification, self);
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("tableViewColumnDidResize:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("tableViewColumnDidResize:"), CPTableViewColumnDidResizeNotification, self);
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("tableViewSelectionDidChange:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("tableViewSelectionDidChange:"), CPTableViewSelectionDidChangeNotification, self);
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("tableViewSelectionIsChanging:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("tableViewSelectionIsChanging:"), CPTableViewSelectionIsChangingNotification, self);
}

), new objj_method(sel_getUid("setHasHeader:"), function $CPTableView__setHasHeader_(self, _cmd, aFlag)
{
    if (self._hasHeader !== aFlag)
    {
        self._hasHeader = aFlag;
        objj_msgSend(self._headerView, "setHidden:", !self._hasHeader);
        objj_msgSend(self._scrollView, "setFrame:", CGRectMake(0, 22.0 * self._hasHeader, self._frame.size.width, self._frame.size.height - 22.0 * self._hasHeader));
    }
}

), new objj_method(sel_getUid("setHeaderView:"), function $CPTableView__setHeaderView_(self, _cmd, aHeaderView)
{
    if (self._hasHeader)
    {
        if (self._headerView === aHeaderView)
            return;
        if (self._headerView)
        {
            objj_msgSend(self._headerView, "setTableView:", nil);
            objj_msgSend(self._headerView, "removeFromSuperview");
        }
        self._headerView = aHeaderView;
        if (self._headerView)
        {
            objj_msgSend(self._headerView, "setTableView:", self);
            objj_msgSend(self._headerView, "setFrameSize:", CGSizeMake(self._frame.size.width, self._headerView._frame.size.height));
            objj_msgSend(self, "addSubview:", self._headerView);
        }
    }
}

), new objj_method(sel_getUid("reloadData"), function $CPTableView__reloadData(self, _cmd)
{
    if (!self._dataSource)
        throw new Error("TableView does not have a DataSource!");
    self._reloadAllRows = YES;
    self._objectValues = {};
    objj_msgSend(self, "noteNumberOfRowsChanged");
    objj_msgSend(self, "load");
    objj_msgSend(self._headerView, "setNeedsLayout");
    objj_msgSend(self._headerView, "setNeedsDisplay:", YES);
    objj_msgSend(self._scrollView, "setNeedsDisplay:", YES);
}

), new objj_method(sel_getUid("_onScrollTop:"), function $CPTableView___onScrollTop_(self, _cmd, aNotification)
{
    objj_msgSend(self, "load");
}

), new objj_method(sel_getUid("_onScrollLeft:"), function $CPTableView___onScrollLeft_(self, _cmd, aNotification)
{
    var l = objj_msgSend(self._scrollView, "scrollLeft");
    objj_msgSend(self._headerView, "setBoundsOrigin:", CGPointMake(l, CGRectGetMinY(objj_msgSend(self._headerView, "bounds"))));
    objj_msgSend(self._headerView, "setNeedsDisplay:", YES);
    objj_msgSend(self, "load");
}

), new objj_method(sel_getUid("addTableColumn:"), function $CPTableView__addTableColumn_(self, _cmd, aTableColumn)
{
    objj_msgSend(aTableColumn, "setTableView:", self);
    objj_msgSend(self._tableColumns, "addObject:", aTableColumn);
}

), new objj_method(sel_getUid("columnWithIdentifier:"), function $CPTableView__columnWithIdentifier_(self, _cmd, anIdentifier)
{
    var index = 0,
        count = self._tableColumns.length;
    for (; index < count; index++)
    {
        if (objj_msgSend(self._tableColumns[index], "identifier") === anIdentifier)
            return index;
    }
    return CPNotFound;
}

), new objj_method(sel_getUid("tableColumnWithIdentifier:"), function $CPTableView__tableColumnWithIdentifier_(self, _cmd, anIdentifier)
{
    var index = objj_msgSend(self, "columnWithIdentifier:", anIdentifier);
    if (index === CPNotFound)
        return nil;
    return objj_msgSend(self._tableColumns, "objectAtIndex:", index);
}

), new objj_method(sel_getUid("selectedRowIndexes"), function $CPTableView__selectedRowIndexes(self, _cmd)
{
    return objj_msgSend(self._selectedRowIndexes, "copy");
}

), new objj_method(sel_getUid("_setSelectedRowIndexes:"), function $CPTableView___setSelectedRowIndexes_(self, _cmd, rows)
{
    var previousSelectedIndexes = self._selectedRowIndexes;
    self._lastSelectedRow = objj_msgSend(rows, "count") > 0 ? objj_msgSend(rows, "lastIndex") : -1;
    self._selectedRowIndexes = objj_msgSend(rows, "copy");
    objj_msgSend(self, "_updateHighlightWithOldRows:newRows:", previousSelectedIndexes, self._selectedRowIndexes);
    if (!objj_msgSend(previousSelectedIndexes, "isEqual:", self._selectedRowIndexes))
        objj_msgSend(self, "_noteSelectionDidChange");
}

), new objj_method(sel_getUid("selectRowIndexes:shouldExtendSelection:"), function $CPTableView__selectRowIndexes_shouldExtendSelection_(self, _cmd, rows, shouldExtendSelection)
{
    var newSelectedIndexes;
    if (shouldExtendSelection)
    {
        newSelectedIndexes = objj_msgSend(self._selectedRowIndexes, "copy");
        objj_msgSend(newSelectedIndexes, "addIndexes:", rows);
    }
    else
        newSelectedIndexes = objj_msgSend(rows, "copy");
    objj_msgSend(self, "_setSelectedRowIndexes:", newSelectedIndexes);
    objj_msgSend(self._scrollView, "setNeedsDisplay:", YES);
}

), new objj_method(sel_getUid("_updateHighlightWithOldRows:newRows:"), function $CPTableView___updateHighlightWithOldRows_newRows_(self, _cmd, oldRows, newRows)
{
    var firstExposedRow = objj_msgSend(self._exposedRows, "firstIndex"),
        exposedLength = objj_msgSend(self._exposedRows, "lastIndex") - firstExposedRow + 1,
        deselectRows = [],
        selectRows = [],
        deselectRowIndexes = objj_msgSend(oldRows, "copy"),
        selectRowIndexes = objj_msgSend(newRows, "copy");
    objj_msgSend(deselectRowIndexes, "removeIndexes:", selectRowIndexes);
    objj_msgSend(deselectRowIndexes, "getIndexes:maxCount:inIndexRange:", deselectRows, -1, CPMakeRange(firstExposedRow, exposedLength));
    objj_msgSend(selectRowIndexes, "getIndexes:maxCount:inIndexRange:", selectRows, -1, CPMakeRange(firstExposedRow, exposedLength));
    for (var identifier in self._dataViewsForTableColumns)
    {
        var dataViewsInTableColumn = self._dataViewsForTableColumns[identifier],
            count = deselectRows.length;
        while (count--)
        {
            var view = dataViewsInTableColumn[deselectRows[count]];
            if (view != undefined)
                objj_msgSend(view, "unsetThemeState:", CPThemeStateSelected);
        }
        count = selectRows.length;
        while (count--)
        {
            var view = dataViewsInTableColumn[selectRows[count]];
            if (view != undefined)
                objj_msgSend(view, "setThemeState:", CPThemeStateSelected);
        }
    }
    setTimeout(    function()
    {
        (window.getSelection()).removeAllRanges();
    }, 1);
}

), new objj_method(sel_getUid("deselectRow:"), function $CPTableView__deselectRow_(self, _cmd, aRow)
{
    var selectedRowIndexes = objj_msgSend(self._selectedRowIndexes, "copy");
    objj_msgSend(selectedRowIndexes, "removeIndex:", aRow);
    objj_msgSend(self, "selectRowIndexes:byExtendingSelection:", selectedRowIndexes, NO);
    objj_msgSend(self, "_noteSelectionDidChange");
}

), new objj_method(sel_getUid("numberOfSelectedRows"), function $CPTableView__numberOfSelectedRows(self, _cmd)
{
    return objj_msgSend(self._selectedRowIndexes, "count");
}

), new objj_method(sel_getUid("load"), function $CPTableView__load(self, _cmd)
{
    if (self._reloadAllRows)
    {
        if (objj_msgSend(self, "numberOfRows") === 0 && !self._loading)
        {
            if (!self._emptyTextDiv)
            {
                self._emptyTextDiv = ($("<div></div>")).addClass("cptableview-empty-text");
                self._emptyTextDiv.text(self._emptyText);
                self._scrollView._DOMElement.append(self._emptyTextDiv);
            }
            return;
        }
        if (self._emptyTextDiv)
        {
            self._emptyTextDiv.remove();
            self._emptyTextDiv = null;
        }
        objj_msgSend(self, "_unloadDataViewsInRows:columns:", self._exposedRows, self._exposedColumns);
        self._exposedRows = objj_msgSend(CPIndexSet, "indexSet");
        self._exposedColumns = objj_msgSend(CPIndexSet, "indexSet");
        self._reloadAllRows = NO;
    }
    var exposedRect = objj_msgSend(self._dataBodyView, "visibleRect");
    if (exposedRect.size.width > 0 && exposedRect.size.height > 0)
    {
        var exposedRows = objj_msgSend(CPIndexSet, "indexSetWithIndexesInRange:", objj_msgSend(self, "rowsInRect:", exposedRect)),
            exposedColumns = objj_msgSend(self, "columnIndexesInRect:", exposedRect),
            obscuredRows = objj_msgSend(self._exposedRows, "copy"),
            obscuredColumns = objj_msgSend(self._exposedColumns, "copy");
        objj_msgSend(obscuredRows, "removeIndexes:", exposedRows);
        objj_msgSend(obscuredColumns, "removeIndexes:", exposedColumns);
        var newlyExposedRows = objj_msgSend(exposedRows, "copy"),
            newlyExposedColumns = objj_msgSend(exposedColumns, "copy");
        objj_msgSend(newlyExposedRows, "removeIndexes:", self._exposedRows);
        objj_msgSend(newlyExposedColumns, "removeIndexes:", self._exposedColumns);
        var previouslyExposedRows = objj_msgSend(exposedRows, "copy"),
            previouslyExposedColumns = objj_msgSend(exposedColumns, "copy");
        objj_msgSend(previouslyExposedRows, "removeIndexes:", newlyExposedRows);
        objj_msgSend(previouslyExposedColumns, "removeIndexes:", newlyExposedColumns);
        objj_msgSend(self, "_unloadDataViewsInRows:columns:", previouslyExposedRows, obscuredColumns);
        objj_msgSend(self, "_unloadDataViewsInRows:columns:", obscuredRows, previouslyExposedColumns);
        objj_msgSend(self, "_unloadDataViewsInRows:columns:", obscuredRows, obscuredColumns);
        objj_msgSend(self, "_unloadDataViewsInRows:columns:", newlyExposedRows, newlyExposedColumns);
        objj_msgSend(self, "_loadDataViewsInRows:columns:", previouslyExposedRows, newlyExposedColumns);
        objj_msgSend(self, "_loadDataViewsInRows:columns:", newlyExposedRows, previouslyExposedColumns);
        objj_msgSend(self, "_loadDataViewsInRows:columns:", newlyExposedRows, newlyExposedColumns);
        self._exposedRows = exposedRows;
        self._exposedColumns = exposedColumns;
        for (var identifier in self._cachedDataViews)
        {
            var dataViews = self._cachedDataViews[identifier],
                count = dataViews.length;
            while (count--)
                objj_msgSend(dataViews[count], "removeFromSuperview");
        }
    }
}

), new objj_method(sel_getUid("_unloadDataViewsInRows:columns:"), function $CPTableView___unloadDataViewsInRows_columns_(self, _cmd, rows, columns)
{
    if (!objj_msgSend(rows, "count") || ![columns.count])
        return;
    var rowArray = [],
        columnArray = [];
    objj_msgSend(rows, "getIndexes:maxCount:inIndexRange:", rowArray, -1, nil);
    objj_msgSend(columns, "getIndexes:maxCount:inIndexRange:", columnArray, -1, nil);
    var columnIndex = 0,
        columnsCount = columnArray.length;
    for (; columnIndex < columnsCount; ++columnIndex)
    {
        var column = columnArray[columnIndex],
            tableColumn = self._tableColumns[column],
            tableColumnUID = objj_msgSend(tableColumn, "UID"),
            rowIndex = 0,
            rowsCount = rowArray.length;
        for (; rowIndex < rowsCount; ++rowIndex)
        {
            var row = rowArray[rowIndex],
                dataViews = self._dataViewsForTableColumns[tableColumnUID];
            if (!dataViews || row >= dataViews.length)
                continue;
            var dataView = dataViews[row];
            dataViews[row] = null;
            objj_msgSend(self, "_enqueueReusableDataView:", dataView);
        }
    }
}

), new objj_method(sel_getUid("_loadDataViewsInRows:columns:"), function $CPTableView___loadDataViewsInRows_columns_(self, _cmd, rows, columns)
{
    if (!objj_msgSend(rows, "count") || ![columns.count])
        return;
    var rowArray = [],
        columnArray = [];
    objj_msgSend(rows, "getIndexes:maxCount:inIndexRange:", rowArray, -1, nil);
    objj_msgSend(columns, "getIndexes:maxCount:inIndexRange:", columnArray, -1, nil);
    if (self._dirtyTableColumnRangeIndex !== -1)
        objj_msgSend(self, "_recalculateTableColumnRanges");
    var columnIndex = 0,
        columnsCount = columnArray.length;
    for (; columnIndex < columnsCount; ++columnIndex)
    {
        var column = columnArray[columnIndex],
            tableColumn = self._tableColumns[column];
        if (objj_msgSend(tableColumn, "isHidden") || tableColumn === self._draggedColumn)
            continue;
        var tableColumnUID = objj_msgSend(tableColumn, "UID");
        if (!self._dataViewsForTableColumns[tableColumnUID])
            self._dataViewsForTableColumns[tableColumnUID] = [];
        var rowIndex = 0,
            rowsCount = rowArray.length;
        for (; rowIndex < rowsCount; ++rowIndex)
        {
            var row = rowArray[rowIndex],
                dataView = objj_msgSend(self, "_newDataViewForRow:inTableColumn:", row, tableColumn);
            objj_msgSend(dataView, "setFrame:", objj_msgSend(self, "frameOfDataViewAtColumn:row:", column, row));
            objj_msgSend(self, "_setObjectValueForTableColumn:atRow:forView:", tableColumn, row, dataView);
            if (objj_msgSend(self._selectedRowIndexes, "containsIndex:", row))
                objj_msgSend(dataView, "setThemeState:", CPThemeStateSelected);
            else
                objj_msgSend(dataView, "unsetThemeState:", CPThemeStateSelected);
            if (objj_msgSend(dataView, "superview") !== self)
                objj_msgSend(self._dataBodyView, "addSubview:", dataView);
            self._dataViewsForTableColumns[tableColumnUID][row] = dataView;
        }
    }
}

), new objj_method(sel_getUid("_layoutDataViewsInRows:columns:"), function $CPTableView___layoutDataViewsInRows_columns_(self, _cmd, rows, columns)
{
    if (CPTableViewCellEditor)
    {
        CPTableViewCellEditor.remove();
        CPTableViewCellEditor = null;
        self._editedRow = -1;
        self._editedColumn = -1;
    }
    var rowArray = [],
        columnArray = [];
    objj_msgSend(rows, "getIndexes:maxCount:inIndexRange:", rowArray, -1, nil);
    objj_msgSend(columns, "getIndexes:maxCount:inIndexRange:", columnArray, -1, nil);
    var columnIndex = 0,
        columnsCount = columnArray.length;
    for (; columnIndex < columnsCount; ++columnIndex)
    {
        var column = columnArray[columnIndex],
            tableColumn = self._tableColumns[column],
            tableColumnUID = objj_msgSend(tableColumn, "UID"),
            dataViewsForTableColumn = self._dataViewsForTableColumns[tableColumnUID],
            rowIndex = 0,
            rowsCount = rowArray.length;
        if (dataViewsForTableColumn)
        {
            for (; rowIndex < rowsCount; ++rowIndex)
            {
                var row = rowArray[rowIndex],
                    dataView = dataViewsForTableColumn[row];
                if (dataView)
                    objj_msgSend(dataView, "setFrame:", objj_msgSend(self, "frameOfDataViewAtColumn:row:", column, row));
            }
        }
    }
}

), new objj_method(sel_getUid("_enqueueReusableDataView:"), function $CPTableView___enqueueReusableDataView_(self, _cmd, aDataView)
{
    if (!aDataView)
        return;
    var identifier = aDataView.identifier;
    if (!self._cachedDataViews[identifier])
        self._cachedDataViews[identifier] = objj_msgSend(objj_msgSend(CPArray, "alloc"), "initWithObjects:count:", [aDataView], 1);
    else
        self._cachedDataViews[identifier].push(aDataView);
}

), new objj_method(sel_getUid("_setObjectValueForTableColumn:atRow:forView:"), function $CPTableView___setObjectValueForTableColumn_atRow_forView_(self, _cmd, aTableColumn, aRow, aDataView)
{
    if (self._dataSource && objj_msgSend(self._dataSource, "respondsToSelector:", self._dataSourceGetDataSel) && objj_msgSend(aDataView, "respondsToSelector:", sel_getUid("setObjectValue:")))
    {
        var value = objj_msgSend(self, "_objectValueForTableColumn:atRow:", aTableColumn, aRow);
        if (value != null)
            objj_msgSend(aDataView, "setObjectValue:", value);
    }
}

), new objj_method(sel_getUid("_objectValueForTableColumn:atRow:"), function $CPTableView___objectValueForTableColumn_atRow_(self, _cmd, aTableColumn, aRowIndex)
{
    var tableColumnUID = objj_msgSend(aTableColumn, "UID"),
        tableColumnObjectValues = self._objectValues[tableColumnUID];
    if (!tableColumnObjectValues)
    {
        tableColumnObjectValues = [];
        self._objectValues[tableColumnUID] = tableColumnObjectValues;
    }
    var objectValue = tableColumnObjectValues[aRowIndex];
    if (objectValue === undefined)
    {
        if (self._dataSource && objj_msgSend(self._dataSource, "respondsToSelector:", self._dataSourceGetDataSel))
        {
            objectValue = objj_msgSend(self._dataSource, "performSelector:withObjects:", self._dataSourceGetDataSel, self, aTableColumn, aRowIndex);
            tableColumnObjectValues[aRowIndex] = objectValue;
        }
    }
    return objectValue;
}

), new objj_method(sel_getUid("_recalculateTableColumnRanges"), function $CPTableView___recalculateTableColumnRanges(self, _cmd)
{
    if (self._dirtyTableColumnRangeIndex < 0)
        return;
    self._numberOfHiddenColumns = 0;
    var index = self._dirtyTableColumnRangeIndex,
        count = self._tableColumns.length,
        x = index === 0 ? 0.0 : CPMaxRange(self._tableColumnRanges[index - 1]);
    for (; index < count; ++index)
    {
        var tableColumn = self._tableColumns[index];
        if (objj_msgSend(tableColumn, "isHidden"))
        {
            self._numberOfHiddenColumns += 1;
            self._tableColumnRanges[index] = CPMakeRange(x, 0.0);
        }
        else
        {
            var width = objj_msgSend(self._tableColumns[index], "width") + self._intercellSpacing.width;
            self._tableColumnRanges[index] = CPMakeRange(x, width);
            x += width;
        }
    }
    self._tableColumnRanges.length = count;
    self._dirtyTableColumnRangeIndex = -1;
}

), new objj_method(sel_getUid("frameOfDataViewAtColumn:row:"), function $CPTableView__frameOfDataViewAtColumn_row_(self, _cmd, aColumn, aRow)
{
    if (self._dirtyTableColumnRangeIndex !== -1)
        objj_msgSend(self, "_recalculateTableColumnRanges");
    if (aColumn > objj_msgSend(self, "numberOfColumns") || aRow > objj_msgSend(self, "numberOfRows"))
        return CGRectMakeZero();
    var tableColumnRange = self._tableColumnRanges[aColumn],
        rectOfRow = objj_msgSend(self, "rectOfRow:", aRow),
        leftInset = FLOOR(self._intercellSpacing.width / 2.0),
        topInset = FLOOR(self._intercellSpacing.height / 2.0);
    return CGRectMake(tableColumnRange.location + leftInset, CGRectGetMinY(rectOfRow) + topInset, tableColumnRange.length - self._intercellSpacing.width, CGRectGetHeight(rectOfRow) - self._intercellSpacing.height);
}

), new objj_method(sel_getUid("_newDataViewForRow:inTableColumn:"), function $CPTableView___newDataViewForRow_inTableColumn_(self, _cmd, aRow, aTableColumn)
{
    return objj_msgSend(aTableColumn, "_newDataViewForRow:", aRow);
}

), new objj_method(sel_getUid("numberOfColumns"), function $CPTableView__numberOfColumns(self, _cmd)
{
    return self._tableColumns.length;
}

), new objj_method(sel_getUid("numberOfRows"), function $CPTableView__numberOfRows(self, _cmd)
{
    if (self._dataSource && objj_msgSend(self._dataSource, "respondsToSelector:", self._dataSourceNumberOfRowsSel))
        return objj_msgSend(self._dataSource, "performSelector:withObject:", self._dataSourceNumberOfRowsSel, self);
    else
        return 0;
}

), new objj_method(sel_getUid("_rectOfRow:checkRange:"), function $CPTableView___rectOfRow_checkRange_(self, _cmd, aRowIndex, checkRange)
{
    var lastIndex = objj_msgSend(self, "numberOfRows") - 1;
    if (checkRange && (aRowIndex > lastIndex || aRowIndex < 0))
        return CGRectMakeZero();
    var y = 0;
    if (self._delegate && objj_msgSend(self._delegate, "respondsToSelector:", self._delegateRowHeightSel))
    {
        var rowToLookUp = MIN(aRowIndex, lastIndex);
        if (rowToLookUp !== -1)
        {
            (y = self._cachedRowHeights[rowToLookUp].heightAboveRow, height = self._cachedRowHeights[rowToLookUp].height + self._intercellSpacing.height, rowDelta = aRowIndex - rowToLookUp);
        }
        else
        {
            y = aRowIndex * (self._rowHeight + self._intercellSpacing.height);
            height = self._rowHeight + self._intercellSpacing.height;
        }
        if (rowDelta > 0)
        {
            y += rowDelta * (self._rowHeight + self._intercellSpacing.height);
            height = self._rowHeight + self._intercellSpacing.height;
        }
    }
    else
    {
        (y = aRowIndex * (self._rowHeight + self._intercellSpacing.height), height = self._rowHeight + self._intercellSpacing.height);
    }
    return CGRectMake(0.0, y, CGRectGetWidth(objj_msgSend(self, "bounds")), height);
}

), new objj_method(sel_getUid("rectOfRow:"), function $CPTableView__rectOfRow_(self, _cmd, aRowIndex)
{
    return objj_msgSend(self, "_rectOfRow:checkRange:", aRowIndex, YES);
}

), new objj_method(sel_getUid("rowsInRect:"), function $CPTableView__rowsInRect_(self, _cmd, aRect)
{
    if (objj_msgSend(self, "numberOfRows") <= 0)
        return CPMakeRange(0, 0);
    var firstRow = objj_msgSend(self, "rowAtPoint:", aRect.origin);
    if (firstRow < 0)
        firstRow = 0;
    var lastRow = objj_msgSend(self, "rowAtPoint:", CGPointMake(0, CGRectGetMaxY(aRect)));
    if (lastRow < 0)
        lastRow = objj_msgSend(self, "numberOfRows") - 1;
    return CPMakeRange(firstRow, lastRow - firstRow + 1);
}

), new objj_method(sel_getUid("rectOfColumn:"), function $CPTableView__rectOfColumn_(self, _cmd, aColumnIndex)
{
    if (aColumnIndex < 0 || aColumnIndex >= self._tableColumns.length)
        return CGRectMakeZero();
    var column = self._tableColumns[aColumnIndex];
    if (objj_msgSend(column, "isHidden"))
        return CGRectMakeZero();
    if (self._dirtyTableColumnRangeIndex !== -1)
        objj_msgSend(self, "_recalculateTableColumnRanges");
    var range = self._tableColumnRanges[aColumnIndex];
    return CPMakeRect(range.location, 0.0, range.length, CGRectGetHeight(objj_msgSend(self, "bounds")));
}

), new objj_method(sel_getUid("columnIndexesInRect:"), function $CPTableView__columnIndexesInRect_(self, _cmd, aRect)
{
    var column = MAX(0, objj_msgSend(self, "columnAtPoint:", CGPointMake(aRect.origin.x, 0.0))),
        lastColumn = objj_msgSend(self, "columnAtPoint:", CGPointMake(CGRectGetMaxX(aRect), 0.0));
    if (lastColumn === -1)
        lastColumn = self._tableColumns.length - 1;
    if (self._numberOfHiddenColumns <= 0)
        return objj_msgSend(CPIndexSet, "indexSetWithIndexesInRange:", CPMakeRange(column, lastColumn - column + 1));
    var indexSet = objj_msgSend(CPIndexSet, "indexSet");
    for (; column <= lastColumn; ++column)
    {
        var tableColumn = self._tableColumns[column];
        if (!objj_msgSend(tableColumn, "isHidden"))
            objj_msgSend(indexSet, "addIndex:", column);
    }
    return indexSet;
}

), new objj_method(sel_getUid("columnAtPoint:"), function $CPTableView__columnAtPoint_(self, _cmd, aPoint)
{
    var bounds = objj_msgSend(self._dataBodyView, "bounds");
    if (!CGRectContainsPoint(bounds, aPoint))
        return -1;
    if (self._dirtyTableColumnRangeIndex !== -1)
        objj_msgSend(self, "_recalculateTableColumnRanges");
    var x = aPoint.x,
        low = 0,
        high = self._tableColumnRanges.length - 1;
    while (low <= high)
    {
        var middle = FLOOR(low + (high - low) / 2),
            range = self._tableColumnRanges[middle];
        if (x < range.location)
            high = middle - 1;
        else if (x >= CPMaxRange(range))
            low = middle + 1;
        else
        {
            var numberOfColumns = self._tableColumnRanges.length;
            while (middle < numberOfColumns && objj_msgSend(self._tableColumns[middle], "isHidden"))
                ++middle;
            if (middle < numberOfColumns)
                return middle;
            return -1;
        }
    }
    return -1;
}

), new objj_method(sel_getUid("rowAtPoint:"), function $CPTableView__rowAtPoint_(self, _cmd, aPoint)
{
    if (self._delegate && objj_msgSend(self._delegate, "respondsToSelector:", self._delegateRowHeightSel))
    {
        return objj_msgSend(self._cachedRowHeights, "indexOfObject:inSortedRange:options:usingComparator:", aPoint, nil, CPBinarySearchingFirstEqual,         function(aPoint, rowCache)
        {
            var upperBound = rowCache.heightAboveRow;
            if (aPoint.y < upperBound)
                return -1;
            if (aPoint.y > upperBound + rowCache.height + self._intercellSpacing.height)
                return 1;
            return 0;
        });
    }
    var y = aPoint.y,
        row = FLOOR(y / (self._rowHeight + self._intercellSpacing.height));
    if (row >= objj_msgSend(self, "numberOfRows"))
        return -1;
    return row;
}

), new objj_method(sel_getUid("tile"), function $CPTableView__tile(self, _cmd)
{
    if (self._dirtyTableColumnRangeIndex !== -1)
        objj_msgSend(self, "_recalculateTableColumnRanges");
    var width = self._tableColumnRanges.length > 0 ? CPMaxRange(objj_msgSend(self._tableColumnRanges, "lastObject")) : 0.0,
        superview = objj_msgSend(self, "superview");
    var numRows = objj_msgSend(self, "numberOfRows");
    if (!(self._delegate && objj_msgSend(self._delegate, "respondsToSelector:", self._delegateRowHeightSel)))
        var height = (self._rowHeight + self._intercellSpacing.height) * numRows;
    else if (numRows === 0)
        var height = 0;
    else
    {
        if (numRows !== self._cachedRowHeights.length)
            objj_msgSend(self, "noteHeightOfRowsWithIndexesChanged:", objj_msgSend(CPIndexSet, "indexSetWithIndexesInRange:", CPMakeRange(0, numRows)));
        var heightObject = self._cachedRowHeights[self._cachedRowHeights.length - 1],
            height = heightObject.heightAboveRow + heightObject.height + self._intercellSpacing.height;
    }
    objj_msgSend(self._headerView, "setFrameSize:", CGSizeMake(MAX(self._frame.size.width, width + 20.0), 22.0));
    objj_msgSend(self._dataBodyView, "setFrameSize:", CGSizeMake(width, height));
}

), new objj_method(sel_getUid("noteHeightOfRowsWithIndexesChanged:"), function $CPTableView__noteHeightOfRowsWithIndexesChanged_(self, _cmd, anIndexSet)
{
    if (!(self._delegate && objj_msgSend(self._delegate, "respondsToSelector:", self._delegateRowHeightSel)))
        return;
    var i = objj_msgSend(anIndexSet, "firstIndex"),
        count = objj_msgSend(self, "numberOfRows") - i,
        heightAbove = i > 0 ? self._cachedRowHeights[i - 1].height + self._cachedRowHeights[i - 1].heightAboveRow + self._intercellSpacing.height : 0;
    for (; i < count; i++)
    {
        if (objj_msgSend(anIndexSet, "containsIndex:", i))
        {
            var height = objj_msgSend(self._delegate, "performSelector:withObjects:", self._delegateRowHeightSel, self, i);
            self._cachedRowHeights[i] = {"height": height, "heightAboveRow": heightAbove};
            heightAbove += height + self._intercellSpacing.height;
        }
    }
}

), new objj_method(sel_getUid("noteNumberOfRowsChanged"), function $CPTableView__noteNumberOfRowsChanged(self, _cmd)
{
    var oldNumberOfRows = objj_msgSend(self, "numberOfRows");
    self._cachedRowHeights = [];
    objj_msgSend(self, "noteHeightOfRowsWithIndexesChanged:", objj_msgSend(CPIndexSet, "indexSetWithIndexesInRange:", CPMakeRange(0, objj_msgSend(self, "numberOfRows"))));
    var hangingSelections = oldNumberOfRows - objj_msgSend(self, "numberOfRows");
    if (hangingSelections > 0)
    {
        var previousSelectionCount = objj_msgSend(self._selectedRowIndexes, "count");
        objj_msgSend(self._selectedRowIndexes, "removeIndexesInRange:", CPMakeRange(objj_msgSend(self, "numberOfRows"), hangingSelections));
        if (!objj_msgSend(self._selectedRowIndexes, "containsIndex:", objj_msgSend(self, "selectedRow")))
            self._lastSelectedRow = -1;
    }
    objj_msgSend(self, "tile");
}

), new objj_method(sel_getUid("selectedRow"), function $CPTableView__selectedRow(self, _cmd)
{
    return objj_msgSend(self._selectedRowIndexes, "firstIndex");
}

), new objj_method(sel_getUid("_createDragViewForColumn:"), function $CPTableView___createDragViewForColumn_(self, _cmd, theColumnIndex)
{
    var dragView = objj_msgSend(objj_msgSend(_CPColumnDragView, "alloc"), "init");
    objj_msgSend(dragView, "setLineColor:", objj_msgSend(CPColor, "grayColor"));
    var scrollViewSize = self._scrollView._frame.size,
        visiRect = objj_msgSend(self._dataBodyView, "visibleRect"),
        tableColumn = self._tableColumns[theColumnIndex],
        defaultRowHeight = CPTableViewDefaultRowHeight,
        bounds = CGRectMake(0.0, 0.0, objj_msgSend(tableColumn, "width"), MAX(CGRectGetHeight(self._frame), CGRectGetHeight(visiRect) + defaultRowHeight)),
        columnRect = objj_msgSend(self, "rectOfColumn:", theColumnIndex),
        headerView = objj_msgSend(tableColumn, "headerView"),
        row = objj_msgSend(self._exposedRows, "firstIndex");
    while (row !== -1)
    {
        var dataView = objj_msgSend(self, "_newDataViewForRow:inTableColumn:", row, tableColumn),
            dataViewFrame = objj_msgSend(self, "frameOfDataViewAtColumn:row:", theColumnIndex, row);
        dataViewFrame.origin.x = 0.0;
        dataViewFrame.origin.y = CGRectGetMinY(dataViewFrame) - CGRectGetMinY(visiRect) + defaultRowHeight;
        objj_msgSend(dataView, "setFrame:", dataViewFrame);
        objj_msgSend(self, "_setObjectValueForTableColumn:atRow:forView:", tableColumn, row, dataView);
        objj_msgSend(dragView, "addSubview:", dataView);
        self._draggingViews.push(dataView);
        row = objj_msgSend(self._exposedRows, "indexGreaterThanIndex:", row);
    }
    var columnHeaderView = objj_msgSend(CPKeyedUnarchiver, "unarchiveObjectWithData:", objj_msgSend(CPKeyedArchiver, "archivedDataWithRootObject:", headerView));
    objj_msgSend(columnHeaderView, "setFrameOrigin:", CGPointMake(0, 0));
    columnHeaderView._DOMElement.addClass("drag");
    objj_msgSend(dragView, "addSubview:", columnHeaderView);
    objj_msgSend(dragView, "setBackgroundColor:", objj_msgSend(CPColor, "whiteColor"));
    objj_msgSend(dragView, "setAlphaValue:", 0.88);
    objj_msgSend(dragView, "setFrame:", bounds);
    return dragView;
}

), new objj_method(sel_getUid("_setDraggedColumn:"), function $CPTableView___setDraggedColumn_(self, _cmd, aColumn)
{
    self._draggedColumn = aColumn;
}

), new objj_method(sel_getUid("moveColumn:toColumn:"), function $CPTableView__moveColumn_toColumn_(self, _cmd, fromIndex, toIndex)
{
    if (fromIndex === toIndex)
        return;
    if (self._dirtyTableColumnRangeIndex < 0)
        self._dirtyTableColumnRangeIndex = MIN(fromIndex, toIndex);
    else
        self._dirtyTableColumnRangeIndex = MIN(fromIndex, toIndex, self._dirtyTableColumnRangeIndex);
    var tableColumn = self._tableColumns[fromIndex];
    objj_msgSend(self._tableColumns, "removeObjectAtIndex:", fromIndex);
    objj_msgSend(self._tableColumns, "insertObject:atIndex:", tableColumn, toIndex);
    self._reloadAllRows = YES;
    self._objectValues = {};
    objj_msgSend(self, "load");
    objj_msgSend(self._headerView, "setNeedsLayout");
    objj_msgSend(self._headerView, "setNeedsDisplay:", YES);
    objj_msgSend(self._scrollView, "setNeedsDisplay:", YES);
}

), new objj_method(sel_getUid("editColumn:row:"), function $CPTableView__editColumn_row_(self, _cmd, columnIndex, rowIndex)
{
    var theColumn = self._tableColumns[columnIndex];
    if (!objj_msgSend(theColumn, "isEditable"))
        return;
    if (CPTableViewCellEditor)
        CPTableViewCellEditor.blur();
    var columnId = objj_msgSend(self._tableColumns[columnIndex], "UID"),
        dataViewsForTableColumn = self._dataViewsForTableColumns[columnId],
        dataView = dataViewsForTableColumn[rowIndex],
        dataFrame = objj_msgSend(dataView, "frame");
    if (objj_msgSend(dataView, "isKindOfClass:", objj_msgSend(CPTextField, "class")))
    {
        self._editedColumn = columnIndex;
        self._editedRow = rowIndex;
        CPTableViewCellEditor = ($("<textarea></textarea>")).addClass("cptableview-cell-editor");
        CPTableViewCellEditor.bind("mousedown mouseup click ",         function(evt)
        {
            evt.stopPropagation();
        });
        CPTableViewCellEditor.data("tableColumn", self._tableColumns[columnIndex]);
        CPTableViewCellEditor.data("row", rowIndex);
        var saveEdits =         function(el)
        {
            if (el)
            {
                if (self._dataSource && objj_msgSend(self._dataSource, "respondsToSelector:", self._dataSourceSetDataSel))
                {
                    var row = parseInt(el.data("row"), 10);
                    var tableColumn = el.data("tableColumn");
                    var current = objj_msgSend(self._dataSource, "performSelector:withObjects:", self._dataSourceGetDataSel, self, tableColumn, row);
                    if (el.val() !== current)
                        objj_msgSend(self._dataSource, "performSelector:withObjects:", self._dataSourceSetDataSel, self, el.val(), tableColumn, row);
                }                el.remove();
                CPTableViewCellEditor = null;
                self._editedColumn = -1;
                self._editedRow = -1;
                objj_msgSend(objj_msgSend(self, "window"), "makeFirstResponder:", self);
            }        };
        CPTableViewCellEditor.bind("blur",         function(evt)
        {
            saveEdits(CPTableViewCellEditor);
        });
        CPTableViewCellEditor.bind("keydown",         function(evt)
        {
            if (evt.which !== CPTabKeyCode)
                evt.stopPropagation();
            else
                evt.preventDefault();
            if (evt.which === CPReturnKeyCode)
            {
                evt.preventDefault();
                evt.stopPropagation();
                saveEdits(CPTableViewCellEditor);
            }            else if (evt.which == CPEscapeKeyCode)
            {
                CPTableViewCellEditor.remove();
                CPTableViewCellEditor = null;
                self._editedColumn = -1;
                self._editedRow = -1;
            }            objj_msgSend(objj_msgSend(self, "window"), "makeFirstResponder:", self._dataBodyView);
        });
        CPTableViewCellEditor.css({width: dataFrame.size.width - 3, height: dataFrame.size.height - 3, font: objj_msgSend(dataView, "font") ? objj_msgSend(objj_msgSend(dataView, "font"), "cssString") : "12px Arial,sans-serif"});
        CPTableViewCellEditor.html(objj_msgSend(dataView, "stringValue"));
        dataView._DOMElement.append(CPTableViewCellEditor);
        (window.getSelection()).removeAllRanges();
        setTimeout(        function()
        {
            if (CPTableViewCellEditor)
            {
                var v = CPTableViewCellEditor.val();
                ((CPTableViewCellEditor.focus()).val("")).val(v);
            }        }, 5);
    }
}

), new objj_method(sel_getUid("showLoading:"), function $CPTableView__showLoading_(self, _cmd, state)
{
    if (state)
    {
        if (!self._loading)
        {
            self._loading = ($("<div></div>")).addClass("cptableview-loading");
            self._loadingDelayTimer = setTimeout(            function()
            {
                self._scrollView._DOMElement.append(self._loading);
            }, 500);
        }
    }
    else
    {
        if (self._loadingDelayTimer)
            clearTimeout(self._loadingDelayTimer);
        if (self._loading)
            self._loading.remove();
        self._loading = null;
        objj_msgSend(self, "reloadData");
    }
}

), new objj_method(sel_getUid("setFrameSize:"), function $CPTableView__setFrameSize_(self, _cmd, aSize)
{
    objj_msgSend(self, "load");
    objj_msgSend(self, "tile");
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTableView").super_class }, "setFrameSize:", aSize);
}

), new objj_method(sel_getUid("resizeSubviewsWithOldSize:"), function $CPTableView__resizeSubviewsWithOldSize_(self, _cmd, aSize)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTableView").super_class }, "resizeSubviewsWithOldSize:", aSize);
    if (self._sizeToFitTimer)
    {
        clearTimeout(self._sizeToFitTimer);
        self._sizeToFitTimer = null;
    }
    if (self._autoresizeColumns)
    {
        objj_msgSend(self._scrollView, "setHasHorizontalScroller:", NO);
        self._sizeToFitTimer = setTimeout(        function()
        {
            objj_msgSend(self, "sizeToFit");
        }, 100);
    }
}

), new objj_method(sel_getUid("sizeToFit"), function $CPTableView__sizeToFit(self, _cmd)
{
    if (self._dirtyTableColumnRangeIndex !== -1)
        objj_msgSend(self, "_recalculateTableColumnRanges");
    var count = self._tableColumns.length,
        buffer = self._scrollView._frame.size.width;
    if (!self._visColumns)
    {
        self._visColumns = [];
        for (var i = 0; i < count; i++)
        {
            var tableColumn = self._tableColumns[i];
            if (!objj_msgSend(tableColumn, "isHidden"))
                self._visColumns.push(i);
        }
    }
    count = self._visColumns.length;
    buffer = buffer - 2 * count - 16;
    if (count > 0)
    {
        var w = 0;
        for (var i = 0; i < count; i++)
        {
            w = buffer / (count - i);
            var column = self._visColumns[i],
                columnToResize = self._tableColumns[column];
            if (objj_msgSend(columnToResize, "isResizable"))
            {
                columnToResize._width = MIN(MAX(w, columnToResize._minWidth), columnToResize._maxWidth);
                var dirtyTableColumnRangeIndex = self._dirtyTableColumnRangeIndex;
                if (dirtyTableColumnRangeIndex < 0)
                    self._dirtyTableColumnRangeIndex = column;
                else
                    self._dirtyTableColumnRangeIndex = MIN(column, self._dirtyTableColumnRangeIndex);
            }
            buffer -= columnToResize._width;
            if (buffer <= 0)
                break;
        }
        var rows = self._exposedRows,
            columns = objj_msgSend(CPIndexSet, "indexSetWithIndexesInRange:", CPMakeRange(0, self._tableColumns.length));
        objj_msgSend(self, "_layoutDataViewsInRows:columns:", rows, columns);
        objj_msgSend(self, "load");
        objj_msgSend(self, "tile");
        objj_msgSend(self._headerView, "setNeedsLayout");
        objj_msgSend(self._headerView, "setNeedsDisplay:", YES);
        objj_msgSend(self._scrollView, "setNeedsDisplay:", YES);
    }
}

), new objj_method(sel_getUid("_tableColumnForSortDescriptor:"), function $CPTableView___tableColumnForSortDescriptor_(self, _cmd, theSortDescriptor)
{
    var count = self._tableColumns.length,
        index = 0;
    for (; index < count; index++)
    {
        var tableColumn = self._tableColumns[index],
            sortDescriptorPrototype = objj_msgSend(tableColumn, "sortDescriptorPrototype");
        if (!sortDescriptorPrototype)
            continue;
        if (objj_msgSend(sortDescriptorPrototype, "key") === objj_msgSend(theSortDescriptor, "key"))
            return tableColumn;
    }
    return nil;
}

), new objj_method(sel_getUid("setIndicatorClass:inTableColumn:"), function $CPTableView__setIndicatorClass_inTableColumn_(self, _cmd, aClassName, aTableColumn)
{
    if (aTableColumn)
    {
        var headerView = objj_msgSend(aTableColumn, "headerView");
        if (objj_msgSend(headerView, "respondsToSelector:", sel_getUid("setIndicatorWithClassName:")))
            objj_msgSend(headerView, "setIndicatorWithClassName:", aClassName);
    }
}

), new objj_method(sel_getUid("setSortDescriptors:"), function $CPTableView__setSortDescriptors_(self, _cmd, sortDescriptors)
{
    var oldSortDescriptors = self._sortDescriptors.slice(),
        newSortDescriptors = null;
    if (sortDescriptors == null)
        newSortDescriptors = [];
    else
        newSortDescriptors = sortDescriptors.slice();
    if (objj_msgSend(newSortDescriptors, "isEqual:", oldSortDescriptors))
        return;
    self._sortDescriptors = newSortDescriptors;
    var oldColumn = null,
        newColumn = null;
    if (newSortDescriptors.length > 0)
    {
        var newMainSortDescriptor = newSortDescriptors[0];
        newColumn = objj_msgSend(self, "_tableColumnForSortDescriptor:", newMainSortDescriptor);
    }
    if (oldSortDescriptors.length > 0)
    {
        var oldMainSortDescriptor = oldSortDescriptors[0];
        oldColumn = objj_msgSend(self, "_tableColumnForSortDescriptor:", oldMainSortDescriptor);
    }
    var newClass = objj_msgSend(newMainSortDescriptor, "ascending") ? "cptableview-column-asc" : "cptableview-column-desc";
    objj_msgSend(self, "setIndicatorClass:inTableColumn:", nil, oldColumn);
    objj_msgSend(self, "setIndicatorClass:inTableColumn:", newClass, newColumn);
    objj_msgSend(self, "_sendDataSourceSortDescriptorsDidChange:", oldSortDescriptors);
}

), new objj_method(sel_getUid("_changeSortDescriptorsForClickOnColumn:"), function $CPTableView___changeSortDescriptorsForClickOnColumn_(self, _cmd, column)
{
    var tableColumn = self._tableColumns[column],
        newMainSortDescriptor = objj_msgSend(tableColumn, "sortDescriptorPrototype");
    if (!newMainSortDescriptor)
        return;
    var oldMainSortDescriptor = nil,
        oldSortDescriptors = self._sortDescriptors,
        newSortDescriptors = objj_msgSend(CPArray, "arrayWithArray:", oldSortDescriptors),
        count = newSortDescriptors.length,
        index = 0,
        descriptor = null,
        outdatedDescriptors = [];
    if (self._sortDescriptors.length > 0)
        oldMainSortDescriptor = self._sortDescriptors[0];
    for (; index < count; index++)
    {
        descriptor = newSortDescriptors[index];
        if (objj_msgSend(descriptor, "key") === objj_msgSend(newMainSortDescriptor, "key"))
            outdatedDescriptors.push(descriptor);
    }
    if (oldMainSortDescriptor)
    {
        if (objj_msgSend(newMainSortDescriptor, "key") === objj_msgSend(oldMainSortDescriptor, "key"))
            newMainSortDescriptor = objj_msgSend(oldMainSortDescriptor, "reversedSortDescriptor");
    }
    objj_msgSend(newSortDescriptors, "removeObjectsInArray:", outdatedDescriptors);
    objj_msgSend(newSortDescriptors, "insertObject:atIndex:", newMainSortDescriptor, 0);
    objj_msgSend(self, "setSortDescriptors:", newSortDescriptors);
}

), new objj_method(sel_getUid("_sendDataSourceSortDescriptorsDidChange:"), function $CPTableView___sendDataSourceSortDescriptorsDidChange_(self, _cmd, oldDescriptors)
{
    if (self._dataSource && objj_msgSend(self._dataSource, "respondsToSelector:", self._dataSourceSortDescChange))
        objj_msgSend(self._dataSource, "performSelector:withObject:", self._dataSourceSortDescChange, oldDescriptors);
}

), new objj_method(sel_getUid("_noteSelectionIsChanging"), function $CPTableView___noteSelectionIsChanging(self, _cmd)
{
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:userInfo:", CPTableViewSelectionIsChangingNotification, self, nil);
}

), new objj_method(sel_getUid("_noteSelectionDidChange"), function $CPTableView___noteSelectionDidChange(self, _cmd)
{
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:userInfo:", CPTableViewSelectionDidChangeNotification, self, nil);
}

)]);
}var CPTableViewAllowsColumnReorderingKey = "CPTableViewAllowsColumnReorderingKey",
    CPTableViewAllowsColumnResizingKey = "CPTableViewAllowsColumnResizingKey",
    CPTableViewAllowsMultipleSelectionKey = "CPTableViewAllowsMultipleSelectionKey",
    CPTableViewAllowsEmptySelectionKey = "CPTableViewAllowsEmptySelectionKey",
    CPTableViewUsesAlternatingRowBackgroundColorsKey = "CPTableViewUsesAlternatingRowBackgroundColorsKey",
    CPTableViewSourceListKey = "CPTableViewSourceListKey",
    CPTableViewHasHeaderKey = "CPTableViewHasHeaderKey",
    CPTableViewAlternatingRowBackgroundColorsKey = "CPTableViewAlternatingRowBackgroundColorsKey",
    CPTableViewGridStyleMaskKey = "CPTableViewGridStyleMaskKey",
    CPTableViewGridColorKey = "CPTableViewGridColorKey",
    CPTableViewDataSourceKey = "CPTableViewDataSourceKey",
    CPTableViewDelegateKey = "CPTableViewDelegateKey",
    CPTableViewFirstUserColumnKey = "CPTableViewFirstUserColumnKey",
    CPTableViewTableColumnsKey = "CPTableViewTableColumnsKey",
    CPTableViewDoubleActionKey = "CPTableViewDoubleActionKey",
    CPTableViewEmptyTextKey = "CPTableViewEmptyTextKey";
{
var the_class = objj_getClass("CPTableView")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPTableView\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPTableView__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTableView").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        objj_msgSend(self, "_init");
        self._allowsColumnReordering = objj_msgSend(aCoder, "decodeBoolForKey:", CPTableViewAllowsColumnReorderingKey);
        self._allowsColumnResizing = objj_msgSend(aCoder, "decodeBoolForKey:", CPTableViewAllowsColumnResizingKey);
        self._allowsMultipleSelection = objj_msgSend(aCoder, "decodeBoolForKey:", CPTableViewAllowsMultipleSelectionKey);
        self._allowsEmptySelection = objj_msgSend(aCoder, "decodeBoolForKey:", CPTableViewAllowsEmptySelectionKey);
        self._usesAlternatingRowBackgroundColors = objj_msgSend(aCoder, "decodeBoolForKey:", CPTableViewUsesAlternatingRowBackgroundColorsKey);
        self._sourceList = objj_msgSend(aCoder, "decodeBoolForKey:", CPTableViewSourceListKey);
        self._hasHeader = objj_msgSend(aCoder, "decodeBoolForKey:", CPTableViewHasHeaderKey);
        self._alternatingRowBackgroundColors = objj_msgSend(aCoder, "decodeObjectForKey:", CPTableViewAlternatingRowBackgroundColorsKey);
        self._gridStyleMask = objj_msgSend(aCoder, "decodeIntForKey:", CPTableViewGridStyleMaskKey);
        self._gridColor = objj_msgSend(aCoder, "decodeObjectForKey:", CPTableViewGridColorKey);
        self._delegate = objj_msgSend(aCoder, "decodeObjectForKey:", CPTableViewDelegateKey);
        self._dataSource = objj_msgSend(aCoder, "decodeObjectForKey:", CPTableViewDataSourceKey);
        self._firstUserColumn = objj_msgSend(aCoder, "decodeIntForKey:", CPTableViewFirstUserColumnKey);
        self._doubleAction = objj_msgSend(aCoder, "decodeObjectForKey:", CPTableViewDoubleActionKey);
        self._tableColumns = objj_msgSend(aCoder, "decodeObjectForKey:", CPTableViewTableColumnsKey);
        self._emptyText = objj_msgSend(aCoder, "decodeObjectForKey:", CPTableViewEmptyTextKey);
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPTableView__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPTableView").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._allowsColumnReordering, CPTableViewAllowsColumnReorderingKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._allowsColumnResizing, CPTableViewAllowsColumnResizingKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._allowsMultipleSelection, CPTableViewAllowsMultipleSelectionKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._allowsEmptySelection, CPTableViewAllowsEmptySelectionKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._usesAlternatingRowBackgroundColors, CPTableViewUsesAlternatingRowBackgroundColorsKey);
    objj_msgSend(aCoder, "encodeBool:forKey:", self._hasHeader, CPTableViewHasHeaderKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._alternatingRowBackgroundColors, CPTableViewAlternatingRowBackgroundColorsKey);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._gridStyleMask, CPTableViewGridStyleMaskKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._gridColor, CPTableViewGridColorKey);
    objj_msgSend(aCoder, "encodeConditionalObject:forKey:", self._dataSource, CPTableViewDataSourceKey);
    objj_msgSend(aCoder, "encodeConditionalObject:forKey:", self._delegate, CPTableViewDelegateKey);
    objj_msgSend(aCoder, "encodeInt:forKey:", self._firstUserColumn, CPTableViewFirstUserColumnKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._tableColumns, CPTableViewTableColumnsKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._doubleAction, CPTableViewDoubleActionKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._emptyText, CPTableViewEmptyTextKey);
}

)]);
}var CPOutlineViewItemDidCollapseNotification = "CPOutlineViewItemDidCollapseNotification",
    CPOutlineViewItemDidExpandNotification = "CPOutlineViewItemDidExpandNotification",
    CPOutlineViewItemWillCollapseNotification = "CPOutlineViewItemWillCollapseNotification",
    CPOutlineViewItemWillExpandNotification = "CPOutlineViewItemWillExpandNotification",
    CPOutlineViewSelectionDidChangeNotification = "CPOutlineViewSelectionDidChangeNotification",
    CPOutlineViewSelectionIsChangingNotification = "CPOutlineViewSelectionIsChangingNotification";
{var the_class = objj_allocateClassPair(CPObject, "_CPOutlineViewDataSource"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_outlineView")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("outlineView"), function $_CPOutlineViewDataSource__outlineView(self, _cmd)
{
    return self._outlineView;
}

), new objj_method(sel_getUid("setOutlineView:"), function $_CPOutlineViewDataSource__setOutlineView_(self, _cmd, newValue)
{
    self._outlineView = newValue;
}

), new objj_method(sel_getUid("numberOfRowsInTableView:"), function $_CPOutlineViewDataSource__numberOfRowsInTableView_(self, _cmd, tableView)
{
    return self._outlineView._itemsForRows.length;
}

), new objj_method(sel_getUid("tableView:objectValueForTableColumn:row:"), function $_CPOutlineViewDataSource__tableView_objectValueForTableColumn_row_(self, _cmd, tableView, tableColumn, row)
{
    if (objj_msgSend(tableColumn, "identifier") !== "disclosureColumn")
    {
        var item = objj_msgSend(self._outlineView, "itemAtRow:", row);
        return objj_msgSend(self._outlineView._outlineViewDataSource, "performSelector:withObjects:", sel_getUid("outlineView:objectValueForTableColumn:byItem:"), self._outlineView, tableColumn, item);
    }
    return nil;
}

), new objj_method(sel_getUid("tableView:setObjectValue:forTableColumn:row:"), function $_CPOutlineViewDataSource__tableView_setObjectValue_forTableColumn_row_(self, _cmd, tableView, value, tableColumn, row)
{
    if (objj_msgSend(self._outlineView._outlineViewDataSource, "respondsToSelector:", sel_getUid("outlineView:setObjectValue:forTableColumn:byItem:")))
    {
        var item = objj_msgSend(self._outlineView, "itemAtRow:", row);
        objj_msgSend(self._outlineView._outlineViewDataSource, "performSelector:withObjects:", sel_getUid("outlineView:setObjectValue:forTableColumn:byItem:"), self._outlineView, value, tableColumn, item);
    }
}

), new objj_method(sel_getUid("tableView:sortDescriptorsDidChange:"), function $_CPOutlineViewDataSource__tableView_sortDescriptorsDidChange_(self, _cmd, tableView, oldDescriptors)
{
    if (objj_msgSend(self._outlineView._outlineViewDataSource, "respondsToSelector:", sel_getUid("outlineView:sortDescriptorsDidChange:")))
    {
        objj_msgSend(self._outlineView._outlineViewDataSource, "performSelector:withObjects:", sel_getUid("outlineView:sortDescriptorsDidChange:"), self._outlineView, oldDescriptors);
    }
}

), new objj_method(sel_getUid("tableView:heightForRow:"), function $_CPOutlineViewDataSource__tableView_heightForRow_(self, _cmd, tableView, row)
{
    if (self._outlineView._outlineViewDelegate)
    {
        if (objj_msgSend(self._outlineView._outlineViewDelegate, "respondsToSelector:", sel_getUid("tableView:heightForRow:")))
        {
            var item = objj_msgSend(self._outlineView, "itemAtRow:", row);
            return objj_msgSend(self._outlineView._outlineViewDelegate, "outlineView:heightForItem:", self._outlineView, item);
        }
    }
    return CPTableViewDefaultRowHeight;
}

)]);
}{var the_class = objj_allocateClassPair(CPButton, "CPOutlineViewDisclosureButton"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithFrame:"), function $CPOutlineViewDisclosureButton__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPOutlineViewDisclosureButton").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        objj_msgSend(self, "setImagePosition:", CPImageOnly);
        self._DOMElement.addClass("cpoutlineview-disclosure-control");
        objj_msgSend(self, "setBordered:", NO);
        objj_msgSend(self, "setBackgroundColor:", objj_msgSend(CPColor, "clearColor"));
    }
    return self;
}

), new objj_method(sel_getUid("imageSize"), function $CPOutlineViewDisclosureButton__imageSize(self, _cmd)
{
    return CGSizeMake(11, 11);
}

)]);
}{var the_class = objj_allocateClassPair(CPTableView, "CPOutlineView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_outlineViewDataSource"), new objj_ivar("_outlineViewDelegate"), new objj_ivar("_itemsForRows"), new objj_ivar("_disclosureControlsForRows"), new objj_ivar("_rootItemInfo"), new objj_ivar("_itemInfosForItems"), new objj_ivar("_firstLoad")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithFrame:"), function $CPOutlineView__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPOutlineView").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._firstUserColumn = 1;
        self._outlineViewDataSource = nil;
        self._outlineViewDelegate = nil;
        self._dataSource = objj_msgSend(objj_msgSend(_CPOutlineViewDataSource, "alloc"), "init");
        objj_msgSend(self._dataSource, "setOutlineView:", self);
        self._delegate = self._dataSource;
        self._itemsForRows = [];
        self._rootItemInfo = {isExpanded: true, isExpandable: false, level: -1, row: -1, children: [], weight: 0};
        self._itemInfosForItems = {};
        self._disclosureControlsForRows = [];
        self._gridStyleMask = CPTableViewGridNone;
        var disclosureCol = objj_msgSend(objj_msgSend(CPTableColumn, "alloc"), "initWithIdentifier:", "disclosureColumn");
        objj_msgSend(disclosureCol, "setWidth:", 16);
        objj_msgSend(disclosureCol, "setResizable:", NO);
        objj_msgSend(disclosureCol, "setEditable:", NO);
        objj_msgSend(disclosureCol, "setDraggable:", NO);
        objj_msgSend(self, "addTableColumn:", disclosureCol);
        self._firstLoad = YES;
    }
    return self;
}

), new objj_method(sel_getUid("setDataSource:"), function $CPOutlineView__setDataSource_(self, _cmd, ds)
{
    self._outlineViewDataSource = ds;
}

), new objj_method(sel_getUid("dataSource"), function $CPOutlineView__dataSource(self, _cmd)
{
    return self._outlineViewDataSource;
}

), new objj_method(sel_getUid("setDelegate:"), function $CPOutlineView__setDelegate_(self, _cmd, aDelegate)
{
    if (self._outlineViewDelegate === aDelegate)
        return;
    var defaultCenter = objj_msgSend(CPNotificationCenter, "defaultCenter");
    if (self._outlineViewDelegate)
    {
        if (objj_msgSend(self._outlineViewDelegate, "respondsToSelector:", sel_getUid("outlineViewSelectionDidChange:")))
            objj_msgSend(defaultCenter, "removeObserver:name:object:", self._outlineViewDelegate, CPOutlineViewSelectionDidChangeNotification, self);
        if (objj_msgSend(self._outlineViewDelegate, "respondsToSelector:", sel_getUid("outlineViewSelectionIsChanging:")))
            objj_msgSend(defaultCenter, "removeObserver:name:object:", self._outlineViewDelegate, CPOutlineViewSelectionIsChangingNotification, self);
        if (objj_msgSend(self._outlineViewDelegate, "respondsToSelector:", sel_getUid("outlineViewItemWillExpand:")))
            objj_msgSend(defaultCenter, "removeObserver:name:object:", self._outlineViewDelegate, CPOutlineViewItemWillExpandNotification, self);
        if (objj_msgSend(self._outlineViewDelegate, "respondsToSelector:", sel_getUid("outlineViewItemDidExpand:")))
            objj_msgSend(defaultCenter, "removeObserver:name:object:", self._outlineViewDelegate, CPOutlineViewItemDidExpandNotification, self);
        if (objj_msgSend(self._outlineViewDelegate, "respondsToSelector:", sel_getUid("outlineViewItemWillCollapse:")))
            objj_msgSend(defaultCenter, "removeObserver:name:object:", self._outlineViewDelegate, CPOutlineViewItemWillCollapseNotification, self);
        if (objj_msgSend(self._outlineViewDelegate, "respondsToSelector:", sel_getUid("outlineViewItemDidCollapse:")))
            objj_msgSend(defaultCenter, "removeObserver:name:object:", self._outlineViewDelegate, CPOutlineViewItemDidCollapseNotification, self);
    }
    self._outlineViewDelegate = aDelegate;
    if (objj_msgSend(self._outlineViewDelegate, "respondsToSelector:", sel_getUid("outlineViewSelectionDidChange:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._outlineViewDelegate, sel_getUid("outlineViewSelectionDidChange:"), CPOutlineViewSelectionDidChangeNotification, self);
    if (objj_msgSend(self._outlineViewDelegate, "respondsToSelector:", sel_getUid("outlineViewSelectionIsChanging:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._outlineViewDelegate, sel_getUid("outlineViewSelectionIsChanging:"), CPOutlineViewSelectionIsChangingNotification, self);
    if (objj_msgSend(self._outlineViewDelegate, "respondsToSelector:", sel_getUid("outlineViewItemWillExpand:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._outlineViewDelegate, sel_getUid("outlineViewItemWillExpand:"), CPOutlineViewItemWillExpandNotification, self);
    if (objj_msgSend(self._outlineViewDelegate, "respondsToSelector:", sel_getUid("outlineViewItemDidExpand:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._outlineViewDelegate, sel_getUid("outlineViewItemDidExpand:"), CPOutlineViewItemDidExpandNotification, self);
    if (objj_msgSend(self._outlineViewDelegate, "respondsToSelector:", sel_getUid("outlineViewItemWillCollapse:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._outlineViewDelegate, sel_getUid("outlineViewItemWillCollapse:"), CPOutlineViewItemWillCollapseNotification, self);
    if (objj_msgSend(self._outlineViewDelegate, "respondsToSelector:", sel_getUid("outlineViewItemDidCollapse:")))
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._outlineViewDelegate, sel_getUid("outlineViewItemDidCollapse:"), CPOutlineViewItemDidCollapseNotification, self);
}

), new objj_method(sel_getUid("delegate"), function $CPOutlineView__delegate(self, _cmd)
{
    return self._outlineViewDelegate;
}

), new objj_method(sel_getUid("isExpandable:"), function $CPOutlineView__isExpandable_(self, _cmd, anItem)
{
    if (!anItem)
        return YES;
    var itemInfo = self._itemInfosForItems[objj_msgSend(anItem, "UID")];
    if (!itemInfo)
        return NO;
    return itemInfo.isExpandable;
}

), new objj_method(sel_getUid("isItemExpanded:"), function $CPOutlineView__isItemExpanded_(self, _cmd, anItem)
{
    if (!anItem)
        return YES;
    var itemInfo = self._itemInfosForItems[objj_msgSend(anItem, "UID")];
    if (!itemInfo)
        return NO;
    return itemInfo.isExpanded;
}

), new objj_method(sel_getUid("levelForItem:"), function $CPOutlineView__levelForItem_(self, _cmd, anItem)
{
    if (!anItem)
        return self._rootItemInfo.level;
    var itemInfo = self._itemInfosForItems[objj_msgSend(anItem, "UID")];
    if (!itemInfo)
        return -1;
    return itemInfo.level;
}

), new objj_method(sel_getUid("levelForRow:"), function $CPOutlineView__levelForRow_(self, _cmd, row)
{
    return objj_msgSend(self, "levelForItem:", objj_msgSend(self, "itemAtRow:", row));
}

), new objj_method(sel_getUid("itemAtRow:"), function $CPOutlineView__itemAtRow_(self, _cmd, anIndex)
{
    return self._itemsForRows[anIndex];
}

), new objj_method(sel_getUid("rowForItem:"), function $CPOutlineView__rowForItem_(self, _cmd, anItem)
{
    if (!anItem)
        return self._rootItemInfo.row;
    var itemInfo = self._itemInfosForItems[objj_msgSend(anItem, "UID")];
    if (!itemInfo)
        return -1;
    return itemInfo.row;
}

), new objj_method(sel_getUid("expandItem:"), function $CPOutlineView__expandItem_(self, _cmd, anItem)
{
    objj_msgSend(self, "expandItem:shouldExpandChildren:", anItem, NO);
}

), new objj_method(sel_getUid("expandItem:shouldExpandChildren:"), function $CPOutlineView__expandItem_shouldExpandChildren_(self, _cmd, anItem, shouldExpandChildren)
{
    var itemInfo = nil;
    if (!anItem)
        itemInfo = self._rootItemInfo;
    else
        itemInfo = self._itemInfosForItems[objj_msgSend(anItem, "UID")];
    if (!itemInfo)
        return;
    if (!itemInfo.isExpanded)
    {
        var previousRowCount = objj_msgSend(self, "numberOfRows");
        objj_msgSend(self, "_noteItemWillExpand:", anItem);
        itemInfo.isExpanded = true;
        objj_msgSend(self, "reloadItem:shouldReloadChildren:", anItem, YES);
        objj_msgSend(self, "_noteItemDidExpand:", anItem);
        var rowCountDelta = objj_msgSend(self, "numberOfRows") - previousRowCount;
        if (rowCountDelta)
        {
            var selection = objj_msgSend(self, "selectedRowIndexes"),
                expandIndex = objj_msgSend(self, "rowForItem:", anItem) + 1;
            if (objj_msgSend(selection, "intersectsIndexesInRange:", CPMakeRange(expandIndex, self._itemsForRows.length)))
            {
                objj_msgSend(selection, "shiftIndexesStartingAtIndex:by:", expandIndex, rowCountDelta);
                objj_msgSend(self, "_setSelectedRowIndexes:", selection);
            }
        }
    }
    if (shouldExpandChildren)
    {
        var children = itemInfo.children,
            childIndex = children.length;
        while (childIndex--)
            objj_msgSend(self, "expandItem:shouldExpandChildren:", children[childIndex], YES);
    }
}

), new objj_method(sel_getUid("collapseItem:"), function $CPOutlineView__collapseItem_(self, _cmd, anItem)
{
    if (!anItem)
        return;
    var itemInfo = self._itemInfosForItems[objj_msgSend(anItem, "UID")];
    if (!itemInfo)
        return;
    if (!itemInfo.isExpanded)
        return;
    var collapseTopIndex = objj_msgSend(self, "rowForItem:", anItem),
        topLevel = objj_msgSend(self, "levelForRow:", collapseTopIndex),
        collapseEndIndex = collapseTopIndex;
    while (collapseEndIndex + 1 < self._itemsForRows.length && objj_msgSend(self, "levelForRow:", collapseEndIndex + 1) > topLevel)
        collapseEndIndex++;
    var collapseRange = CPMakeRange(collapseTopIndex + 1, collapseEndIndex - collapseTopIndex);
    if (collapseRange.length)
    {
        var selection = objj_msgSend(self, "selectedRowIndexes");
        if (objj_msgSend(selection, "intersectsIndexesInRange:", collapseRange))
        {
            objj_msgSend(selection, "removeIndexesInRange:", collapseRange);
            objj_msgSend(self, "_setSelectedRowIndexes:", selection);
        }
        if (objj_msgSend(selection, "intersectsIndexesInRange:", CPMakeRange(collapseEndIndex + 1, self._itemsForRows.length)))
        {
            objj_msgSend(selection, "shiftIndexesStartingAtIndex:by:", collapseEndIndex, -collapseRange.length);
            objj_msgSend(self, "_setSelectedRowIndexes:", selection);
        }
        objj_msgSend(self._scrollView, "setNeedsDisplay:", YES);
    }
    objj_msgSend(self, "_noteItemWillCollapse:", anItem);
    itemInfo.isExpanded = false;
    objj_msgSend(self, "reloadItem:shouldReloadChildren:", anItem, YES);
    objj_msgSend(self, "_noteItemDidCollapse:", anItem);
}

), new objj_method(sel_getUid("reloadItem:"), function $CPOutlineView__reloadItem_(self, _cmd, anItem)
{
    objj_msgSend(self, "reloadItem:shouldReloadChildren:", anItem, NO);
}

), new objj_method(sel_getUid("reloadItem:shouldReloadChildren:"), function $CPOutlineView__reloadItem_shouldReloadChildren_(self, _cmd, anItem, shouldReloadChildren)
{
    if (!!shouldReloadChildren || !anItem)
        objj_msgSend(self, "_loadItemInfoForItem:isIntermediate:", anItem, NO);
    else
        objj_msgSend(self, "_reloadItem:", anItem);
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPOutlineView").super_class }, "reloadData");
}

), new objj_method(sel_getUid("frameOfDataViewAtColumn:row:"), function $CPOutlineView__frameOfDataViewAtColumn_row_(self, _cmd, column, row)
{
    var frame = CGRectCreateCopy(objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPOutlineView").super_class }, "frameOfDataViewAtColumn:row:", column, row));
    if (column === 1)
    {
        var indentationWidth = objj_msgSend(self, "levelForRow:", row) * 14.0;
        frame.origin.x += indentationWidth;
        frame.size.width -= indentationWidth;
        return frame;
    }
    return frame;
}

), new objj_method(sel_getUid("_loadItemInfoForItem:isIntermediate:"), function $CPOutlineView___loadItemInfoForItem_isIntermediate_(self, _cmd, anItem, isIntermediate)
{
    var itemInfosForItems = self._itemInfosForItems,
        dataSource = self._outlineViewDataSource;
    var itemInfo;
    if (anItem == null)
        itemInfo = self._rootItemInfo;
    else
    {
        var itemUID = objj_msgSend(anItem, "UID"),
            itemInfo = itemInfosForItems[itemUID];
        if (!itemInfo)
            return [];
        itemInfo.isExpandable = objj_msgSend(dataSource, "outlineView:isItemExpandable:", self, anItem);
        if (!itemInfo.isExpandable && itemInfo.isExpanded)
        {
            itemInfo.isExpanded = false;
            itemInfo.children = [];
        }
    }
    var weight = itemInfo.weight,
        descendants = anItem ? [anItem] : [];
    if (itemInfo.isExpanded)
    {
        var index = 0,
            count = objj_msgSend(dataSource, "outlineView:numberOfChildrenOfItem:", self, anItem);
        level = itemInfo.level + 1;
        itemInfo.children = [];
        for (; index < count; index++)
        {
            var childItem = objj_msgSend(dataSource, "outlineView:child:ofItem:", self, index, anItem);
            childItemInfo = itemInfosForItems[objj_msgSend(childItem, "UID")];
            if (!childItemInfo)
            {
                childItemInfo = {isExpanded: false, isExpandable: false, children: [], weight: 1, parent: anItem, level: level};
                itemInfosForItems[objj_msgSend(childItem, "UID")] = childItemInfo;
            }
            itemInfo.children[index] = childItem;
            var childDescendants = objj_msgSend(self, "_loadItemInfoForItem:isIntermediate:", childItem, YES);
            descendants = descendants.concat(childDescendants);
        }
    }
    itemInfo.weight = descendants.length;
    if (!isIntermediate)
    {
        var index = MAX(itemInfo.row, 0),
            itemsForRows = self._itemsForRows;
        descendants.unshift(index, weight);
        itemsForRows.splice.apply(itemsForRows, descendants);
        var count = itemsForRows.length;
        for (; index < count; index++)
            itemInfosForItems[objj_msgSend(itemsForRows[index], "UID")].row = index;
        var deltaWeight = itemInfo.weight - weight;
        if (deltaWeight !== 0)
        {
            var parent = itemInfo.parent;
            while (parent)
            {
                var parentItemInfo = itemInfosForItems[objj_msgSend(parent, "UID")];
                parentItemInfo.weight += deltaWeight;
                parent = parentItemInfo.parent;
            }
            if (anItem)
                self._rootItemInfo.weight += deltaWeight;
        }
    }
    return descendants;
}

), new objj_method(sel_getUid("_reloadItem:"), function $CPOutlineView___reloadItem_(self, _cmd, anItem)
{
    if (!anItem)
        return;
    var itemInfosForItems = self._itemInfosForItems,
        dataSource = self._outlineViewDataSource,
        itemUID = objj_msgSend(anItem, "UID"),
        itemInfo = itemInfosForItems[itemUID];
    if (!itemInfo)
        return [];
    var parent = itemInfo.parent,
        parentItemInfo = parent ? itemInfosForItems[objj_msgSend(parent, "UID")] : self._rootItemInfo,
        parentChildren = parentItemInfo.children,
        index = parentChildren.indexOf(anItem),
        newItem = objj_msgSend(dataSource, "outlineView:child:ofItem:", self, index, parent);
    if (anItem !== newItem)
    {
        itemInfosForItems[objj_msgSend(anItem, "UID")] = null;
        itemInfosForItems[objj_msgSend(newItem, "UID")] = itemInfo;
        parentChildren[index] = newItem;
        self._itemsForRows[itemInfo.row] = newItem;
    }
    itemInfo.isExpandable = objj_msgSend(dataSource, "outlineView:isItemExpandable:", self, newItem);
    itemInfo.isExpanded = itemInfo.isExpandable && itemInfo.isExpanded;
}

), new objj_method(sel_getUid("reloadData"), function $CPOutlineView__reloadData(self, _cmd)
{
    objj_msgSend(self, "reloadItem:shouldReloadChildren:", nil, NO);
}

), new objj_method(sel_getUid("_loadDataViewsInRows:columns:"), function $CPOutlineView___loadDataViewsInRows_columns_(self, _cmd, rows, columns)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPOutlineView").super_class }, "_loadDataViewsInRows:columns:", rows, columns);
    var rowArray = [];
    objj_msgSend(rows, "getIndexes:maxCount:inIndexRange:", rowArray, -1, nil);
    var rowIndex = 0,
        rowsCount = rowArray.length;
    for (; rowIndex < rowsCount; rowIndex++)
    {
        var row = rowArray[rowIndex],
            item = self._itemsForRows[row],
            isExpandable = objj_msgSend(self, "isExpandable:", item),
            isExpanded = objj_msgSend(self, "isItemExpanded:", item);
        if (!isExpandable)
            continue;
        objj_msgSend(self._disclosureControlsForRows[row], "removeFromSuperview");
        var dataViewFrame = objj_msgSend(self, "frameOfDataViewAtColumn:row:", 1, row);
        var control = objj_msgSend(objj_msgSend(CPOutlineViewDisclosureButton, "alloc"), "initWithFrame:", CGRectMake(dataViewFrame.origin.x - 18, dataViewFrame.origin.y + 1, 16, 16));
        objj_msgSend(control, "setTarget:", self);
        objj_msgSend(control, "setAction:", sel_getUid("_toggleDisclosureControl:"));
        if (isExpanded)
            objj_msgSend(control, "setState:", CPControlSelectedState);
        control.row = row;
        objj_msgSend(self._dataBodyView, "addSubview:", control);
        self._disclosureControlsForRows[row] = control;
    }
}

), new objj_method(sel_getUid("_unloadDataViewsInRows:columns:"), function $CPOutlineView___unloadDataViewsInRows_columns_(self, _cmd, rows, columns)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPOutlineView").super_class }, "_unloadDataViewsInRows:columns:", rows, columns);
    for (var key in self._disclosureControlsForRows)
    {
        var control = self._disclosureControlsForRows[key];
        if (!control)
            continue;
        objj_msgSend(control, "removeFromSuperview");
        self._disclosureControlsForRows[key] = Nil;
    }
}

), new objj_method(sel_getUid("_noteSelectionIsChanging"), function $CPOutlineView___noteSelectionIsChanging(self, _cmd)
{
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:userInfo:", CPOutlineViewSelectionIsChangingNotification, self, nil);
}

), new objj_method(sel_getUid("_noteSelectionDidChange"), function $CPOutlineView___noteSelectionDidChange(self, _cmd)
{
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:userInfo:", CPOutlineViewSelectionDidChangeNotification, self, nil);
}

), new objj_method(sel_getUid("_noteItemWillExpand:"), function $CPOutlineView___noteItemWillExpand_(self, _cmd, item)
{
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:userInfo:", CPOutlineViewItemWillExpandNotification, self, objj_msgSend(CPDictionary, "dictionaryWithObject:forKey:", item, "CPObject"));
}

), new objj_method(sel_getUid("_noteItemDidExpand:"), function $CPOutlineView___noteItemDidExpand_(self, _cmd, item)
{
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:userInfo:", CPOutlineViewItemDidExpandNotification, self, objj_msgSend(CPDictionary, "dictionaryWithObject:forKey:", item, "CPObject"));
}

), new objj_method(sel_getUid("_noteItemWillCollapse:"), function $CPOutlineView___noteItemWillCollapse_(self, _cmd, item)
{
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:userInfo:", CPOutlineViewItemWillCollapseNotification, self, objj_msgSend(CPDictionary, "dictionaryWithObject:forKey:", item, "CPObject"));
}

), new objj_method(sel_getUid("_noteItemDidCollapse:"), function $CPOutlineView___noteItemDidCollapse_(self, _cmd, item)
{
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:userInfo:", CPOutlineViewItemDidCollapseNotification, self, objj_msgSend(CPDictionary, "dictionaryWithObject:forKey:", item, "CPObject"));
}

), new objj_method(sel_getUid("_toggleDisclosureControl:"), function $CPOutlineView___toggleDisclosureControl_(self, _cmd, sender)
{
    if (objj_msgSend(sender, "state") == CPControlNormalState)
        objj_msgSend(self, "expandItem:", objj_msgSend(self, "itemAtRow:", sender.row));
    else
        objj_msgSend(self, "collapseItem:", objj_msgSend(self, "itemAtRow:", sender.row));
}

)]);
}{var the_class = objj_allocateClassPair(CPResponder, "CPViewController"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_view"), new objj_ivar("_isLoading"), new objj_ivar("_isLazy"), new objj_ivar("_isViewLoaded"), new objj_ivar("_representedObject"), new objj_ivar("_title")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("view"), function $CPViewController__view(self, _cmd)
{
    return self._view;
}

), new objj_method(sel_getUid("_setView:"), function $CPViewController___setView_(self, _cmd, newValue)
{
    self._view = newValue;
}

), new objj_method(sel_getUid("isViewLoaded"), function $CPViewController__isViewLoaded(self, _cmd)
{
    return self._isViewLoaded;
}

), new objj_method(sel_getUid("_setIsViewLoaded:"), function $CPViewController___setIsViewLoaded_(self, _cmd, newValue)
{
    self._isViewLoaded = newValue;
}

), new objj_method(sel_getUid("representedObject"), function $CPViewController__representedObject(self, _cmd)
{
    return self._representedObject;
}

), new objj_method(sel_getUid("setRepresentedObject:"), function $CPViewController__setRepresentedObject_(self, _cmd, newValue)
{
    self._representedObject = newValue;
}

), new objj_method(sel_getUid("title"), function $CPViewController__title(self, _cmd)
{
    return self._title;
}

), new objj_method(sel_getUid("setTitle:"), function $CPViewController__setTitle_(self, _cmd, newValue)
{
    self._title = newValue;
}

), new objj_method(sel_getUid("initWithCibName:"), function $CPViewController__initWithCibName_(self, _cmd, aCibNameOrNil)
{
    return objj_msgSend(self, "initWithCibName:externalNameTable:", aCibNameOrNil, nil);
}

), new objj_method(sel_getUid("initWithCibName:externalNameTable:"), function $CPViewController__initWithCibName_externalNameTable_(self, _cmd, aCibNameOrNil, anExternalNameTable)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPViewController").super_class }, "init");
    if (self)
    {
        self._isLoading = NO;
        self._isLazy = NO;
    }
    return self;
}

), new objj_method(sel_getUid("setView:"), function $CPViewController__setView_(self, _cmd, aView)
{
    var willChangeIsViewLoaded = self._isViewLoaded == NO && aView != nil || self._isViewLoaded == YES && aView == nil;
    if (willChangeIsViewLoaded)
        objj_msgSend(self, "willChangeValueForKey:", "isViewLoaded");
    self._view = aView;
    self._isViewLoaded = aView !== nil;
    if (willChangeIsViewLoaded)
        objj_msgSend(self, "didChangeValueForKey:", "isViewLoaded");
}

), new objj_method(sel_getUid("_viewDidLoad"), function $CPViewController___viewDidLoad(self, _cmd)
{
    objj_msgSend(self, "willChangeValueForKey:", "isViewLoaded");
    objj_msgSend(self, "viewDidLoad");
    self._isViewLoaded = YES;
    objj_msgSend(self, "didChangeValueForKey:", "isViewLoaded");
}

), new objj_method(sel_getUid("viewDidLoad"), function $CPViewController__viewDidLoad(self, _cmd)
{
}

)]);
}var CPViewControllerViewKey = "CPViewControllerViewKey",
    CPViewControllerTitleKey = "CPViewControllerTitleKey",
    CPViewControllerCibNameKey = "CPViewControllerCibNameKey",
    CPViewControllerBundleKey = "CPViewControllerBundleKey";
{
var the_class = objj_getClass("CPViewController")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPViewController\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPViewController__initWithCoder_(self, _cmd, aCoder)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPViewController").super_class }, "initWithCoder:", aCoder);
    if (self)
    {
        self._view = objj_msgSend(aCoder, "decodeObjectForKey:", CPViewControllerViewKey);
        self._title = objj_msgSend(aCoder, "decodeObjectForKey:", CPViewControllerTitleKey);
        self._isLazy = YES;
    }
    return self;
}

), new objj_method(sel_getUid("encodeWithCoder:"), function $CPViewController__encodeWithCoder_(self, _cmd, aCoder)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPViewController").super_class }, "encodeWithCoder:", aCoder);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._view, CPViewControllerViewKey);
    objj_msgSend(aCoder, "encodeObject:forKey:", self._title, CPViewControllerTitleKey);
}

)]);
}{var the_class = objj_allocateClassPair(CPViewController, "CPCollectionViewItem"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_isSelected"), new objj_ivar("_cachedArchive"), new objj_ivar("_collectionView")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("copy"), function $CPCollectionViewItem__copy(self, _cmd)
{
    var copy = objj_msgSend(objj_msgSend(objj_msgSend(self, "class"), "alloc"), "initWithCibName:", nil);
    objj_msgSend(copy, "setRepresentedObject:", objj_msgSend(self, "representedObject"));
    objj_msgSend(copy, "setSelected:", self._isSelected);
    return copy;
}

), new objj_method(sel_getUid("setRepresentedObject:"), function $CPCollectionViewItem__setRepresentedObject_(self, _cmd, anObject)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPCollectionViewItem").super_class }, "setRepresentedObject:", anObject);
    var view = objj_msgSend(self, "view");
    if (objj_msgSend(view, "respondsToSelector:", sel_getUid("setRepresentedObject:")))
        objj_msgSend(view, "setRepresentedObject:", objj_msgSend(self, "representedObject"));
}

), new objj_method(sel_getUid("setSelected:"), function $CPCollectionViewItem__setSelected_(self, _cmd, shouldBeSelected)
{
    shouldBeSelected = !!shouldBeSelected;
    if (self._isSelected === shouldBeSelected)
        return;
    self._isSelected = shouldBeSelected;
    var view = objj_msgSend(self, "view");
    if (objj_msgSend(view, "respondsToSelector:", sel_getUid("setSelected:")))
        objj_msgSend(view, "setSelected:", objj_msgSend(self, "isSelected"));
}

), new objj_method(sel_getUid("isSelected"), function $CPCollectionViewItem__isSelected(self, _cmd)
{
    return self._isSelected;
}

), new objj_method(sel_getUid("collectionView"), function $CPCollectionViewItem__collectionView(self, _cmd)
{
    return self._collectionView;
}

)]);
}if (!Object.keys)
{
    Object.keys =     function(anObject)
    {
        var keys = [];
        for (var aKey in anObject)
            keys.push(aKey);
        return keys;
    };
}
{var the_class = objj_allocateClassPair(CPView, "CPCollectionView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_verticalMargin"), new objj_ivar("_spacing"), new objj_ivar("_minSize"), new objj_ivar("_maxSize"), new objj_ivar("_itemSize"), new objj_ivar("_maxNumberOfColumns"), new objj_ivar("_selectable"), new objj_ivar("_allowsMultipleSelection"), new objj_ivar("_allowsEmptySelection"), new objj_ivar("_allowsAnimation"), new objj_ivar("_itemPrototype"), new objj_ivar("_delegate"), new objj_ivar("_selectedIndexes"), new objj_ivar("_content"), new objj_ivar("_contentView"), new objj_ivar("_scrollView"), new objj_ivar("_ncols"), new objj_ivar("_nrows"), new objj_ivar("_virtualHeight"), new objj_ivar("_cachedItems"), new objj_ivar("_renderTimer"), new objj_ivar("_lastStart"), new objj_ivar("_lastEnd")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("verticalMargin"), function $CPCollectionView__verticalMargin(self, _cmd)
{
    return self._verticalMargin;
}

), new objj_method(sel_getUid("setVerticalMargin:"), function $CPCollectionView__setVerticalMargin_(self, _cmd, newValue)
{
    self._verticalMargin = newValue;
}

), new objj_method(sel_getUid("horizontalMargin"), function $CPCollectionView__horizontalMargin(self, _cmd)
{
    return self._spacing;
}

), new objj_method(sel_getUid("setHorizontalMargin:"), function $CPCollectionView__setHorizontalMargin_(self, _cmd, newValue)
{
    self._spacing = newValue;
}

), new objj_method(sel_getUid("minItemSize"), function $CPCollectionView__minItemSize(self, _cmd)
{
    return self._minSize;
}

), new objj_method(sel_getUid("_setMinSize:"), function $CPCollectionView___setMinSize_(self, _cmd, newValue)
{
    self._minSize = newValue;
}

), new objj_method(sel_getUid("maxItemSize"), function $CPCollectionView__maxItemSize(self, _cmd)
{
    return self._maxSize;
}

), new objj_method(sel_getUid("_setMaxSize:"), function $CPCollectionView___setMaxSize_(self, _cmd, newValue)
{
    self._maxSize = newValue;
}

), new objj_method(sel_getUid("maximumNumberOfColumns"), function $CPCollectionView__maximumNumberOfColumns(self, _cmd)
{
    return self._maxNumberOfColumns;
}

), new objj_method(sel_getUid("setMaximumNumberOfColumns:"), function $CPCollectionView__setMaximumNumberOfColumns_(self, _cmd, newValue)
{
    self._maxNumberOfColumns = newValue;
}

), new objj_method(sel_getUid("selectable"), function $CPCollectionView__selectable(self, _cmd)
{
    return self._selectable;
}

), new objj_method(sel_getUid("setSelectable:"), function $CPCollectionView__setSelectable_(self, _cmd, newValue)
{
    self._selectable = newValue;
}

), new objj_method(sel_getUid("allowsMultipleSelection"), function $CPCollectionView__allowsMultipleSelection(self, _cmd)
{
    return self._allowsMultipleSelection;
}

), new objj_method(sel_getUid("setAllowsMultipleSelection:"), function $CPCollectionView__setAllowsMultipleSelection_(self, _cmd, newValue)
{
    self._allowsMultipleSelection = newValue;
}

), new objj_method(sel_getUid("allowsEmptySelection"), function $CPCollectionView__allowsEmptySelection(self, _cmd)
{
    return self._allowsEmptySelection;
}

), new objj_method(sel_getUid("setAllowsEmptySelection:"), function $CPCollectionView__setAllowsEmptySelection_(self, _cmd, newValue)
{
    self._allowsEmptySelection = newValue;
}

), new objj_method(sel_getUid("allowsAnimation"), function $CPCollectionView__allowsAnimation(self, _cmd)
{
    return self._allowsAnimation;
}

), new objj_method(sel_getUid("setAllowsAnimation:"), function $CPCollectionView__setAllowsAnimation_(self, _cmd, newValue)
{
    self._allowsAnimation = newValue;
}

), new objj_method(sel_getUid("itemPrototype"), function $CPCollectionView__itemPrototype(self, _cmd)
{
    return self._itemPrototype;
}

), new objj_method(sel_getUid("setItemPrototype:"), function $CPCollectionView__setItemPrototype_(self, _cmd, newValue)
{
    self._itemPrototype = newValue;
}

), new objj_method(sel_getUid("delegate"), function $CPCollectionView__delegate(self, _cmd)
{
    return self._delegate;
}

), new objj_method(sel_getUid("setDelegate:"), function $CPCollectionView__setDelegate_(self, _cmd, newValue)
{
    self._delegate = newValue;
}

), new objj_method(sel_getUid("selectionIndexes"), function $CPCollectionView__selectionIndexes(self, _cmd)
{
    return self._selectedIndexes;
}

), new objj_method(sel_getUid("_setSelectedIndexes:"), function $CPCollectionView___setSelectedIndexes_(self, _cmd, newValue)
{
    self._selectedIndexes = newValue;
}

), new objj_method(sel_getUid("content"), function $CPCollectionView__content(self, _cmd)
{
    return self._content;
}

), new objj_method(sel_getUid("_setContent:"), function $CPCollectionView___setContent_(self, _cmd, newValue)
{
    self._content = newValue;
}

), new objj_method(sel_getUid("acceptsFirstResponder"), function $CPCollectionView__acceptsFirstResponder(self, _cmd)
{
    return YES;
}

), new objj_method(sel_getUid("initWithFrame:"), function $CPCollectionView__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPCollectionView").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._maxNumberOfColumns = Number.MAX_VALUE;
        _maxNumberOfRows = Number.MAX_VALUE;
        self._verticalMargin = 5.0;
        self._minSize = CGSizeMake(50, 50);
        self._maxSize = CGSizeMake(Number.MAX_VALUE, Number.MAX_VALUE);
        self._selectedIndexes = objj_msgSend(CPIndexSet, "indexSet");
        self._contentView = null;
        self._scrollView = null;
        self._spacing = 5.0;
        self._ncols = 0.0;
        self._nrows = 0.0;
        self._virtualHeight = 0;
        self._cachedItems = {};
        self._renderTimer = null;
        self._selectable = YES;
        self._allowsAnimation = YES;
        self._allowsEmptySelection = NO;
        self._allowsMultipleSelection = YES;
        self._lastStart = Number.MAX_VALUE;
        self._lastEnd = -1;
        objj_msgSend(self, "_init");
    }
    return self;
}

), new objj_method(sel_getUid("_init"), function $CPCollectionView___init(self, _cmd)
{
    self._DOMElement.addClass("cpcollectionview");
    if (!self._contentView)
    {
        self._contentView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", CGRectMakeZero());
        objj_msgSend(self._contentView, "setAutoresizesSubviews:", NO);
    }
    if (!self._scrollView)
    {
        self._scrollView = objj_msgSend(objj_msgSend(CPScrollView, "alloc"), "initWithFrame:", objj_msgSend(self, "bounds"));
        objj_msgSend(self._scrollView, "setAutoresizingMask:", CPViewWidthSizable | CPViewHeightSizable);
        objj_msgSend(self._scrollView, "setDocumentView:", self._contentView);
        objj_msgSend(self._scrollView, "setHasHorizontalScroller:", NO);
        objj_msgSend(self._ephemeralSubviews, "addObject:", self._scrollView);
        objj_msgSend(self, "addSubview:", self._scrollView);
    }
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "addObserver:selector:name:object:", self, sel_getUid("onScrollTop:"), CPScrollTopNotification, self._scrollView);
}

), new objj_method(sel_getUid("setContent:"), function $CPCollectionView__setContent_(self, _cmd, content)
{
    if (objj_msgSend(self._content, "isEqual:", content))
        return;
    self._content = content;
    objj_msgSend(self, "reloadContent");
}

), new objj_method(sel_getUid("setMinItemSize:"), function $CPCollectionView__setMinItemSize_(self, _cmd, aSize)
{
    if (CGSizeEqualToSize(self._minSize, aSize))
        return;
    self._minSize = CGSizeMake(MIN(aSize.width, self._maxSize.width), MIN(aSize.height, self._maxSize.height));
    if (self.itemPrototype)
        objj_msgSend(self, "_reloadWithCache:", self._allowsAnimation);
}

), new objj_method(sel_getUid("setMaxItemSize:"), function $CPCollectionView__setMaxItemSize_(self, _cmd, aSize)
{
    if (CGSizeEqualToSize(self._maxSize, aSize))
        return;
    self._maxSize = aSize;
    if (self.itemPrototype)
        objj_msgSend(self, "_reloadWithCache:", self._allowsAnimation);
}

), new objj_method(sel_getUid("setHorizontalMargin:"), function $CPCollectionView__setHorizontalMargin_(self, _cmd, value)
{
    if (self._spacing === value)
        return;
    self._spacing = value;
    if (self.itemPrototype)
        objj_msgSend(self, "_reloadWithCache:", self._allowsAnimation);
}

), new objj_method(sel_getUid("scrollView"), function $CPCollectionView__scrollView(self, _cmd)
{
    return self._scrollView;
}

), new objj_method(sel_getUid("onScrollTop:"), function $CPCollectionView__onScrollTop_(self, _cmd, aNotification)
{
    if (self._renderTimer)
    {
        clearTimeout(self._renderTimer);
        self._renderTimer = null;
    }
}

), new objj_method(sel_getUid("setItemPrototype:"), function $CPCollectionView__setItemPrototype_(self, _cmd, proto)
{
    self._itemPrototype = proto;
    self._itemPrototype._collectionView = self;
    objj_msgSend(self, "_reloadWithCache:", self._allowsAnimation);
}

), new objj_method(sel_getUid("_computeSpacing"), function $CPCollectionView___computeSpacing(self, _cmd)
{
    if (self._content && self._itemPrototype)
    {
        var iw = self._minSize.width,
            ih = self._minSize.height;
        self._ncols = MIN(self._maxNumberOfColumns, FLOOR((self._frame.size.width - 16 - self._spacing) / (iw + self._spacing)));
        if (self._ncols < 1)
            self._ncols = 1;
        var horizontalWidth = self._spacing + self._ncols * (iw + self._spacing) + 16;
        while (horizontalWidth < self._frame.size.width && iw < self._maxSize.width)
        {
            iw += 1.0;
            horizontalWidth = self._spacing + self._ncols * (iw + self._spacing) + 16;
        }
        var n = self._content.length;
        self._nrows = MIN(_maxNumberOfRows, CEIL(n / self._ncols));
        self._virtualHeight = (ih + self._verticalMargin) * self._nrows + self._verticalMargin;
        self._itemSize = CGSizeMake(iw, ih);
        objj_msgSend(self._contentView, "setFrameSize:", CGSizeMake(self._frame.size.width, MAX(self._frame.size.height - 16.0, self._virtualHeight)));
    }
}

), new objj_method(sel_getUid("_layout:"), function $CPCollectionView___layout_(self, _cmd, animate)
{
    if (!self._itemPrototype)
        objj_msgSend(CPException, "raise:reason:", CPInternalInconsistencyException, "CPCollectionView has no item prototype!");
    if (self._content && self._itemPrototype)
    {
        var n = MIN(self._ncols * self._nrows, self._content.length);
        var iw = self._itemSize.width,
            ih = self._itemSize.height;
        var scrollTop = objj_msgSend(self._scrollView, "scrollTop"),
            bottomScrollRow = MAX(0, CEIL(scrollTop / (ih + self._verticalMargin)) - 50),
            startIndex = MAX(0, self._ncols * (bottomScrollRow - 1)),
            topScrollRow = CEIL((scrollTop + self._frame.size.height) / (ih + self._verticalMargin)) + 50,
            endIndex = MIN(n, self._ncols * (topScrollRow + 1)),
            index = startIndex;
        if (startIndex < self._lastStart || endIndex > self._lastEnd)
        {
            self._lastEnd = endIndex;
            self._lastStart = startIndex;
            var xpos = self._spacing,
                ypos = self._verticalMargin + (ih + self._verticalMargin) * MAX(0, bottomScrollRow - 1),
                colcount = 0;
            var archive = objj_msgSend(CPKeyedArchiver, "archivedDataWithRootObject:", self._itemPrototype);
            for (; index < endIndex; index++)
            {
                var item = null;
                var key = "" + index;
                if (self._cachedItems.hasOwnProperty(key))
                {
                    item = self._cachedItems[key];
                }
                else
                {
                    var obj = self._content[index];
                    item = objj_msgSend(CPKeyedUnarchiver, "unarchiveObjectWithData:", archive);
                    item._collectionView = self;
                    objj_msgSend(item, "setRepresentedObject:", obj);
                    self._cachedItems[key] = item;
                }
                var v = objj_msgSend(item, "view");
                objj_msgSend(v, "setFrameSize:", CGSizeCreateCopy(self._itemSize));
                var frame = objj_msgSend(v, "frame");
                var pt = CGPointMake(xpos, ypos);
                v._nextOrigin = pt;
                objj_msgSend(self._contentView, "addSubview:", v);
                if (!CGPointEqualToPoint(frame.origin, pt) && animate)
                {
                    v._DOMElement.animate({left: pt.x, top: pt.y}, 200, $.proxy(                    function()
                    {
                        objj_msgSend(this, "setFrameOrigin:", this._nextOrigin);
                    }, v));
                }
                else
                    objj_msgSend(v, "setFrameOrigin:", pt);
                colcount++;
                xpos += iw + self._spacing;
                if (colcount >= self._ncols)
                {
                    xpos = self._spacing;
                    colcount = 0;
                    ypos += ih + self._verticalMargin;
                }
            }
        }
    }
}

), new objj_method(sel_getUid("setFrameSize:"), function $CPCollectionView__setFrameSize_(self, _cmd, aSize)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPCollectionView").super_class }, "setFrameSize:", aSize);
    if (!self._itemPrototype)
        objj_msgSend(CPException, "raise:reason:", CPInternalInconsistencyException, "CPCollectionView has no item prototype!");
    objj_msgSend(self._contentView, "setFrameSize:", CGSizeMake(self._frame.size.width, MAX(self._frame.size.height - 16.0, self._virtualHeight)));
    if (self._renderTimer)
    {
        clearTimeout(self._renderTimer);
        self._renderTimer = null;
    }
    self._lastStart = Number.MAX_VALUE;
    self._lastEnd = -1;
    var timeout = self._allowsAnimation ? 200 : 0;
    self._renderTimer = setTimeout(    function()
    {
        objj_msgSend(self, "_computeSpacing");
        objj_msgSend(self, "_layout:", self._allowsAnimation && (Object.keys(self._cachedItems)).length > 0);
        objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
    }, timeout);
}

), new objj_method(sel_getUid("itemAtIndex:"), function $CPCollectionView__itemAtIndex_(self, _cmd, anIndex)
{
    if (self._cachedItems.hasOwnProperty("" + anIndex))
        return self._cachedItems["" + anIndex];
    return nil;
}

), new objj_method(sel_getUid("setSelectionIndexes:"), function $CPCollectionView__setSelectionIndexes_(self, _cmd, indexes)
{
    if (!indexes)
        indexes = objj_msgSend(CPIndexSet, "indexSet");
    if (!self._selectable || objj_msgSend(self._selectedIndexes, "isEqual:", indexes))
        return;
    self._selectedIndexes = indexes;
    var count = (Object.keys(self._cachedItems)).length,
        index = 0;
    for (; index < count; index++)
    {
        var item = objj_msgSend(self, "itemAtIndex:", index);
        objj_msgSend(item, "setSelected:", objj_msgSend(self._selectedIndexes, "containsIndex:", index));
    }
    if (self._delegate && objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("collectionViewDidChangeSelection:")))
        objj_msgSend(self._delegate, "performSelector:withObject:", sel_getUid("collectionViewDidChangeSelection:"), self);
}

), new objj_method(sel_getUid("_reloadWithCache:"), function $CPCollectionView___reloadWithCache_(self, _cmd, animate)
{
    self._lastStart = Number.MAX_VALUE;
    self._lastEnd = -1;
    objj_msgSend(self, "_computeSpacing");
    objj_msgSend(self, "_layout:", animate);
    var _selIndexes = self._selectedIndexes;
    objj_msgSend(self, "setSelectionIndexes:", nil);
    objj_msgSend(self, "setSelectionIndexes:", _selIndexes);
}

), new objj_method(sel_getUid("reloadContent"), function $CPCollectionView__reloadContent(self, _cmd)
{
    if (self._contentView)
    {
        self._contentView._DOMElement.empty();
        self._contentView._subviews = [];
    }
    self._cachedItems = {};
    objj_msgSend(self, "_reloadWithCache:", NO);
}

), new objj_method(sel_getUid("mouseDown:"), function $CPCollectionView__mouseDown_(self, _cmd, theEvent)
{
    objj_msgSend(objj_msgSend(self, "window"), "makeFirstResponder:", self);
    var pt = objj_msgSend(self, "convertPoint:fromView:", objj_msgSend(theEvent, "locationInWindow"), nil);
    var x = pt.x,
        y = pt.y + objj_msgSend(self._scrollView, "scrollTop");
    var iw = self._itemSize.width,
        ih = self._itemSize.height;
    var row = CEIL(y / (ih + self._verticalMargin));
    var col = CEIL(x / (iw + self._spacing));
    var index = self._ncols * (row - 1) + col - 1;
    var key = "" + index;
    if (self._cachedItems.hasOwnProperty(key))
    {
        var item = self._cachedItems[key];
        var frame = objj_msgSend(objj_msgSend(item, "view"), "frame");
        if (CGRectContainsPoint(frame, CPMakePoint(x, y)))
        {
            if (self._allowsMultipleSelection && objj_msgSend(theEvent, "shiftKey"))
            {
                objj_msgSend(item, "setSelected:", YES);
                if (!objj_msgSend(self._selectedIndexes, "containsIndex:", index))
                {
                    objj_msgSend(self._selectedIndexes, "addIndex:", index);
                    if (self._delegate && objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("collectionViewDidChangeSelection:")))
                        objj_msgSend(self._delegate, "performSelector:withObject:", sel_getUid("collectionViewDidChangeSelection:"), self);
                }
            }
            else
            {
                objj_msgSend(self, "setSelectionIndexes:", objj_msgSend(CPIndexSet, "indexSetWithIndex:", index));
            }
        }
        else
        {
            if (self._allowsEmptySelection)
                objj_msgSend(self, "setSelectionIndexes:", nil);
        }
    }
    else
    {
        if (self._allowsEmptySelection)
            objj_msgSend(self, "setSelectionIndexes:", nil);
    }
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPCollectionView").super_class }, "mouseDown:", theEvent);
}

), new objj_method(sel_getUid("keyDown:"), function $CPCollectionView__keyDown_(self, _cmd, theEvent)
{
    var selectedIndex = objj_msgSend(self._selectedIndexes, "firstIndex");
    if (selectedIndex > -1)
    {
        var nextIndex = selectedIndex;
        var kc = objj_msgSend(theEvent, "keyCode");
        if (kc === CPRightArrowKeyCode)
        {
            nextIndex++;
        }
        else if (kc === CPLeftArrowKeyCode)
        {
            nextIndex--;
        }
        else if (kc === CPDownArrowKeyCode)
        {
            nextIndex += self._ncols;
        }
        else if (kc === CPUpArrowKeyCode)
        {
            nextIndex -= self._ncols;
        }
        else
        {
            objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPCollectionView").super_class }, "keyDown:", theEvent);
        }
        if (nextIndex != selectedIndex && nextIndex >= 0 && nextIndex < self._content.length)
        {
            var idxset = objj_msgSend(CPIndexSet, "indexSetWithIndex:", nextIndex);
            objj_msgSend(self, "setSelectionIndexes:", idxset);
            var key = "" + nextIndex;
            var item = self._cachedItems[key];
            if (item)
            {
                var rect = item._view._frame;
                if (!objj_msgSend(self._scrollView, "isRectVisible:", rect))
                    objj_msgSend(self._scrollView, "setScrollTop:", rect.origin.y - self._verticalMargin);
            }
        }
    }
}

)]);
}{var the_class = objj_allocateClassPair(CPWindow, "NewFileDialog"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_fileNameField"), new objj_ivar("collectionView")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $NewFileDialog__init(self, _cmd)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("NewFileDialog").super_class }, "initWithContentRect:styleMask:", CGRectMake(0, 0, 470, 400), CPClosableWindowMask);
    if (self)
    {
        objj_msgSend(self, "setTitle:", "New File");
        var cv = objj_msgSend(self, "contentView");
        var okButton = objj_msgSend(objj_msgSend(CPButton, "alloc"), "initWithFrame:", CGRectMake(375, 360, 80, 25));
        objj_msgSend(okButton, "setTitle:", "OK");
        objj_msgSend(okButton, "setAutoresizingMask:", CPViewMinXMargin | CPViewMinYMargin);
        objj_msgSend(okButton, "setTarget:", self);
        objj_msgSend(okButton, "setAction:", sel_getUid("onConfirm:"));
        objj_msgSend(cv, "addSubview:", okButton);
        var cancelButton = objj_msgSend(objj_msgSend(CPButton, "alloc"), "initWithFrame:", CGRectMake(290, 360, 80, 25));
        objj_msgSend(cancelButton, "setTitle:", "Cancel");
        objj_msgSend(cancelButton, "setAutoresizingMask:", CPViewMinXMargin | CPViewMinYMargin);
        objj_msgSend(cancelButton, "setTarget:", self);
        objj_msgSend(cancelButton, "setAction:", sel_getUid("orderOut:"));
        objj_msgSend(cv, "addSubview:", cancelButton);
        var fileTemplateLabel = objj_msgSend(CPTextField, "labelWithString:", "File Template:");
        objj_msgSend(fileTemplateLabel, "setFrameOrigin:", CGPointMake(15, 15));
        objj_msgSend(cv, "addSubview:", fileTemplateLabel);
        self.collectionView = objj_msgSend(objj_msgSend(CPCollectionView, "alloc"), "initWithFrame:", CGRectMake(15, 35, 440, 230));
        objj_msgSend(self.collectionView, "setAutoresizingMask:", CPViewWidthSizable);
        objj_msgSend(self.collectionView, "setBackgroundColor:", objj_msgSend(CPColor, "whiteColor"));
        objj_msgSend(self.collectionView, "setBorderWidth:", 1.0);
        objj_msgSend(self.collectionView, "setBorderColor:", objj_msgSend(CPColor, "colorWithHexString:", "9d9d9d"));
        objj_msgSend(self.collectionView, "setHorizontalMargin:", 10);
        objj_msgSend(self.collectionView, "setVerticalMargin:", 10);
        objj_msgSend(self.collectionView, "setMinItemSize:", CGSizeMake(96, 96));
        objj_msgSend(self.collectionView, "setMaxItemSize:", CGSizeMake(96, 96));
        var newItem = objj_msgSend(objj_msgSend(NewItem, "alloc"), "init");
        objj_msgSend(newItem, "setView:", objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", CGRectMake(0, 0, 96, 96)));
        objj_msgSend(self.collectionView, "setItemPrototype:", newItem);
        objj_msgSend(self.collectionView, "setContent:", [{label: "Window", image: objj_msgSend(CPImage, "imageNamed:", "window.png")}, {label: "View", image: objj_msgSend(CPImage, "imageNamed:", "view.png")}]);
        objj_msgSend(cv, "addSubview:", self.collectionView);
        var newFileLabel = objj_msgSend(CPTextField, "labelWithString:", "Filename:");
        objj_msgSend(newFileLabel, "setFrameOrigin:", CGPointMake(15, 275));
        objj_msgSend(cv, "addSubview:", newFileLabel);
        self._fileNameField = objj_msgSend(objj_msgSend(CPTextField, "alloc"), "initWithFrame:", CGRectMake(15, 295, 440, 28));
        objj_msgSend(self._fileNameField, "setBezeled:", YES);
        objj_msgSend(self._fileNameField, "setAutoresizingMask:", CPViewWidthSizable);
        objj_msgSend(cv, "addSubview:", self._fileNameField);
    }
    return self;
}

), new objj_method(sel_getUid("reset"), function $NewFileDialog__reset(self, _cmd)
{
    objj_msgSend(self.collectionView, "setSelectionIndexes:", objj_msgSend(CPIndexSet, "indexSetWithIndex:", 0));
    objj_msgSend(self._fileNameField, "setStringValue:", "");
    objj_msgSend(self, "makeFirstResponder:", self.collectionView);
}

), new objj_method(sel_getUid("onConfirm:"), function $NewFileDialog__onConfirm_(self, _cmd, sender)
{
}

)]);
}{var the_class = objj_allocateClassPair(CPCollectionViewItem, "NewItem"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_label"), new objj_ivar("_imageView")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("setRepresentedObject:"), function $NewItem__setRepresentedObject_(self, _cmd, data)
{
    if (!self._imageView)
    {
        self._imageView = objj_msgSend(objj_msgSend(CPImageView, "alloc"), "initWithFrame:", CGRectMake(16, 5, 64, 64));
        objj_msgSend(self._imageView, "setImageScaling:", CPScaleProportionally);
        objj_msgSend(self._view, "addSubview:", self._imageView);
    }
    if (!self._label)
    {
        self._label = objj_msgSend(CPTextField, "labelWithString:", data.label);
        objj_msgSend(self._label, "setTextShadowOffset:", CGSizeMake(0, 0));
        objj_msgSend(self._view, "addSubview:", self._label);
    }
    objj_msgSend(self._imageView, "setImage:", data.image);
    objj_msgSend(self._label, "setStringValue:", data.label);
    objj_msgSend(self._label, "sizeToFit");
    objj_msgSend(self._label, "setFrameOrigin:", CGPointMake((96 - CGRectGetWidth(objj_msgSend(self._label, "frame"))) / 2.0, 72));
}

), new objj_method(sel_getUid("setSelected:"), function $NewItem__setSelected_(self, _cmd, aBOOL)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("NewItem").super_class }, "setSelected:", aBOOL);
    if (aBOOL)
    {
        objj_msgSend(self._view, "setBackgroundColor:", objj_msgSend(CPColor, "colorWithHexString:", "99C2FF"));
    }
    else
    {
        objj_msgSend(self._view, "setBackgroundColor:", objj_msgSend(CPColor, "whiteColor"));
    }
}

)]);
}{var the_class = objj_allocateClassPair(CPObject, "FileViewerController"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_data"), new objj_ivar("_projectName"), new objj_ivar("_fileInfo")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("projectName"), function $FileViewerController__projectName(self, _cmd)
{
    return self._projectName;
}

), new objj_method(sel_getUid("setProjectName:"), function $FileViewerController__setProjectName_(self, _cmd, newValue)
{
    self._projectName = newValue;
}

), new objj_method(sel_getUid("init"), function $FileViewerController__init(self, _cmd)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("FileViewerController").super_class }, "init");
    if (self)
    {
        self._data = Nil;
        self._projectName = "Project";
        self._fileInfo = objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "init");
    }
    return self;
}

), new objj_method(sel_getUid("_dataToDictionary:"), function $FileViewerController___dataToDictionary_(self, _cmd, fileObj)
{
    var theFiles = [];
    if (fileObj.files)
    {
        var count = fileObj.files.length,
            i = 0;
        for (; i < count; i++)
        {
            var d = objj_msgSend(self, "_dataToDictionary:", fileObj.files[i]);
            objj_msgSend(self, "setInfo:forFile:", d, fileObj.files[i].path);
            theFiles.push(d);
        }
    }
    return objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", fileObj.name, "name", fileObj.path, "path", fileObj.isDirectory, "isDirectory", NO, "root", -1, "timestamp", "", "contents", NO, "unsaved", NO, "isLoaded", theFiles, "files");
}

), new objj_method(sel_getUid("setData:"), function $FileViewerController__setData_(self, _cmd, data)
{
    console.log(data);
    self._data = data;
    self._fileInfo = objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "init");
    var count = self._data.length,
        i = 0;
    var theFiles = [];
    for (; i < count; i++)
    {
        var fileObj = self._data[i];
        var d = objj_msgSend(self, "_dataToDictionary:", fileObj);
        objj_msgSend(self, "setInfo:forFile:", d, fileObj.path);
        theFiles.push(d);
    }
    objj_msgSend(self, "setInfo:forFile:", objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", self._projectName, "name", YES, "isDirectory", YES, "root", NO, "unsaved", theFiles, "files"), "__root__");
}

), new objj_method(sel_getUid("outlineView:numberOfChildrenOfItem:"), function $FileViewerController__outlineView_numberOfChildrenOfItem_(self, _cmd, outlineView, anItem)
{
    if (!self._data)
        return 0;
    if (!anItem)
        return 1;
    if (objj_msgSend(anItem, "objectForKey:", "isDirectory"))
    {
        return objj_msgSend(objj_msgSend(anItem, "objectForKey:", "files"), "count");
    }
    return 0;
}

), new objj_method(sel_getUid("outlineView:child:ofItem:"), function $FileViewerController__outlineView_child_ofItem_(self, _cmd, outlineView, childIndex, anItem)
{
    if (!anItem)
    {
        return objj_msgSend(self, "infoForFile:", "__root__");
    }
    if (objj_msgSend(anItem, "objectForKey:", "isDirectory"))
    {
        return objj_msgSend(objj_msgSend(anItem, "objectForKey:", "files"), "objectAtIndex:", childIndex);
    }
    return nil;
}

), new objj_method(sel_getUid("outlineView:isItemExpandable:"), function $FileViewerController__outlineView_isItemExpandable_(self, _cmd, outlineView, anItem)
{
    if (!anItem)
        return YES;
    return objj_msgSend(anItem, "objectForKey:", "isDirectory");
}

), new objj_method(sel_getUid("outlineView:objectValueForTableColumn:byItem:"), function $FileViewerController__outlineView_objectValueForTableColumn_byItem_(self, _cmd, outlineView, aTableColumn, anItem)
{
    var name = objj_msgSend(anItem, "objectForKey:", "name"),
        unsaved = objj_msgSend(anItem, "objectForKey:", "unsaved"),
        isDir = objj_msgSend(anItem, "objectForKey:", "isDirectory");
    if (unsaved && !isDir)
    {
        return name + "*";
    }
    return name;
}

), new objj_method(sel_getUid("allFiles"), function $FileViewerController__allFiles(self, _cmd)
{
    return objj_msgSend(self._fileInfo, "allKeys");
}

), new objj_method(sel_getUid("setInfo:forFile:"), function $FileViewerController__setInfo_forFile_(self, _cmd, info, filePath)
{
    objj_msgSend(self._fileInfo, "setObject:forKey:", info, filePath);
}

), new objj_method(sel_getUid("infoForFile:"), function $FileViewerController__infoForFile_(self, _cmd, filePath)
{
    return objj_msgSend(self._fileInfo, "objectForKey:", filePath);
}

)]);
}{var the_class = objj_allocateClassPair(CPWindow, "NewProjectDialog"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_createBtn"), new objj_ivar("_cancelBtn"), new objj_ivar("_projNameField"), new objj_ivar("_directoryPathField"), new objj_ivar("_newProject")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("newProject"), function $NewProjectDialog__newProject(self, _cmd)
{
    return self._newProject;
}

), new objj_method(sel_getUid("_setNewProject:"), function $NewProjectDialog___setNewProject_(self, _cmd, newValue)
{
    self._newProject = newValue;
}

), new objj_method(sel_getUid("init"), function $NewProjectDialog__init(self, _cmd)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("NewProjectDialog").super_class }, "initWithContentRect:styleMask:", CGRectMake(0, 0, 470, 180), CPClosableWindowMask);
    if (self)
    {
        _newProjectID = Nil;
        objj_msgSend(self, "setTitle:", "New Project");
        var cv = objj_msgSend(self, "contentView");
        var nameLabel = objj_msgSend(CPTextField, "labelWithString:", "Project Name:");
        objj_msgSend(nameLabel, "setFrameOrigin:", CGPointMake(15, 15));
        objj_msgSend(cv, "addSubview:", nameLabel);
        self._projNameField = objj_msgSend(objj_msgSend(CPTextField, "alloc"), "initWithFrame:", CGRectMake(15, 37, 440, 25));
        objj_msgSend(self._projNameField, "setBezeled:", YES);
        objj_msgSend(self._projNameField, "setDelegate:", self);
        objj_msgSend(cv, "addSubview:", self._projNameField);
        var dirLabel = objj_msgSend(CPTextField, "labelWithString:", "Directory:");
        objj_msgSend(dirLabel, "setFrameOrigin:", CGPointMake(15, 70));
        objj_msgSend(cv, "addSubview:", dirLabel);
        self._directoryPathField = objj_msgSend(objj_msgSend(CPTextField, "alloc"), "initWithFrame:", CGRectMake(15, 92, 440, 25));
        objj_msgSend(self._directoryPathField, "setBezeled:", YES);
        objj_msgSend(self._directoryPathField, "setDelegate:", self);
        objj_msgSend(cv, "addSubview:", self._directoryPathField);
        self._createBtn = objj_msgSend(CPButton, "buttonWithTitle:", "Create Project");
        objj_msgSend(self._createBtn, "setTarget:", self);
        objj_msgSend(self._createBtn, "setAction:", sel_getUid("onConfirm:"));
        var frame = CGRectCreateCopy(objj_msgSend(self._createBtn, "frame"));
        frame.size.height = 25.0;
        frame.origin.x = 470 - CGRectGetWidth(frame) - 15;
        frame.origin.y = 140;
        objj_msgSend(self._createBtn, "setFrame:", frame);
        objj_msgSend(self._createBtn, "setEnabled:", NO);
        objj_msgSend(cv, "addSubview:", self._createBtn);
        self._cancelBtn = objj_msgSend(CPButton, "buttonWithTitle:", "Cancel");
        objj_msgSend(self._cancelBtn, "setFrame:", CGRectMake(470 - CGRectGetWidth(objj_msgSend(self._createBtn, "bounds")) - 100, 140, 80, 25));
        objj_msgSend(self._cancelBtn, "setTarget:", self);
        objj_msgSend(self._cancelBtn, "setAction:", sel_getUid("orderOut:"));
        objj_msgSend(cv, "addSubview:", self._cancelBtn);
    }
    return self;
}

), new objj_method(sel_getUid("reset"), function $NewProjectDialog__reset(self, _cmd)
{
    _newProjectID = Nil;
    objj_msgSend(self._directoryPathField, "setStringValue:", "~/Documents/");
    objj_msgSend(self._projNameField, "setStringValue:", "");
    objj_msgSend(self, "makeFirstResponder:", self._projNameField);
}

), new objj_method(sel_getUid("onConfirm:"), function $NewProjectDialog__onConfirm_(self, _cmd, sender)
{
    var projName = objj_msgSend(objj_msgSend(self._projNameField, "stringValue"), "stringByTrimmingWhitespace"),
        projDir = objj_msgSend(objj_msgSend(self._directoryPathField, "stringValue"), "stringByTrimmingWhitespace");
    objj_msgSend(self._createBtn, "setEnabled:", NO);
    if (objj_msgSend(projName, "length") > 0 && objj_msgSend(projDir, "length") > 0)
    {
        projDir = PATH.join(PATH.resolve(projDir.replace("~", getUserHome())), projName);
        createDefaultProject(projName, projDir,         function(success, reason)
        {
            if (success)
            {
                self._newProject = objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", projName, "name", projDir, "directory");
                objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", "NewProjectCreatedNotification", self);
                objj_msgSend(self, "orderOut:", nil);
            }            else
            {
                alert(reason);
            }        });
    }
}

), new objj_method(sel_getUid("controlTextDidChange:"), function $NewProjectDialog__controlTextDidChange_(self, _cmd, aNotification)
{
    var projName = objj_msgSend(objj_msgSend(self._projNameField, "stringValue"), "stringByTrimmingWhitespace"),
        projDir = objj_msgSend(objj_msgSend(self._directoryPathField, "stringValue"), "stringByTrimmingWhitespace");
    objj_msgSend(self._createBtn, "setEnabled:", objj_msgSend(projName, "length") > 0 && objj_msgSend(projDir, "length") > 0);
}

)]);
}function getUserHome()
{
    return process.env[process.platform == 'win32' ? 'USERPROFILE' : 'HOME'];
}
function createDefaultProject(projName, projectDirectory, callback)
{
    var source = PATH.resolve("./DefaultCWTProject");
    FS.exists(projectDirectory,     function(exists)
    {
        if (!exists)
        {
            FS.mkdir(projectDirectory,             function(err)
            {
                if (!err)
                {
                    NCP(source, projectDirectory,                     function()
                    {
                        var defaultInfo = '{\n\t"name" : "' + projName + '",\n\t"version" : "0.0.1",\n\t"CPApplicationDelegateClass" : "AppController"\n}\n';
                        FS.writeFile(PATH.join(projectDirectory, "Info.json"), defaultInfo,                         function(err)
                        {
                            if (callback)
                                callback(true);
                        });
                    });
                }            });
        }        else
        {
            if (callback)
                callback(false, "Destination directory already exists.");
        }    });
}
{var the_class = objj_allocateClassPair(CPSplitView, "CibEditorView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_canvasView"), new objj_ivar("_objectsView")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithFrame:"), function $CibEditorView__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CibEditorView").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        objj_msgSend(self, "setOrientation:", 1);
        objj_msgSend(self, "setAutoresizingMask:", CPViewWidthSizable | CPViewHeightSizable);
        self._canvasView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", CGRectMake(0, 0, CGRectGetWidth(aFrame) - 600, CGRectGetHeight(aFrame) * 0.7));
        objj_msgSend(self._canvasView, "setAutoresizingMask:", CPViewHeightSizable);
        objj_msgSend(self._canvasView, "addCSSStyle:", "canvas");
        self._objectsView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", CGRectMake(0, 500, CGRectGetWidth(aFrame), CGRectGetHeight(aFrame) * 0.3));
        objj_msgSend(self._objectsView, "setBackgroundColor:", objj_msgSend(CPColor, "whiteColor"));
        objj_msgSend(self, "addSubview:", self._canvasView);
        objj_msgSend(self, "addSubview:", self._objectsView);
    }
    return self;
}

)]);
}{var the_class = objj_allocateClassPair(CPView, "InspectorView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_tabControl"), new objj_ivar("_attributesView"), new objj_ivar("_sizeView"), new objj_ivar("_connectionsView"), new objj_ivar("_classView")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithFrame:"), function $InspectorView__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("InspectorView").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._tabControl = objj_msgSend(objj_msgSend(CPSegmentedControl, "alloc"), "initWithFrame:", CGRectMake(0, 1, aFrame.size.width + 1, 28));
        objj_msgSend(self._tabControl, "setSegmentCount:", 4);
        objj_msgSend(self._tabControl, "setSegmentStyle:", CPSegmentStyleSquare);
        objj_msgSend(self._tabControl, "setLabel:forSegment:", "Attributes", 0);
        objj_msgSend(self._tabControl, "setWidth:forSegment:", 80, 0);
        objj_msgSend(self._tabControl, "setLabel:forSegment:", "Size", 1);
        objj_msgSend(self._tabControl, "setWidth:forSegment:", 50, 1);
        objj_msgSend(self._tabControl, "setLabel:forSegment:", "Connections", 2);
        objj_msgSend(self._tabControl, "setWidth:forSegment:", aFrame.size.width - 200, 2);
        objj_msgSend(self._tabControl, "setLabel:forSegment:", "Class", 3);
        objj_msgSend(self._tabControl, "setSelected:forSegment:", YES, 0);
        objj_msgSend(self._tabControl, "setTarget:", self);
        objj_msgSend(self._tabControl, "setAction:", sel_getUid("onTabChange:"));
        objj_msgSend(self, "addSubview:", self._tabControl);
        var frame = CGRectMake(0, 28, aFrame.size.width, aFrame.size.height - 28),
            mask = CPViewWidthSizable | CPViewHeightSizable;
        self._attributesView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", frame);
        objj_msgSend(self._attributesView, "setAutoresizingMask:", mask);
        self._sizeView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", frame);
        objj_msgSend(self._sizeView, "setAutoresizingMask:", mask);
        objj_msgSend(self, "addSubview:", self._sizeView);
        self._connectionsView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", frame);
        objj_msgSend(self._connectionsView, "setAutoresizingMask:", mask);
        objj_msgSend(self, "addSubview:", self._connectionsView);
        self._classView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", frame);
        objj_msgSend(self._classView, "setAutoresizingMask:", mask);
        objj_msgSend(self, "addSubview:", self._classView);
        objj_msgSend(self, "addSubview:", self._attributesView);
        objj_msgSend(self, "setBackgroundColor:", objj_msgSend(CPColor, "colorWithHexString:", "dfedfa"));
    }
    return self;
}

), new objj_method(sel_getUid("onTabChange:"), function $InspectorView__onTabChange_(self, _cmd, sender)
{
    var selectedTab = objj_msgSend(objj_msgSend(sender, "selectedSegments"), "firstIndex");
    objj_msgSend(self._attributesView, "setHidden:", YES);
    objj_msgSend(self._sizeView, "setHidden:", YES);
    objj_msgSend(self._connectionsView, "setHidden:", YES);
    objj_msgSend(self._classView, "setHidden:", YES);
    switch(selectedTab) {
        case 0:
            objj_msgSend(self._attributesView, "setHidden:", NO);
            break;
        case 1:
            objj_msgSend(self._sizeView, "setHidden:", NO);
            break;
        case 2:
            objj_msgSend(self._connectionsView, "setHidden:", NO);
            break;
        case 3:
            objj_msgSend(self._classView, "setHidden:", NO);
            break;
    }
}

)]);
}{var the_class = objj_allocateClassPair(CPTextField, "CPSearchField"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithFrame:"), function $CPSearchField__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSearchField").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._placeholder = "Search";
        self._bezeled = YES;
        self._editable = YES;
        self._bezelStyle = CPRoundedBezelStyle;
    }
    return self;
}

), new objj_method(sel_getUid("_setupInputControls"), function $CPSearchField___setupInputControls(self, _cmd)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSearchField").super_class }, "_setupInputControls");
    self._DOMElement.addClass("search");
    self._input.addClass("cpsearchfield-input");
    var clearSearch = ($("<div></div>")).addClass("cpsearchfield-cancel");
    clearSearch.css("top", (self._frame.size.height - 22) / 2.0);
    clearSearch.hide();
    clearSearch.bind({mousedown:     function(evt)
    {
        ($(this)).addClass("pressed");
        objj_msgSend(CPDOMEventDispatcher, "dispatchDOMMouseEvent:toView:", evt, self);
    }, click:     function(evt)
    {
        ($(this)).removeClass("pressed");
        objj_msgSend(self, "setStringValue:", "");
        setTimeout(        function()
        {
            self._input.focus();
        }, 50);
        ($(this)).hide();
        objj_msgSend(CPDOMEventDispatcher, "dispatchDOMMouseEvent:toView:", evt, self);
    }});
    self._DOMElement.append(clearSearch);
    var searchimg = ($("<div></div>")).addClass("cpsearchfield-image");
    searchimg.css("top", (self._frame.size.height - 22) / 2.0);
    self._DOMElement.append(searchimg);
}

), new objj_method(sel_getUid("_updateControlInputs"), function $CPSearchField___updateControlInputs(self, _cmd)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSearchField").super_class }, "_updateControlInputs");
    self._input.css("width", self._frame.size.width - 28);
}

), new objj_method(sel_getUid("_textDidChange"), function $CPSearchField___textDidChange(self, _cmd)
{
    objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CPSearchField").super_class }, "_textDidChange");
    if (objj_msgSend(objj_msgSend(self, "stringValue"), "stringByTrimmingWhitespace") === "")
        (self._DOMElement.children(".cpsearchfield-cancel")).hide();
    else
        (self._DOMElement.children(".cpsearchfield-cancel")).show();
}

)]);
}{var the_class = objj_allocateClassPair(CPCollectionViewItem, "WidgetItem"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_label"), new objj_ivar("_description"), new objj_ivar("_image"), new objj_ivar("_prototype")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("setRepresentedObject:"), function $WidgetItem__setRepresentedObject_(self, _cmd, data)
{
    if (!self._label)
    {
        objj_msgSend(self._view, "addCSSStyle:", "widgetItem");
        self._label = objj_msgSend(CPTextField, "labelWithString:", "");
        objj_msgSend(self._label, "setFont:", objj_msgSend(CPFont, "boldSystemFontOfSize:", 13.0));
        objj_msgSend(self._view, "addSubview:", self._label);
    }
    if (!self._description)
    {
        self._description = objj_msgSend(CPTextField, "labelWithString:", "");
        objj_msgSend(self._description, "setFont:", objj_msgSend(CPFont, "fontWithName:size:italic:", "Arial,sans-serif", 12.0, YES));
        objj_msgSend(self._description, "setTextColor:", objj_msgSend(CPColor, "colorWithWhite:alpha:", 0.46, 1.0));
        objj_msgSend(self._description, "setLineBreakMode:", CPLineBreakByWordWrapping);
        objj_msgSend(self._view, "addSubview:", self._description);
    }
    if (!self._image)
    {
        self._image = objj_msgSend(objj_msgSend(CPImageView, "alloc"), "init");
        objj_msgSend(self._view, "addSubview:", self._image);
    }
    self._prototype = data["itemPrototype"];
    objj_msgSend(self._image, "setImage:", data["image"]);
    objj_msgSend(self._image, "setFrame:", data["imageFrame"]);
    objj_msgSend(self._label, "setStringValue:", data["label"]);
    objj_msgSend(self._label, "sizeToFit");
    objj_msgSend(self._label, "setFrameOrigin:", CGPointMake(80, 8));
    objj_msgSend(self._description, "setStringValue:", data["description"]);
    objj_msgSend(self._description, "sizeToFitInWidth:", 200);
    objj_msgSend(self._description, "setFrameOrigin:", CGPointMake(80, CGRectGetMaxY(self._label._frame) + 3));
}

)]);
}{var the_class = objj_allocateClassPair(CPView, "WidgetsView"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_widgetList"), new objj_ivar("_searchBar"), new objj_ivar("_searchField")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithFrame:"), function $WidgetsView__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("WidgetsView").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        self._searchBar = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", CGRectMake(0, 0, aFrame.size.width, 50));
        objj_msgSend(self._searchBar, "addCSSStyle:", "widgetSearchBar");
        self._searchField = objj_msgSend(objj_msgSend(CPSearchField, "alloc"), "initWithFrame:", CGRectMake(12, 12, aFrame.size.width - 24, 26));
        objj_msgSend(self._searchField, "setPlaceholder:", "Search Components");
        objj_msgSend(self._searchField, "setFont:", objj_msgSend(CPFont, "systemFontOfSize:", 14.0));
        objj_msgSend(self._searchBar, "addSubview:", self._searchField);
        self._widgetList = objj_msgSend(objj_msgSend(CPCollectionView, "alloc"), "initWithFrame:", CGRectMake(0, 50, aFrame.size.width, aFrame.size.height - 50));
        objj_msgSend(self._widgetList, "setAutoresizingMask:", CPViewWidthSizable | CPViewHeightSizable);
        objj_msgSend(self._widgetList, "setMaximumNumberOfColumns:", 1);
        objj_msgSend(self._widgetList, "setVerticalMargin:", 0);
        objj_msgSend(self._widgetList, "setHorizontalMargin:", 0);
        objj_msgSend(self._widgetList, "setMinItemSize:", CGSizeMake(aFrame.size.width, 60));
        var widgetItem = objj_msgSend(objj_msgSend(WidgetItem, "alloc"), "init");
        objj_msgSend(widgetItem, "setView:", objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", CGRectMake(0, 0, aFrame.size.width, 60)));
        objj_msgSend(self._widgetList, "setItemPrototype:", widgetItem);
        objj_msgSend(self._widgetList, "setContent:", [{label: "Push Button", description: "Executes an action when clicked.", itemPrototype: objj_msgSend(CPButton, "buttonWithTitle:", "Button"), imageFrame: CGRectMake(3, 8, 70, 38), image: objj_msgSend(CPImage, "imageNamed:", "buttonWidget.png")}]);
        objj_msgSend(self, "addSubview:", self._searchBar);
        objj_msgSend(self, "addSubview:", self._widgetList);
    }
    return self;
}

)]);
}{var the_class = objj_allocateClassPair(CPSplitView, "CibInspectorView"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithFrame:"), function $CibInspectorView__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("CibInspectorView").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        objj_msgSend(self, "setOrientation:", 1);
        objj_msgSend(self, "setAutoresizingMask:", CPViewHeightSizable | CPViewWidthSizable);
        var widgetsView = objj_msgSend(objj_msgSend(WidgetsView, "alloc"), "initWithFrame:", CGRectMake(0, 0, 300, CGRectGetHeight(aFrame) / 2.0));
        objj_msgSend(widgetsView, "setAutoresizingMask:", CPViewHeightSizable);
        var inspectorView = objj_msgSend(objj_msgSend(InspectorView, "alloc"), "initWithFrame:", CGRectMake(0, CGRectGetHeight(aFrame) / 2.0, 300, CGRectGetHeight(aFrame) / 2.0));
        objj_msgSend(inspectorView, "setAutoresizingMask:", CPViewHeightSizable);
        objj_msgSend(self, "addSubview:", widgetsView);
        objj_msgSend(self, "addSubview:", inspectorView);
    }
    return self;
}

)]);
}var AceEditorFileChangeNotification = "AceEditorFileChangeNotification",
    AceEditorMarkFileUnsavedNotification = "AceEditorMarkFileUnsavedNotification";
{var the_class = objj_allocateClassPair(CPView, "AceEditor"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("editor"), new objj_ivar("_delegate"), new objj_ivar("_activeFile")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("delegate"), function $AceEditor__delegate(self, _cmd)
{
    return self._delegate;
}

), new objj_method(sel_getUid("_setDelegate:"), function $AceEditor___setDelegate_(self, _cmd, newValue)
{
    self._delegate = newValue;
}

), new objj_method(sel_getUid("activeFile"), function $AceEditor__activeFile(self, _cmd)
{
    return self._activeFile;
}

), new objj_method(sel_getUid("_setActiveFile:"), function $AceEditor___setActiveFile_(self, _cmd, newValue)
{
    self._activeFile = newValue;
}

), new objj_method(sel_getUid("initWithFrame:"), function $AceEditor__initWithFrame_(self, _cmd, aFrame)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("AceEditor").super_class }, "initWithFrame:", aFrame);
    if (self)
    {
        objj_msgSend(self, "setAutoresizingMask:", CPViewWidthSizable | CPViewHeightSizable);
        self._DOMElement.attr('id', "ace");
        self._DOMElement.css("fontSize", 14);
        self.editor = nil;
        self._delegate = nil;
        self._activeFile = nil;
    }
    return self;
}

), new objj_method(sel_getUid("setDelegate:"), function $AceEditor__setDelegate_(self, _cmd, aDelegate)
{
    if (self._delegate == aDelegate)
        return;
    var defaultCenter = objj_msgSend(CPNotificationCenter, "defaultCenter");
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("aceEditorTextDidChange:")))
    {
        objj_msgSend(defaultCenter, "removeObserver:name:object:", self._delegate, AceEditorFileChangeNotification, self);
    }
    self._delegate = aDelegate;
    if (objj_msgSend(self._delegate, "respondsToSelector:", sel_getUid("aceEditorTextDidChange:")))
    {
        objj_msgSend(defaultCenter, "addObserver:selector:name:object:", self._delegate, sel_getUid("aceEditorTextDidChange:"), AceEditorFileChangeNotification, self);
    }
}

), new objj_method(sel_getUid("mouseDown:"), function $AceEditor__mouseDown_(self, _cmd, theEvent)
{
    objj_msgSend(objj_msgSend(self, "window"), "makeFirstResponder:", self);
}

), new objj_method(sel_getUid("acceptsFirstResponder"), function $AceEditor__acceptsFirstResponder(self, _cmd)
{
    return YES;
}

), new objj_method(sel_getUid("text"), function $AceEditor__text(self, _cmd)
{
    if (self.editor)
        return self.editor.getValue();
    return "";
}

), new objj_method(sel_getUid("swallowsKey"), function $AceEditor__swallowsKey(self, _cmd)
{
    return YES;
}

), new objj_method(sel_getUid("setFile:"), function $AceEditor__setFile_(self, _cmd, fileInfo)
{
    if (self.editor)
    {
        self._activeFile = fileInfo;
        var fileName = objj_msgSend(fileInfo, "objectForKey:", "name");
        if (objj_msgSend(fileName, "hasSuffix:", ".j"))
            (self.editor.getSession()).setMode("ace/mode/objectivej");
        else if (objj_msgSend(fileName, "hasSuffix:", ".js") || objj_msgSend(fileName, "hasSuffix:", ".json"))
            (self.editor.getSession()).setMode("ace/mode/javascript");
        else if (objj_msgSend(fileName, "hasSuffix:", ".css"))
            (self.editor.getSession()).setMode("ace/mode/css");
        else if (objj_msgSend(fileName, "hasSuffix:", ".html"))
            (self.editor.getSession()).setMode("ace/mode/html");
        self.editor.setValue(objj_msgSend(self._activeFile, "objectForKey:", "contents"));
        self.editor.gotoLine(0);
    }
}

), new objj_method(sel_getUid("setup"), function $AceEditor__setup(self, _cmd)
{
    if (!self.editor)
    {
        self.editor = ace.edit("ace");
        self.editor.setTheme("ace/theme/tomorrow_night_bright");
        (self.editor.getSession()).setUseWorker(false);
        (self.editor.getSession()).setMode("ace/mode/objectivej");
        (self.editor.getSession()).on('change',         function(e)
        {
            var newText = objj_msgSend(self, "text");
            var oldText = objj_msgSend(self._activeFile, "objectForKey:", "contents");
            if (!objj_msgSend(oldText, "isEqualToString:", newText))
            {
                objj_msgSend(self._activeFile, "setObject:forKey:", objj_msgSend(self, "text"), "contents");
                var unsaved = objj_msgSend(self._activeFile, "objectForKey:", "unsaved");
                objj_msgSend(self._activeFile, "setObject:forKey:", YES, "unsaved");
                if (!unsaved)
                {
                    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", AceEditorMarkFileUnsavedNotification, self);
                }                objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "postNotificationName:object:", AceEditorFileChangeNotification, self);
            }        });
        self.editor.setShowPrintMargin(false);
    }
}

)]);
}var CompileAndRunToolbarItemIdentifier = "CompileAndRunToolbarItemIdentifier",
    DebugReleasePopupToolbarItemIdentifier = "DebugReleasePopupToolbarItemIdentifier",
    PanelVisibleControlToolbarItemIdentifier = "PanelVisibleControlToolbarItemIdentifier";
{var the_class = objj_allocateClassPair(CPObject, "AppController"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("outlineView"), new objj_ivar("splitView"), new objj_ivar("newFileDialog"), new objj_ivar("newProjectDialog"), new objj_ivar("fileViewerController"), new objj_ivar("cibView"), new objj_ivar("cibInspectorView"), new objj_ivar("aceEditor"), new objj_ivar("_testWindow"), new objj_ivar("_activeContextMode"), new objj_ivar("lastCenterSplitPos"), new objj_ivar("_currentProject")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("applicationDidFinishLaunching:"), function $AppController__applicationDidFinishLaunching_(self, _cmd, aNotification)
{
    var theWindow = objj_msgSend(objj_msgSend(CPWindow, "alloc"), "initWithContentRect:styleMask:", CGRectMakeZero(), CPBorderlessBridgeWindowMask),
        contentView = objj_msgSend(theWindow, "contentView");
    var toolbar = objj_msgSend(objj_msgSend(CPToolbar, "alloc"), "initWithIdentifier:", "ToolBar");
    objj_msgSend(toolbar, "setDelegate:", self);
    objj_msgSend(theWindow, "setToolbar:", toolbar);
    var bounds = objj_msgSend(contentView, "bounds");
    self.splitView = objj_msgSend(objj_msgSend(CPSplitView, "alloc"), "initWithFrame:", bounds);
    objj_msgSend(self.splitView, "setAutoresizingMask:", CPViewWidthSizable | CPViewHeightSizable);
    self.outlineView = objj_msgSend(objj_msgSend(CPOutlineView, "alloc"), "initWithFrame:", CGRectMake(0, 0, 240, CGRectGetHeight(objj_msgSend(contentView, "bounds"))));
    objj_msgSend(self.outlineView, "setHasHeader:", NO);
    objj_msgSend(self.outlineView, "setAutoresizingMask:", CPViewHeightSizable);
    self.fileViewerController = objj_msgSend(objj_msgSend(FileViewerController, "alloc"), "init");
    objj_msgSend(self.outlineView, "setDataSource:", self.fileViewerController);
    objj_msgSend(self.outlineView, "setDelegate:", self);
    var column1 = objj_msgSend(objj_msgSend(CPTableColumn, "alloc"), "initWithIdentifier:", "COL1");
    objj_msgSend(column1, "setWidth:", 200);
    objj_msgSend(self.outlineView, "addTableColumn:", column1);
    objj_msgSend(self.outlineView, "setEmptyText:", "");
    objj_msgSend(self.outlineView, "setBackgroundColor:", objj_msgSend(CPColor, "colorWithHexString:", "ebedf1"));
    self._activeContextMode = 2;
    var centerView = objj_msgSend(objj_msgSend(CPView, "alloc"), "initWithFrame:", CGRectMake(240, 0, CGRectGetWidth(bounds) - 540, CGRectGetHeight(bounds)));
    objj_msgSend(centerView, "setBackgroundColor:", objj_msgSend(CPColor, "colorWithWhite:alpha:", 0.87, 1.0));
    objj_msgSend(centerView, "setAutoresizingMask:", CPViewWidthSizable);
    self.cibView = objj_msgSend(objj_msgSend(CibEditorView, "alloc"), "initWithFrame:", objj_msgSend(centerView, "bounds"));
    objj_msgSend(self.cibView, "setHidden:", YES);
    objj_msgSend(centerView, "addSubview:", self.cibView);
    self.aceEditor = objj_msgSend(objj_msgSend(AceEditor, "alloc"), "initWithFrame:", objj_msgSend(centerView, "bounds"));
    objj_msgSend(self.aceEditor, "setHidden:", YES);
    objj_msgSend(centerView, "addSubview:", self.aceEditor);
    objj_msgSend(self.splitView, "fixDivider:atIndex:", YES, 0);
    objj_msgSend(self.splitView, "fixDivider:atIndex:", YES, 1);
    objj_msgSend(self.splitView, "setDividerThickness:", 0);
    var rightView = objj_msgSend(objj_msgSend(CPSplitView, "alloc"), "initWithFrame:", CGRectMake(CGRectGetWidth(bounds) - 300, 0, 300, CGRectGetHeight(bounds)));
    self.cibInspectorView = objj_msgSend(objj_msgSend(CibInspectorView, "alloc"), "initWithFrame:", objj_msgSend(rightView, "bounds"));
    objj_msgSend(self.cibInspectorView, "setHidden:", YES);
    objj_msgSend(rightView, "addSubview:", self.cibInspectorView);
    objj_msgSend(self.splitView, "addSubview:", self.outlineView);
    objj_msgSend(self.splitView, "addSubview:", centerView);
    objj_msgSend(self.splitView, "addSubview:", rightView);
    objj_msgSend(contentView, "addSubview:", self.splitView);
    objj_msgSend(self, "setupMenuBar");
    _currentProjectId = Nil;
    objj_msgSend(theWindow, "orderFront:", self);
    objj_msgSend(self.aceEditor, "setup");
    self._testWindow = nil;
    objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "addObserver:selector:name:object:", self, sel_getUid("fileMarkedAsUnsaved:"), AceEditorMarkFileUnsavedNotification, self.aceEditor);
}

), new objj_method(sel_getUid("fileMarkedAsUnsaved:"), function $AppController__fileMarkedAsUnsaved_(self, _cmd, aNotification)
{
    var sel = objj_msgSend(self.outlineView, "selectedRow");
    var item = objj_msgSend(self.outlineView, "itemAtRow:", sel);
    if (objj_msgSend(item, "objectForKey:", "isLoaded"))
        objj_msgSend(self.outlineView, "reloadData");
}

), new objj_method(sel_getUid("toolbarItemIdentifiers:"), function $AppController__toolbarItemIdentifiers_(self, _cmd, aToolbar)
{
    return [DebugReleasePopupToolbarItemIdentifier, CPToolbarFlexibleSpaceItemIdentifier, CompileAndRunToolbarItemIdentifier, CPToolbarFlexibleSpaceItemIdentifier, CPToolbarFlexibleSpaceItemIdentifier, CPToolbarFlexibleSpaceItemIdentifier, PanelVisibleControlToolbarItemIdentifier];
}

), new objj_method(sel_getUid("toolbar:itemForItemIdentifier:"), function $AppController__toolbar_itemForItemIdentifier_(self, _cmd, aToolbar, anItemIdentifier)
{
    var toolbarItem = objj_msgSend(objj_msgSend(CPToolbarItem, "alloc"), "initWithItemIdentifier:", anItemIdentifier);
    if (anItemIdentifier === CompileAndRunToolbarItemIdentifier)
    {
        objj_msgSend(toolbarItem, "setImage:", objj_msgSend(CPImage, "imageNamed:", "build.png"));
        objj_msgSend(toolbarItem, "setAlternateImage:", objj_msgSend(CPImage, "imageNamed:", "build_highlighted.png"));
        objj_msgSend(toolbarItem, "setTarget:", self);
        objj_msgSend(toolbarItem, "setAction:", sel_getUid("buildAndRun:"));
        objj_msgSend(toolbarItem, "setLabel:", "Run");
    }
    else if (anItemIdentifier === DebugReleasePopupToolbarItemIdentifier)
    {
        var popup = objj_msgSend(objj_msgSend(CPPopUpButton, "alloc"), "initWithFrame:", CGRectMake(0, 0, 150, 25));
        objj_msgSend(popup, "addItemWithTitle:", "Debug");
        objj_msgSend(popup, "addItemWithTitle:", "Release");
        objj_msgSend(popup, "setBezelStyle:", CPTexturedRoundedBezelStyle);
        objj_msgSend(toolbarItem, "setView:", popup);
        objj_msgSend(toolbarItem, "setLabel:", "Configuration");
    }
    else if (anItemIdentifier === PanelVisibleControlToolbarItemIdentifier)
    {
        var seg = objj_msgSend(objj_msgSend(CPSegmentedControl, "alloc"), "initWithFrame:", CGRectMake(0, 0, 115, 25));
        objj_msgSend(seg, "setImagePosition:", CPImageOnly);
        objj_msgSend(seg, "setSegmentStyle:", CPSegmentStyleTexturedRounded);
        objj_msgSend(seg, "setTrackingStyle:", CPSegmentSwitchTrackingSelectAny);
        objj_msgSend(seg, "setTarget:", self);
        objj_msgSend(seg, "setAction:", sel_getUid("onToggleVisiblePanels:"));
        objj_msgSend(seg, "setSegmentCount:", 3);
        objj_msgSend(seg, "setImage:forSegment:", objj_msgSend(CPImage, "imageNamed:", "leftPanel.png"), 0);
        objj_msgSend(seg, "setImage:forSegment:inState:", objj_msgSend(CPImage, "imageNamed:", "leftPanel_highlighted.png"), 0, CPControlSelectedState);
        objj_msgSend(seg, "setImage:forSegment:", objj_msgSend(CPImage, "imageNamed:", "bottomPanel.png"), 1);
        objj_msgSend(seg, "setImage:forSegment:inState:", objj_msgSend(CPImage, "imageNamed:", "bottomPanel_highlighted.png"), 1, CPControlSelectedState);
        objj_msgSend(seg, "setImage:forSegment:", objj_msgSend(CPImage, "imageNamed:", "rightPanel.png"), 2);
        objj_msgSend(seg, "setImage:forSegment:inState:", objj_msgSend(CPImage, "imageNamed:", "rightPanel_highlighted.png"), 2, CPControlSelectedState);
        objj_msgSend(toolbarItem, "setView:", seg);
        objj_msgSend(seg, "setSelected:forSegment:", YES, 0);
        objj_msgSend(seg, "setSelected:forSegment:", YES, 1);
        objj_msgSend(seg, "setSelected:forSegment:", YES, 2);
        objj_msgSend(toolbarItem, "setLabel:", "View");
    }
    return toolbarItem;
}

), new objj_method(sel_getUid("buildAndRun:"), function $AppController__buildAndRun_(self, _cmd, sender)
{
    if (self._currentProject)
    {
        if (self._testWindow)
            self._testWindow.close();
        objj_msgSend(self, "saveAllFiles");
        var appDir = objj_msgSend(self._currentProject, "objectForKey:", "directory");
        BUILD.buildClientExecutable(appDir, appDir, true);
        self._testWindow = GUI.Window.open('file://' + appDir + "/index.html", {position: 'center', width: 800, height: 600, title: objj_msgSend(self._currentProject, "objectForKey:", "name")});
        var loadOnce = false;
        self._testWindow.on("loaded",         function()
        {
            if (!loadOnce)
                self._testWindow.reload();
            loadOnce = true;
        });
    }
}

), new objj_method(sel_getUid("onToggleVisiblePanels:"), function $AppController__onToggleVisiblePanels_(self, _cmd, sender)
{
    var index = objj_msgSend(sender, "changedSegment"),
        bounds = objj_msgSend(objj_msgSend(self.splitView, "superview"), "bounds"),
        selected = objj_msgSend(sender, "isSelectedForSegment:", index);
    if (index == 0)
    {
        var x = objj_msgSend(self.splitView, "positionOfDividerAtIndex:", 0);
        if (x > 0 && !selected)
        {
            objj_msgSend(self.splitView, "setPosition:ofDividerAtIndex:", 0, 0);
        }
        else if (x < 240 && selected)
        {
            objj_msgSend(self.splitView, "setPosition:ofDividerAtIndex:", 240, 0);
        }
    }
    if (index === 1)
    {
        var y = objj_msgSend(self.cibView, "positionOfDividerAtIndex:", 0);
        if (y >= self.lastCenterSplitPos && selected)
        {
            objj_msgSend(self.cibView, "fixDivider:atIndex:", NO, 0);
            objj_msgSend(self.cibView, "setPosition:ofDividerAtIndex:", self.lastCenterSplitPos, 0);
        }
        else if (y <= CGRectGetHeight(bounds) && !selected)
        {
            self.lastCenterSplitPos = y;
            objj_msgSend(self.cibView, "fixDivider:atIndex:", YES, 0);
            objj_msgSend(self.cibView, "setPosition:ofDividerAtIndex:", CGRectGetHeight(bounds), 0);
        }
    }
    if (index == 2)
    {
        var x = objj_msgSend(self.splitView, "positionOfDividerAtIndex:", 1);
        if (x >= CGRectGetWidth(bounds) - 300 && selected)
        {
            objj_msgSend(self.splitView, "setPosition:ofDividerAtIndex:", CGRectGetWidth(bounds) - 300, 1);
        }
        else if (x <= CGRectGetWidth(bounds) && !selected)
        {
            objj_msgSend(self.splitView, "setPosition:ofDividerAtIndex:", CGRectGetWidth(bounds), 1);
        }
    }
}

), new objj_method(sel_getUid("outlineViewSelectionDidChange:"), function $AppController__outlineViewSelectionDidChange_(self, _cmd, aNotification)
{
    var sel = objj_msgSend(self.outlineView, "selectedRow");
    var item = objj_msgSend(self.outlineView, "itemAtRow:", sel);
    var isDir = objj_msgSend(item, "objectForKey:", "isDirectory");
    if (!isDir)
    {
        var filename = objj_msgSend(item, "objectForKey:", "name"),
            filepath = objj_msgSend(item, "objectForKey:", "path");
        var result = readFile(filepath);
        if (result)
        {
            var stime = result.time;
            var fileInfo = objj_msgSend(self.fileViewerController, "infoForFile:", filepath);
            var ftime = objj_msgSend(fileInfo, "objectForKey:", "timestamp");
            if (stime > ftime)
            {
                objj_msgSend(fileInfo, "setObject:forKey:", result.contents, "contents");
                objj_msgSend(fileInfo, "setObject:forKey:", result.time, "timestamp");
                objj_msgSend(fileInfo, "setObject:forKey:", YES, "isLoaded");
            }
            if (objj_msgSend(filename, "hasSuffix:", ".cib"))
            {
                objj_msgSend(self, "switchContext:", 1);
            }
            else
            {
                objj_msgSend(self, "switchContext:", 0);
                objj_msgSend(self.aceEditor, "setFile:", fileInfo);
                objj_msgSend(fileInfo, "setObject:forKey:", NO, "unsaved");
                objj_msgSend(self.outlineView, "reloadData");
            }
        }
    }
}

), new objj_method(sel_getUid("saveAllFiles"), function $AppController__saveAllFiles(self, _cmd)
{
    var allFilePaths = objj_msgSend(self.fileViewerController, "allFiles"),
        count = objj_msgSend(allFilePaths, "count"),
        i = 0;
    for (; i < count; i++)
    {
        var filepath = objj_msgSend(allFilePaths, "objectAtIndex:", i);
        var fileInfo = objj_msgSend(self.fileViewerController, "infoForFile:", filepath);
        if (objj_msgSend(fileInfo, "objectForKey:", "unsaved"))
        {
            var result = saveFile(filepath, objj_msgSend(fileInfo, "objectForKey:", "contents"));
            if (result)
            {
                objj_msgSend(fileInfo, "setObject:forKey:", result.time, "timestamp");
                objj_msgSend(fileInfo, "setObject:forKey:", NO, "unsaved");
            }
        }
    }
    objj_msgSend(self.outlineView, "reloadData");
}

), new objj_method(sel_getUid("onSaveFile:"), function $AppController__onSaveFile_(self, _cmd, sender)
{
    var sel = objj_msgSend(self.outlineView, "selectedRow");
    var item = objj_msgSend(self.outlineView, "itemAtRow:", sel);
    var isDir = objj_msgSend(item, "objectForKey:", "isDirectory");
    if (!isDir)
    {
        var filename = objj_msgSend(item, "objectForKey:", "name"),
            filepath = objj_msgSend(item, "objectForKey:", "path");
        var result = saveFile(filepath, objj_msgSend(item, "objectForKey:", "contents"));
        if (result)
        {
            objj_msgSend(item, "setObject:forKey:", result.time, "timestamp");
            objj_msgSend(item, "setObject:forKey:", NO, "unsaved");
            objj_msgSend(self.outlineView, "reloadData");
        }
    }
}

), new objj_method(sel_getUid("onOpenProject:"), function $AppController__onOpenProject_(self, _cmd, sender)
{
    setTimeout(    function()
    {
        var chooser = $("#fileopen");
        chooser.change(        function(evt)
        {
            var file = null;
            if (evt.target.files.length > 0)
                file = evt.target.files[0];
            if (file)
            {
                var reader = new FileReader();
                var directory = PATH.dirname(($(this)).val());
                reader.onload =                 function(e)
                {
                    var result = reader.result;
                    try {
                        var projInfo = JSON.parse(result);
                        if (projInfo.name)
                        {
                            setTimeout(                            function()
                            {
                                objj_msgSend(self, "doOpenProject:", objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", projInfo.name, "name", directory, "directory"));
                                objj_msgSend(objj_msgSend(CPRunLoop, "currentRunLoop"), "limitDateForMode:", CPDefaultRunLoopMode);
                            }, 500);
                        }                    }
                    catch(err) {
                    }
                };
                reader.readAsText(file);
            }        });
        chooser.trigger('click');
    }, 160);
}

), new objj_method(sel_getUid("doOpenProject:"), function $AppController__doOpenProject_(self, _cmd, projectToOpen)
{
    self._currentProject = projectToOpen;
    var projdir = objj_msgSend(self._currentProject, "objectForKey:", "directory");
    var theFiles = getFilesInDirectory(projdir);
    if (theFiles)
    {
        objj_msgSend(self.fileViewerController, "setProjectName:", objj_msgSend(self._currentProject, "objectForKey:", "name"));
        objj_msgSend(self.fileViewerController, "setData:", theFiles);
        objj_msgSend(self.outlineView, "reloadData");
        objj_msgSend(self.outlineView, "expandItem:", objj_msgSend(self.outlineView, "itemAtRow:", 0));
        window.document.title = "Atlas - " + objj_msgSend(self._currentProject, "objectForKey:", "name");
    }
}

), new objj_method(sel_getUid("setupMenuBar"), function $AppController__setupMenuBar(self, _cmd)
{
    objj_msgSend(CPMenu, "setMenuBarVisible:", YES);
    var fileMenu = objj_msgSend(CPMenu, "menuWithTitle:", "File");
    var newMenuItem = objj_msgSend(CPMenuItem, "menuItemWithTitle:", "New...");
    var newMenu = objj_msgSend(CPMenu, "menuWithTitle:", "newItem");
    var newFile = objj_msgSend(CPMenuItem, "menuItemWithTitle:", "New File...");
    objj_msgSend(newFile, "setTarget:", self);
    objj_msgSend(newFile, "setAction:", sel_getUid("newFile:"));
    var newProject = objj_msgSend(CPMenuItem, "menuItemWithTitle:", "New Project...");
    objj_msgSend(newProject, "setTarget:", self);
    objj_msgSend(newProject, "setAction:", sel_getUid("newProject:"));
    objj_msgSend(newMenu, "addItem:", newFile);
    objj_msgSend(newMenu, "addItem:", newProject);
    objj_msgSend(newMenuItem, "setSubmenu:", newMenu);
    objj_msgSend(fileMenu, "addItem:", newMenuItem);
    var openFile = objj_msgSend(CPMenuItem, "menuItemWithTitle:", "Open Project...");
    ($("body")).append($("<input type='file' id='fileopen'></input>"));
    objj_msgSend(openFile, "setTarget:", self);
    objj_msgSend(openFile, "setAction:", sel_getUid("onOpenProject:"));
    objj_msgSend(fileMenu, "addItem:", openFile);
    objj_msgSend(fileMenu, "addSeparator");
    var saveItem = objj_msgSend(CPMenuItem, "menuItemWithTitle:", "Save");
    objj_msgSend(saveItem, "setTarget:", self);
    objj_msgSend(saveItem, "setAction:", sel_getUid("onSaveFile:"));
    objj_msgSend(fileMenu, "addItem:", saveItem);
    objj_msgSend(fileMenu, "addItem:", objj_msgSend(CPMenuItem, "menuItemWithTitle:", "Save As..."));
    objj_msgSend(fileMenu, "addSeparator");
    objj_msgSend(fileMenu, "addItem:", objj_msgSend(CPMenuItem, "menuItemWithTitle:", "Close File"));
    objj_msgSend(objj_msgSend(CPApp, "mainMenu"), "addItem:", fileMenu);
    var editMenu = objj_msgSend(CPMenu, "menuWithTitle:", "Edit");
    objj_msgSend(editMenu, "addItem:", objj_msgSend(CPMenuItem, "menuItemWithTitle:", "Undo"));
    objj_msgSend(editMenu, "addItem:", objj_msgSend(CPMenuItem, "menuItemWithTitle:", "Redo"));
    objj_msgSend(editMenu, "addSeparator");
    objj_msgSend(editMenu, "addItem:", objj_msgSend(CPMenuItem, "menuItemWithTitle:", "Copy"));
    objj_msgSend(editMenu, "addItem:", objj_msgSend(CPMenuItem, "menuItemWithTitle:", "Cut"));
    objj_msgSend(editMenu, "addItem:", objj_msgSend(CPMenuItem, "menuItemWithTitle:", "Paste"));
    objj_msgSend(objj_msgSend(CPApp, "mainMenu"), "addItem:", editMenu);
}

), new objj_method(sel_getUid("newProject:"), function $AppController__newProject_(self, _cmd, sender)
{
    if (!self.newProjectDialog)
    {
        self.newProjectDialog = objj_msgSend(objj_msgSend(NewProjectDialog, "alloc"), "init");
        objj_msgSend(objj_msgSend(CPNotificationCenter, "defaultCenter"), "addObserver:selector:name:object:", self, sel_getUid("onNewProjectCreated:"), "NewProjectCreatedNotification", self.newProjectDialog);
    }
    objj_msgSend(self.newProjectDialog, "reset");
    objj_msgSend(self.newProjectDialog, "center");
    objj_msgSend(self.newProjectDialog, "makeKeyAndOrderFront:", nil);
}

), new objj_method(sel_getUid("newFile:"), function $AppController__newFile_(self, _cmd, sender)
{
    if (!self.newFileDialog)
    {
        self.newFileDialog = objj_msgSend(objj_msgSend(NewFileDialog, "alloc"), "init");
    }
    objj_msgSend(self.newFileDialog, "reset");
    objj_msgSend(self.newFileDialog, "center");
    objj_msgSend(self.newFileDialog, "makeKeyAndOrderFront:", nil);
}

), new objj_method(sel_getUid("onNewProjectCreated:"), function $AppController__onNewProjectCreated_(self, _cmd, aNotification)
{
    objj_msgSend(self, "doOpenProject:", objj_msgSend(self.newProjectDialog, "newProject"));
}

), new objj_method(sel_getUid("switchContext:"), function $AppController__switchContext_(self, _cmd, contextMode)
{
    if (contextMode !== self._activeContextMode)
    {
        self._activeContextMode = contextMode;
        if (self._activeContextMode == 0)
        {
            objj_msgSend(self.cibInspectorView, "setHidden:", YES);
            objj_msgSend(self.cibView, "setHidden:", YES);
            objj_msgSend(self.aceEditor, "setHidden:", NO);
        }
        else if (self._activeContextMode == 1)
        {
            objj_msgSend(self.cibView, "setHidden:", NO);
            objj_msgSend(self.cibInspectorView, "setHidden:", NO);
            objj_msgSend(self.aceEditor, "setHidden:", YES);
        }
        else
        {
            objj_msgSend(self.cibView, "setHidden:", NO);
            objj_msgSend(self.cibInspectorView, "setHidden:", NO);
            objj_msgSend(self.aceEditor, "setHidden:", NO);
        }
    }
}

)]);
}{var the_class = objj_allocateClassPair(CPWindow, "OpenProjectWindow"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_inputFileEl"), new objj_ivar("_openBtn"), new objj_ivar("_cancelBtn"), new objj_ivar("_projectToOpen"), new objj_ivar("_target"), new objj_ivar("_action")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("target"), function $OpenProjectWindow__target(self, _cmd)
{
    return self._target;
}

), new objj_method(sel_getUid("setTarget:"), function $OpenProjectWindow__setTarget_(self, _cmd, newValue)
{
    self._target = newValue;
}

), new objj_method(sel_getUid("action"), function $OpenProjectWindow__action(self, _cmd)
{
    return self._action;
}

), new objj_method(sel_getUid("setAction:"), function $OpenProjectWindow__setAction_(self, _cmd, newValue)
{
    self._action = newValue;
}

), new objj_method(sel_getUid("init"), function $OpenProjectWindow__init(self, _cmd)
{
    self = objj_msgSendSuper({ receiver:self, super_class:objj_getClass("OpenProjectWindow").super_class }, "initWithContentRect:styleMask:", CGRectMake(0, 0, 340, 180), CPClosableWindowMask);
    if (self)
    {
        self._projectToOpen = nil;
        objj_msgSend(self, "setTitle:", "Open Project");
        var cv = objj_msgSend(self, "contentView");
        var label = objj_msgSend(CPTextField, "labelWithString:", "Select the Project's Info.json file:");
        objj_msgSend(label, "setFrameOrigin:", CGPointMake(15, 15));
        objj_msgSend(cv, "addSubview:", label);
        self._inputFileEl = $("<input type='file' id='fileopen'></input>");
        self._inputFileEl.click(        function(evt)
        {
            evt.stopPropagation();
        });
        self._inputFileEl.on("change",         function(evt)
        {
            var reader = new FileReader();
            if (evt.target.files.length > 0)
            {
                var file = evt.target.files[0];
                reader.onload =                 function(e)
                {
                    var result = reader.result;
                    try {
                        var projInfo = JSON.parse(result);
                        if (projInfo.projectDir)
                        {
                            self._projectToOpen = objj_msgSend(objj_msgSend(CPDictionary, "alloc"), "initWithObjectsAndKeys:", projInfo.name, "name", projInfo.projectDir, "directory");
                        }                    }
                    catch(err) {
                    }
                };
                reader.readAsText(file);
            }        });
        self._inputFileEl.css({position: "absolute", left: 15, top: 45});
        cv._DOMElement.append(self._inputFileEl);
        self._cancelBtn = objj_msgSend(CPButton, "buttonWithTitle:", "Cancel");
        objj_msgSend(self._cancelBtn, "setFrame:", CGRectMake(160, 140, 80, 25));
        objj_msgSend(self._cancelBtn, "setTarget:", self);
        objj_msgSend(self._cancelBtn, "setAction:", sel_getUid("orderOut:"));
        objj_msgSend(cv, "addSubview:", self._cancelBtn);
        self._openBtn = objj_msgSend(CPButton, "buttonWithTitle:", "Open");
        objj_msgSend(self._openBtn, "setFrame:", CGRectMake(245, 140, 80, 25));
        objj_msgSend(self._openBtn, "setTarget:", self);
        objj_msgSend(self._openBtn, "setAction:", sel_getUid("onOpen:"));
        objj_msgSend(cv, "addSubview:", self._openBtn);
    }
    return self;
}

), new objj_method(sel_getUid("onOpen:"), function $OpenProjectWindow__onOpen_(self, _cmd, sender)
{
    if (self._projectToOpen)
        objj_msgSend(self._target, "performSelector:withObject:", self._action, self._projectToOpen);
    objj_msgSend(self, "orderOut:", nil);
}

)]);
}function saveFile(filePath, data)
{
    var stats = FS.statSync(filePath);
    var time = stats.mtime.getTime();
    FS.writeFileSync(filePath, data);
    return {time: time};
}
function readFile(filePath)
{
    var exists = FS.existsSync(filePath);
    if (exists)
    {
        var stats = FS.statSync(filePath);
        var time = stats.mtime.getTime();
        var data = FS.readFileSync(filePath, "UTF-8");
        return {time: time, contents: data};
    }
    return null;
}
function getFilesInDirectory(dirPath)
{
    var theFiles = [];
    var exists = FS.existsSync(dirPath);
    if (!exists)
        return null;
    var files = FS.readdirSync(dirPath),
        count = files.length,
        i = 0;
    for (; i < count; i++)
    {
        var file = files[i];
        if (file.length > 0 && file[0] != ".")
        {
            var fobj = {"name": file, "path": PATH.join(dirPath, file)};
            var stats = FS.statSync(PATH.join(dirPath, file));
            if (stats.isDirectory())
            {
                fobj.isDirectory = true;
                fobj.files = getFilesInDirectory(PATH.join(dirPath, file));
                theFiles.push(fobj);
            }
            else if (stats.isFile())
            {
                fobj.isDirectory = false;
                theFiles.push(fobj);
            }
        }
    }
    return theFiles;
}
var FS = require('fs'),
    PATH = require('path'),
    BUILD = require('./build'),
    GUI = require('nw.gui'),
    NCP = (require("ncp")).ncp;
function main()
{
    return CPApplicationMain();
}
