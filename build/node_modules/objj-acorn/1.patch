diff --git a/acorn.js b/acorn.js
index c37ac98..c6036a0 100644
--- a/acorn.js
+++ b/acorn.js
@@ -398,7 +398,8 @@
 
   var _filename = {keyword: "filename"}, _unsigned = {keyword: "unsigned", okAsIdent: true}, _signed = {keyword: "signed", okAsIdent: true};
   var _byte = {keyword: "byte", okAsIdent: true}, _char = {keyword: "char", okAsIdent: true}, _short = {keyword: "short", okAsIdent: true};
-  var _int = {keyword: "int", okAsIdent: true}, _long = {keyword: "long", okAsIdent: true}, _preprocess = {keyword: "#"};
+  var _int = {keyword: "int", okAsIdent: true}, _long = {keyword: "long", okAsIdent: true}, _id = {keyword: "id", okAsIdent: true}
+  var _preprocess = {keyword: "#"};
 
   // Preprocessor keywords
 
@@ -432,7 +433,7 @@
   // Map Objective-J keyword names to token types.
 
   var keywordTypesObjJ = {"IBAction": _action, "IBOutlet": _outlet, "unsigned": _unsigned, "signed": _signed, "byte": _byte, "char": _char,
-                          "short": _short, "int": _int, "long": _long };
+                          "short": _short, "int": _int, "long": _long, "id": _id };
 
   // Map Objective-J "@" keyword names to token types.
 
@@ -3011,8 +3012,8 @@ var preIfLevel = 0;
   }
 
   // Parse the next token as an Objective-J typ.
-  // It can be an identifier followed by a optional protocol '<CPKeyValueBinding>'
-  // It can be 'void'
+  // It can be 'id' followed by a optional protocol '<CPKeyValueBinding, ...>'
+  // It can be 'void' or 'id'
   // It can be 'signed' or 'unsigned' followed by an optional 'char', 'byte', 'short', 'int' or 'long'
   // It can be 'char', 'byte', 'short', 'int' or 'long'
   // 'int' can be followed by an optinal 'long'. 'long' can be followed by an optional extra 'long'
@@ -3020,10 +3021,13 @@ var preIfLevel = 0;
   function parseObjectiveJType() {
     var node = startNode();
     if (tokType === _name) {
-      var type = tokVal;
-      node.name = type;
+      node.name = tokVal;
+      node.typeisclass = true;
       next();
-      if (type === "id" && tokVal === '<') {
+    } else {
+      node.name = tokType.keyword;
+      // Is it 'id' followed by a '<' parse protocols.
+      if (eat(_id) && tokVal === '<') {
         var first = true,
             protocols = [];
         node.protocols = protocols;
@@ -3036,10 +3040,7 @@ var preIfLevel = 0;
           protocols.push(parseIdent(true));
         } while (tokVal !== '>');
         next();
-      }
-    } else {
-      node.name = tokType.keyword;
-      if (!eat(_void)) {
+      } else if (!eat(_void)) { // If it is not 'void' it must be some basic type
         var nextKeyWord;
         if (eat(_signed) || eat(_unsigned))
           nextKeyWord = tokType.keyword || true;
@@ -3064,6 +3065,7 @@ var preIfLevel = 0;
         }
         if (!nextKeyWord) {
           node.name = (!options.forbidReserved && tokType.keyword) || unexpected();
+          node.typeisclass = true;
           next();
         }
       }
